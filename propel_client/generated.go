// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package client

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// AddColumnToDataPoolJobAddColumnToDataPoolJob includes the requested fields of the GraphQL type AddColumnToDataPoolJob.
// The GraphQL type's documentation follows.
//
// AddColumnToDataPoolJob scheduled for a specific Data Pool.
//
// The Add Column Job represents the asynchronous process of adding a column,
// given its name and type, to a Data Pool. It tracks the process of adding a column
// until it is finished, showing the progress and the outcome when it is finished.
type AddColumnToDataPoolJobAddColumnToDataPoolJob struct {
	AddColumnToDataPoolJobData `json:"-"`
}

// GetId returns AddColumnToDataPoolJobAddColumnToDataPoolJob.Id, and is useful for accessing the field via an interface.
func (v *AddColumnToDataPoolJobAddColumnToDataPoolJob) GetId() string {
	return v.AddColumnToDataPoolJobData.Id
}

// GetDataPool returns AddColumnToDataPoolJobAddColumnToDataPoolJob.DataPool, and is useful for accessing the field via an interface.
func (v *AddColumnToDataPoolJobAddColumnToDataPoolJob) GetDataPool() *AddColumnToDataPoolJobDataDataPool {
	return v.AddColumnToDataPoolJobData.DataPool
}

// GetStatus returns AddColumnToDataPoolJobAddColumnToDataPoolJob.Status, and is useful for accessing the field via an interface.
func (v *AddColumnToDataPoolJobAddColumnToDataPoolJob) GetStatus() JobStatus {
	return v.AddColumnToDataPoolJobData.Status
}

// GetError returns AddColumnToDataPoolJobAddColumnToDataPoolJob.Error, and is useful for accessing the field via an interface.
func (v *AddColumnToDataPoolJobAddColumnToDataPoolJob) GetError() *AddColumnToDataPoolJobDataError {
	return v.AddColumnToDataPoolJobData.Error
}

// GetColumnName returns AddColumnToDataPoolJobAddColumnToDataPoolJob.ColumnName, and is useful for accessing the field via an interface.
func (v *AddColumnToDataPoolJobAddColumnToDataPoolJob) GetColumnName() string {
	return v.AddColumnToDataPoolJobData.ColumnName
}

// GetColumnType returns AddColumnToDataPoolJobAddColumnToDataPoolJob.ColumnType, and is useful for accessing the field via an interface.
func (v *AddColumnToDataPoolJobAddColumnToDataPoolJob) GetColumnType() ColumnType {
	return v.AddColumnToDataPoolJobData.ColumnType
}

func (v *AddColumnToDataPoolJobAddColumnToDataPoolJob) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AddColumnToDataPoolJobAddColumnToDataPoolJob
		graphql.NoUnmarshalJSON
	}
	firstPass.AddColumnToDataPoolJobAddColumnToDataPoolJob = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AddColumnToDataPoolJobData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAddColumnToDataPoolJobAddColumnToDataPoolJob struct {
	Id string `json:"id"`

	DataPool *AddColumnToDataPoolJobDataDataPool `json:"dataPool"`

	Status JobStatus `json:"status"`

	Error *AddColumnToDataPoolJobDataError `json:"error"`

	ColumnName string `json:"columnName"`

	ColumnType ColumnType `json:"columnType"`
}

func (v *AddColumnToDataPoolJobAddColumnToDataPoolJob) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AddColumnToDataPoolJobAddColumnToDataPoolJob) __premarshalJSON() (*__premarshalAddColumnToDataPoolJobAddColumnToDataPoolJob, error) {
	var retval __premarshalAddColumnToDataPoolJobAddColumnToDataPoolJob

	retval.Id = v.AddColumnToDataPoolJobData.Id
	retval.DataPool = v.AddColumnToDataPoolJobData.DataPool
	retval.Status = v.AddColumnToDataPoolJobData.Status
	retval.Error = v.AddColumnToDataPoolJobData.Error
	retval.ColumnName = v.AddColumnToDataPoolJobData.ColumnName
	retval.ColumnType = v.AddColumnToDataPoolJobData.ColumnType
	return &retval, nil
}

// AddColumnToDataPoolJobData includes the GraphQL fields of AddColumnToDataPoolJob requested by the fragment AddColumnToDataPoolJobData.
// The GraphQL type's documentation follows.
//
// AddColumnToDataPoolJob scheduled for a specific Data Pool.
//
// The Add Column Job represents the asynchronous process of adding a column,
// given its name and type, to a Data Pool. It tracks the process of adding a column
// until it is finished, showing the progress and the outcome when it is finished.
type AddColumnToDataPoolJobData struct {
	// The AddColumnToDataPoolJob's ID.
	Id string `json:"id"`
	// The Data Pool to which a column will be added by the Job.
	DataPool *AddColumnToDataPoolJobDataDataPool `json:"dataPool"`
	// The current AddColumnToDataPoolJob's status.
	Status JobStatus `json:"status"`
	// The error that occurred while adding the column data, if any.
	Error *AddColumnToDataPoolJobDataError `json:"error"`
	// Name of the new column.
	ColumnName string `json:"columnName"`
	// Type of the new column.
	ColumnType ColumnType `json:"columnType"`
}

// GetId returns AddColumnToDataPoolJobData.Id, and is useful for accessing the field via an interface.
func (v *AddColumnToDataPoolJobData) GetId() string { return v.Id }

// GetDataPool returns AddColumnToDataPoolJobData.DataPool, and is useful for accessing the field via an interface.
func (v *AddColumnToDataPoolJobData) GetDataPool() *AddColumnToDataPoolJobDataDataPool {
	return v.DataPool
}

// GetStatus returns AddColumnToDataPoolJobData.Status, and is useful for accessing the field via an interface.
func (v *AddColumnToDataPoolJobData) GetStatus() JobStatus { return v.Status }

// GetError returns AddColumnToDataPoolJobData.Error, and is useful for accessing the field via an interface.
func (v *AddColumnToDataPoolJobData) GetError() *AddColumnToDataPoolJobDataError { return v.Error }

// GetColumnName returns AddColumnToDataPoolJobData.ColumnName, and is useful for accessing the field via an interface.
func (v *AddColumnToDataPoolJobData) GetColumnName() string { return v.ColumnName }

// GetColumnType returns AddColumnToDataPoolJobData.ColumnType, and is useful for accessing the field via an interface.
func (v *AddColumnToDataPoolJobData) GetColumnType() ColumnType { return v.ColumnType }

// AddColumnToDataPoolJobDataDataPool includes the requested fields of the GraphQL type DataPool.
// The GraphQL type's documentation follows.
//
// The Data Pool object. Data Pools are Propel's high-speed data store and cache
//
// [Learn more about Data Pools](https://www.propeldata.com/docs/connect-your-data#key-concept-2-data-pools).
type AddColumnToDataPoolJobDataDataPool struct {
	// The Data Pool's unique identifier.
	Id string `json:"id"`
}

// GetId returns AddColumnToDataPoolJobDataDataPool.Id, and is useful for accessing the field via an interface.
func (v *AddColumnToDataPoolJobDataDataPool) GetId() string { return v.Id }

// AddColumnToDataPoolJobDataError includes the requested fields of the GraphQL type Error.
// The GraphQL type's documentation follows.
//
// The error object.
type AddColumnToDataPoolJobDataError struct {
	GqlError `json:"-"`
}

// GetCode returns AddColumnToDataPoolJobDataError.Code, and is useful for accessing the field via an interface.
func (v *AddColumnToDataPoolJobDataError) GetCode() *int { return v.GqlError.Code }

// GetMessage returns AddColumnToDataPoolJobDataError.Message, and is useful for accessing the field via an interface.
func (v *AddColumnToDataPoolJobDataError) GetMessage() string { return v.GqlError.Message }

func (v *AddColumnToDataPoolJobDataError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AddColumnToDataPoolJobDataError
		graphql.NoUnmarshalJSON
	}
	firstPass.AddColumnToDataPoolJobDataError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.GqlError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAddColumnToDataPoolJobDataError struct {
	Code *int `json:"code"`

	Message string `json:"message"`
}

func (v *AddColumnToDataPoolJobDataError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AddColumnToDataPoolJobDataError) __premarshalJSON() (*__premarshalAddColumnToDataPoolJobDataError, error) {
	var retval __premarshalAddColumnToDataPoolJobDataError

	retval.Code = v.GqlError.Code
	retval.Message = v.GqlError.Message
	return &retval, nil
}

// AddColumnToDataPoolJobResponse is returned by AddColumnToDataPoolJob on success.
type AddColumnToDataPoolJobResponse struct {
	// This query returns the AddColumnToDataPoolJob specified by the given ID.
	//
	// The AddColumnToDataPoolJob represents the asynchronous process of adding
	// a column, given its name and type, to a Data Pool.
	AddColumnToDataPoolJob *AddColumnToDataPoolJobAddColumnToDataPoolJob `json:"addColumnToDataPoolJob"`
}

// GetAddColumnToDataPoolJob returns AddColumnToDataPoolJobResponse.AddColumnToDataPoolJob, and is useful for accessing the field via an interface.
func (v *AddColumnToDataPoolJobResponse) GetAddColumnToDataPoolJob() *AddColumnToDataPoolJobAddColumnToDataPoolJob {
	return v.AddColumnToDataPoolJob
}

// Parameters for the AggregatingMergeTree table engine.
type AggregatingMergeTreeTableEngineInput struct {
	// The type is always `AGGREGATING_MERGE_TREE`.
	Type *TableEngineType `json:"type"`
}

// GetType returns AggregatingMergeTreeTableEngineInput.Type, and is useful for accessing the field via an interface.
func (v *AggregatingMergeTreeTableEngineInput) GetType() *TableEngineType { return v.Type }

// AssignDataPoolAccessPolicyResponse is returned by AssignDataPoolAccessPolicy on success.
type AssignDataPoolAccessPolicyResponse struct {
	// Assign a Data Pool Access Policy to an Application.
	//
	// The Data Pool Access Policy will restrict the Data Pool rows and columns that the Application
	// can query. If the Data Pool has `accessControlEnabled` set to true, the Application
	// *must* have a Data Pool Access Policy assigned in order to query the Data Pool.
	//
	// An Application can have at most one Data Pool Access Policy assigned for a given Data Pool. If
	// an Application already has a Data Pool Access Policy for a given Data Pool, and you call this
	// mutation with another Data Pool Access Policy for the same Data Pool, the Application's Data Pool Access
	// Policy will be replaced.
	AssignDataPoolAccessPolicyToApplication *string `json:"assignDataPoolAccessPolicyToApplication"`
}

// GetAssignDataPoolAccessPolicyToApplication returns AssignDataPoolAccessPolicyResponse.AssignDataPoolAccessPolicyToApplication, and is useful for accessing the field via an interface.
func (v *AssignDataPoolAccessPolicyResponse) GetAssignDataPoolAccessPolicyToApplication() *string {
	return v.AssignDataPoolAccessPolicyToApplication
}

type BackfillOptionsInput struct {
	// Whether historical data should be backfilled or not
	Backfill *bool `json:"backfill"`
}

// GetBackfill returns BackfillOptionsInput.Backfill, and is useful for accessing the field via an interface.
func (v *BackfillOptionsInput) GetBackfill() *bool { return v.Backfill }

// ColumnData includes the GraphQL fields of Column requested by the fragment ColumnData.
// The GraphQL type's documentation follows.
//
// The column object.
//
// Once a table introspection succeeds, it creates a new table object for every table it introspected. Within each table object, it also creates a column object for every column it introspected.
type ColumnData struct {
	// The column's name.
	Name string `json:"name"`
	// The column's type.
	Type string `json:"type"`
	// Whether the column is nullable, meaning whether it accepts a null value.
	IsNullable *bool `json:"isNullable"`
}

// GetName returns ColumnData.Name, and is useful for accessing the field via an interface.
func (v *ColumnData) GetName() string { return v.Name }

// GetType returns ColumnData.Type, and is useful for accessing the field via an interface.
func (v *ColumnData) GetType() string { return v.Type }

// GetIsNullable returns ColumnData.IsNullable, and is useful for accessing the field via an interface.
func (v *ColumnData) GetIsNullable() *bool { return v.IsNullable }

// The Propel data types.
type ColumnType string

const (
	// True or false.
	ColumnTypeBoolean ColumnType = "BOOLEAN"
	// A variable-length string.
	ColumnTypeString ColumnType = "STRING"
	// A 32-bit signed double-precision floating point number.
	ColumnTypeFloat ColumnType = "FLOAT"
	// A 64-bit signed double-precision floating point number.
	ColumnTypeDouble ColumnType = "DOUBLE"
	// An 8-bit signed integer, with a minimum value of -2⁷ and a maximum value of 2⁷-1.
	ColumnTypeInt8 ColumnType = "INT8"
	// A 16-bit signed integer, with a minimum value of -2¹⁵ and a maximum value of 2¹⁵-1.
	ColumnTypeInt16 ColumnType = "INT16"
	// A 32-bit signed integer, with a minimum value of -2³¹ and a maximum value of 2³¹-1.
	ColumnTypeInt32 ColumnType = "INT32"
	// A 64-bit signed integer, with a minimum value of -2⁶³ and a maximum value of 2⁶³-1.
	ColumnTypeInt64 ColumnType = "INT64"
	// A date without a timestamp. For example, "YYYY-MM-DD".
	ColumnTypeDate ColumnType = "DATE"
	// A date with a timestamp. For example, "yyy-MM-dd HH:mm:ss".
	ColumnTypeTimestamp ColumnType = "TIMESTAMP"
	// A JavaScript Object Notation (JSON) document.
	ColumnTypeJson ColumnType = "JSON"
	// A ClickHouse-specific type.
	ColumnTypeClickhouse ColumnType = "CLICKHOUSE"
)

// CommonData includes the GraphQL fields of Common requested by the fragment CommonData.
// The GraphQL type's documentation follows.
//
// All Propel resources, such as Applications and Metrics, have a set of common properties, such as the Propel Account and Environment that they are associated with. They also have a unique ID, which is specified in the interface `Node`.
//
// Environments are independent and isolated Propel workspaces for development, staging (testing), and production workloads.
//
// CommonData is implemented by the following types:
// CommonDataApplication
// CommonDataDataSource
// CommonDataDataPool
// CommonDataMaterializedView
// CommonDataMetric
// CommonDataDataPoolAccessPolicy
type CommonData interface {
	implementsGraphQLInterfaceCommonData()
	// GetUniqueName returns the interface-field "uniqueName" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// The resource's unique name.
	GetUniqueName() string
	// GetDescription returns the interface-field "description" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// The resource's description.
	GetDescription() string
	// GetAccount returns the interface-field "account" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// The resource's Account.
	GetAccount() *CommonDataAccount
	// GetEnvironment returns the interface-field "environment" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// The resource's Environment.
	GetEnvironment() *CommonDataEnvironment
	// GetCreatedAt returns the interface-field "createdAt" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// The resource's creation date and time in UTC.
	GetCreatedAt() time.Time
	// GetModifiedAt returns the interface-field "modifiedAt" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// The resource's last modification date and time in UTC.
	GetModifiedAt() time.Time
	// GetCreatedBy returns the interface-field "createdBy" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// The resource's creator. It can be either a User ID, an Application ID, or "system" if it was created by Propel.
	GetCreatedBy() string
	// GetModifiedBy returns the interface-field "modifiedBy" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// The resource's last modifier. It can be either a User ID, an Application ID, or "system" if it was modified by Propel.
	GetModifiedBy() string
}

func (v *CommonDataApplication) implementsGraphQLInterfaceCommonData()          {}
func (v *CommonDataDataSource) implementsGraphQLInterfaceCommonData()           {}
func (v *CommonDataDataPool) implementsGraphQLInterfaceCommonData()             {}
func (v *CommonDataMaterializedView) implementsGraphQLInterfaceCommonData()     {}
func (v *CommonDataMetric) implementsGraphQLInterfaceCommonData()               {}
func (v *CommonDataDataPoolAccessPolicy) implementsGraphQLInterfaceCommonData() {}

func __unmarshalCommonData(b []byte, v *CommonData) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Application":
		*v = new(CommonDataApplication)
		return json.Unmarshal(b, *v)
	case "DataSource":
		*v = new(CommonDataDataSource)
		return json.Unmarshal(b, *v)
	case "DataPool":
		*v = new(CommonDataDataPool)
		return json.Unmarshal(b, *v)
	case "MaterializedView":
		*v = new(CommonDataMaterializedView)
		return json.Unmarshal(b, *v)
	case "Metric":
		*v = new(CommonDataMetric)
		return json.Unmarshal(b, *v)
	case "DataPoolAccessPolicy":
		*v = new(CommonDataDataPoolAccessPolicy)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Common.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for CommonData: "%v"`, tn.TypeName)
	}
}

func __marshalCommonData(v *CommonData) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *CommonDataApplication:
		typename = "Application"

		result := struct {
			TypeName string `json:"__typename"`
			*CommonDataApplication
		}{typename, v}
		return json.Marshal(result)
	case *CommonDataDataSource:
		typename = "DataSource"

		result := struct {
			TypeName string `json:"__typename"`
			*CommonDataDataSource
		}{typename, v}
		return json.Marshal(result)
	case *CommonDataDataPool:
		typename = "DataPool"

		result := struct {
			TypeName string `json:"__typename"`
			*CommonDataDataPool
		}{typename, v}
		return json.Marshal(result)
	case *CommonDataMaterializedView:
		typename = "MaterializedView"

		result := struct {
			TypeName string `json:"__typename"`
			*CommonDataMaterializedView
		}{typename, v}
		return json.Marshal(result)
	case *CommonDataMetric:
		typename = "Metric"

		result := struct {
			TypeName string `json:"__typename"`
			*CommonDataMetric
		}{typename, v}
		return json.Marshal(result)
	case *CommonDataDataPoolAccessPolicy:
		typename = "DataPoolAccessPolicy"

		result := struct {
			TypeName string `json:"__typename"`
			*CommonDataDataPoolAccessPolicy
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for CommonData: "%T"`, v)
	}
}

// CommonDataAccount includes the requested fields of the GraphQL type Account.
// The GraphQL type's documentation follows.
//
// The Account object.
type CommonDataAccount struct {
	// The Account's unique identifier.
	Id string `json:"id"`
}

// GetId returns CommonDataAccount.Id, and is useful for accessing the field via an interface.
func (v *CommonDataAccount) GetId() string { return v.Id }

// CommonData includes the GraphQL fields of Application requested by the fragment CommonData.
// The GraphQL type's documentation follows.
//
// All Propel resources, such as Applications and Metrics, have a set of common properties, such as the Propel Account and Environment that they are associated with. They also have a unique ID, which is specified in the interface `Node`.
//
// Environments are independent and isolated Propel workspaces for development, staging (testing), and production workloads.
type CommonDataApplication struct {
	// The resource's unique name.
	UniqueName string `json:"uniqueName"`
	// The resource's description.
	Description string `json:"description"`
	// The resource's Account.
	Account *CommonDataAccount `json:"account"`
	// The resource's Environment.
	Environment *CommonDataEnvironment `json:"environment"`
	// The resource's creation date and time in UTC.
	CreatedAt time.Time `json:"createdAt"`
	// The resource's last modification date and time in UTC.
	ModifiedAt time.Time `json:"modifiedAt"`
	// The resource's creator. It can be either a User ID, an Application ID, or "system" if it was created by Propel.
	CreatedBy string `json:"createdBy"`
	// The resource's last modifier. It can be either a User ID, an Application ID, or "system" if it was modified by Propel.
	ModifiedBy string `json:"modifiedBy"`
}

// GetUniqueName returns CommonDataApplication.UniqueName, and is useful for accessing the field via an interface.
func (v *CommonDataApplication) GetUniqueName() string { return v.UniqueName }

// GetDescription returns CommonDataApplication.Description, and is useful for accessing the field via an interface.
func (v *CommonDataApplication) GetDescription() string { return v.Description }

// GetAccount returns CommonDataApplication.Account, and is useful for accessing the field via an interface.
func (v *CommonDataApplication) GetAccount() *CommonDataAccount { return v.Account }

// GetEnvironment returns CommonDataApplication.Environment, and is useful for accessing the field via an interface.
func (v *CommonDataApplication) GetEnvironment() *CommonDataEnvironment { return v.Environment }

// GetCreatedAt returns CommonDataApplication.CreatedAt, and is useful for accessing the field via an interface.
func (v *CommonDataApplication) GetCreatedAt() time.Time { return v.CreatedAt }

// GetModifiedAt returns CommonDataApplication.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CommonDataApplication) GetModifiedAt() time.Time { return v.ModifiedAt }

// GetCreatedBy returns CommonDataApplication.CreatedBy, and is useful for accessing the field via an interface.
func (v *CommonDataApplication) GetCreatedBy() string { return v.CreatedBy }

// GetModifiedBy returns CommonDataApplication.ModifiedBy, and is useful for accessing the field via an interface.
func (v *CommonDataApplication) GetModifiedBy() string { return v.ModifiedBy }

// CommonData includes the GraphQL fields of DataPool requested by the fragment CommonData.
// The GraphQL type's documentation follows.
//
// All Propel resources, such as Applications and Metrics, have a set of common properties, such as the Propel Account and Environment that they are associated with. They also have a unique ID, which is specified in the interface `Node`.
//
// Environments are independent and isolated Propel workspaces for development, staging (testing), and production workloads.
type CommonDataDataPool struct {
	// The resource's unique name.
	UniqueName string `json:"uniqueName"`
	// The resource's description.
	Description string `json:"description"`
	// The resource's Account.
	Account *CommonDataAccount `json:"account"`
	// The resource's Environment.
	Environment *CommonDataEnvironment `json:"environment"`
	// The resource's creation date and time in UTC.
	CreatedAt time.Time `json:"createdAt"`
	// The resource's last modification date and time in UTC.
	ModifiedAt time.Time `json:"modifiedAt"`
	// The resource's creator. It can be either a User ID, an Application ID, or "system" if it was created by Propel.
	CreatedBy string `json:"createdBy"`
	// The resource's last modifier. It can be either a User ID, an Application ID, or "system" if it was modified by Propel.
	ModifiedBy string `json:"modifiedBy"`
}

// GetUniqueName returns CommonDataDataPool.UniqueName, and is useful for accessing the field via an interface.
func (v *CommonDataDataPool) GetUniqueName() string { return v.UniqueName }

// GetDescription returns CommonDataDataPool.Description, and is useful for accessing the field via an interface.
func (v *CommonDataDataPool) GetDescription() string { return v.Description }

// GetAccount returns CommonDataDataPool.Account, and is useful for accessing the field via an interface.
func (v *CommonDataDataPool) GetAccount() *CommonDataAccount { return v.Account }

// GetEnvironment returns CommonDataDataPool.Environment, and is useful for accessing the field via an interface.
func (v *CommonDataDataPool) GetEnvironment() *CommonDataEnvironment { return v.Environment }

// GetCreatedAt returns CommonDataDataPool.CreatedAt, and is useful for accessing the field via an interface.
func (v *CommonDataDataPool) GetCreatedAt() time.Time { return v.CreatedAt }

// GetModifiedAt returns CommonDataDataPool.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CommonDataDataPool) GetModifiedAt() time.Time { return v.ModifiedAt }

// GetCreatedBy returns CommonDataDataPool.CreatedBy, and is useful for accessing the field via an interface.
func (v *CommonDataDataPool) GetCreatedBy() string { return v.CreatedBy }

// GetModifiedBy returns CommonDataDataPool.ModifiedBy, and is useful for accessing the field via an interface.
func (v *CommonDataDataPool) GetModifiedBy() string { return v.ModifiedBy }

// CommonData includes the GraphQL fields of DataPoolAccessPolicy requested by the fragment CommonData.
// The GraphQL type's documentation follows.
//
// All Propel resources, such as Applications and Metrics, have a set of common properties, such as the Propel Account and Environment that they are associated with. They also have a unique ID, which is specified in the interface `Node`.
//
// Environments are independent and isolated Propel workspaces for development, staging (testing), and production workloads.
type CommonDataDataPoolAccessPolicy struct {
	// The resource's unique name.
	UniqueName string `json:"uniqueName"`
	// The resource's description.
	Description string `json:"description"`
	// The resource's Account.
	Account *CommonDataAccount `json:"account"`
	// The resource's Environment.
	Environment *CommonDataEnvironment `json:"environment"`
	// The resource's creation date and time in UTC.
	CreatedAt time.Time `json:"createdAt"`
	// The resource's last modification date and time in UTC.
	ModifiedAt time.Time `json:"modifiedAt"`
	// The resource's creator. It can be either a User ID, an Application ID, or "system" if it was created by Propel.
	CreatedBy string `json:"createdBy"`
	// The resource's last modifier. It can be either a User ID, an Application ID, or "system" if it was modified by Propel.
	ModifiedBy string `json:"modifiedBy"`
}

// GetUniqueName returns CommonDataDataPoolAccessPolicy.UniqueName, and is useful for accessing the field via an interface.
func (v *CommonDataDataPoolAccessPolicy) GetUniqueName() string { return v.UniqueName }

// GetDescription returns CommonDataDataPoolAccessPolicy.Description, and is useful for accessing the field via an interface.
func (v *CommonDataDataPoolAccessPolicy) GetDescription() string { return v.Description }

// GetAccount returns CommonDataDataPoolAccessPolicy.Account, and is useful for accessing the field via an interface.
func (v *CommonDataDataPoolAccessPolicy) GetAccount() *CommonDataAccount { return v.Account }

// GetEnvironment returns CommonDataDataPoolAccessPolicy.Environment, and is useful for accessing the field via an interface.
func (v *CommonDataDataPoolAccessPolicy) GetEnvironment() *CommonDataEnvironment {
	return v.Environment
}

// GetCreatedAt returns CommonDataDataPoolAccessPolicy.CreatedAt, and is useful for accessing the field via an interface.
func (v *CommonDataDataPoolAccessPolicy) GetCreatedAt() time.Time { return v.CreatedAt }

// GetModifiedAt returns CommonDataDataPoolAccessPolicy.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CommonDataDataPoolAccessPolicy) GetModifiedAt() time.Time { return v.ModifiedAt }

// GetCreatedBy returns CommonDataDataPoolAccessPolicy.CreatedBy, and is useful for accessing the field via an interface.
func (v *CommonDataDataPoolAccessPolicy) GetCreatedBy() string { return v.CreatedBy }

// GetModifiedBy returns CommonDataDataPoolAccessPolicy.ModifiedBy, and is useful for accessing the field via an interface.
func (v *CommonDataDataPoolAccessPolicy) GetModifiedBy() string { return v.ModifiedBy }

// CommonData includes the GraphQL fields of DataSource requested by the fragment CommonData.
// The GraphQL type's documentation follows.
//
// All Propel resources, such as Applications and Metrics, have a set of common properties, such as the Propel Account and Environment that they are associated with. They also have a unique ID, which is specified in the interface `Node`.
//
// Environments are independent and isolated Propel workspaces for development, staging (testing), and production workloads.
type CommonDataDataSource struct {
	// The resource's unique name.
	UniqueName string `json:"uniqueName"`
	// The resource's description.
	Description string `json:"description"`
	// The resource's Account.
	Account *CommonDataAccount `json:"account"`
	// The resource's Environment.
	Environment *CommonDataEnvironment `json:"environment"`
	// The resource's creation date and time in UTC.
	CreatedAt time.Time `json:"createdAt"`
	// The resource's last modification date and time in UTC.
	ModifiedAt time.Time `json:"modifiedAt"`
	// The resource's creator. It can be either a User ID, an Application ID, or "system" if it was created by Propel.
	CreatedBy string `json:"createdBy"`
	// The resource's last modifier. It can be either a User ID, an Application ID, or "system" if it was modified by Propel.
	ModifiedBy string `json:"modifiedBy"`
}

// GetUniqueName returns CommonDataDataSource.UniqueName, and is useful for accessing the field via an interface.
func (v *CommonDataDataSource) GetUniqueName() string { return v.UniqueName }

// GetDescription returns CommonDataDataSource.Description, and is useful for accessing the field via an interface.
func (v *CommonDataDataSource) GetDescription() string { return v.Description }

// GetAccount returns CommonDataDataSource.Account, and is useful for accessing the field via an interface.
func (v *CommonDataDataSource) GetAccount() *CommonDataAccount { return v.Account }

// GetEnvironment returns CommonDataDataSource.Environment, and is useful for accessing the field via an interface.
func (v *CommonDataDataSource) GetEnvironment() *CommonDataEnvironment { return v.Environment }

// GetCreatedAt returns CommonDataDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *CommonDataDataSource) GetCreatedAt() time.Time { return v.CreatedAt }

// GetModifiedAt returns CommonDataDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CommonDataDataSource) GetModifiedAt() time.Time { return v.ModifiedAt }

// GetCreatedBy returns CommonDataDataSource.CreatedBy, and is useful for accessing the field via an interface.
func (v *CommonDataDataSource) GetCreatedBy() string { return v.CreatedBy }

// GetModifiedBy returns CommonDataDataSource.ModifiedBy, and is useful for accessing the field via an interface.
func (v *CommonDataDataSource) GetModifiedBy() string { return v.ModifiedBy }

// CommonDataEnvironment includes the requested fields of the GraphQL type Environment.
// The GraphQL type's documentation follows.
//
// The Environments object.
//
// Environments are independent and isolated Propel workspaces for development, staging (testing), and production workloads. Environments are hosted in a specific region, initially in us-east-2 only.
type CommonDataEnvironment struct {
	// The Environment's unique identifier.
	Id string `json:"id"`
}

// GetId returns CommonDataEnvironment.Id, and is useful for accessing the field via an interface.
func (v *CommonDataEnvironment) GetId() string { return v.Id }

// CommonData includes the GraphQL fields of MaterializedView requested by the fragment CommonData.
// The GraphQL type's documentation follows.
//
// All Propel resources, such as Applications and Metrics, have a set of common properties, such as the Propel Account and Environment that they are associated with. They also have a unique ID, which is specified in the interface `Node`.
//
// Environments are independent and isolated Propel workspaces for development, staging (testing), and production workloads.
type CommonDataMaterializedView struct {
	// The resource's unique name.
	UniqueName string `json:"uniqueName"`
	// The resource's description.
	Description string `json:"description"`
	// The resource's Account.
	Account *CommonDataAccount `json:"account"`
	// The resource's Environment.
	Environment *CommonDataEnvironment `json:"environment"`
	// The resource's creation date and time in UTC.
	CreatedAt time.Time `json:"createdAt"`
	// The resource's last modification date and time in UTC.
	ModifiedAt time.Time `json:"modifiedAt"`
	// The resource's creator. It can be either a User ID, an Application ID, or "system" if it was created by Propel.
	CreatedBy string `json:"createdBy"`
	// The resource's last modifier. It can be either a User ID, an Application ID, or "system" if it was modified by Propel.
	ModifiedBy string `json:"modifiedBy"`
}

// GetUniqueName returns CommonDataMaterializedView.UniqueName, and is useful for accessing the field via an interface.
func (v *CommonDataMaterializedView) GetUniqueName() string { return v.UniqueName }

// GetDescription returns CommonDataMaterializedView.Description, and is useful for accessing the field via an interface.
func (v *CommonDataMaterializedView) GetDescription() string { return v.Description }

// GetAccount returns CommonDataMaterializedView.Account, and is useful for accessing the field via an interface.
func (v *CommonDataMaterializedView) GetAccount() *CommonDataAccount { return v.Account }

// GetEnvironment returns CommonDataMaterializedView.Environment, and is useful for accessing the field via an interface.
func (v *CommonDataMaterializedView) GetEnvironment() *CommonDataEnvironment { return v.Environment }

// GetCreatedAt returns CommonDataMaterializedView.CreatedAt, and is useful for accessing the field via an interface.
func (v *CommonDataMaterializedView) GetCreatedAt() time.Time { return v.CreatedAt }

// GetModifiedAt returns CommonDataMaterializedView.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CommonDataMaterializedView) GetModifiedAt() time.Time { return v.ModifiedAt }

// GetCreatedBy returns CommonDataMaterializedView.CreatedBy, and is useful for accessing the field via an interface.
func (v *CommonDataMaterializedView) GetCreatedBy() string { return v.CreatedBy }

// GetModifiedBy returns CommonDataMaterializedView.ModifiedBy, and is useful for accessing the field via an interface.
func (v *CommonDataMaterializedView) GetModifiedBy() string { return v.ModifiedBy }

// CommonData includes the GraphQL fields of Metric requested by the fragment CommonData.
// The GraphQL type's documentation follows.
//
// All Propel resources, such as Applications and Metrics, have a set of common properties, such as the Propel Account and Environment that they are associated with. They also have a unique ID, which is specified in the interface `Node`.
//
// Environments are independent and isolated Propel workspaces for development, staging (testing), and production workloads.
type CommonDataMetric struct {
	// The resource's unique name.
	UniqueName string `json:"uniqueName"`
	// The resource's description.
	Description string `json:"description"`
	// The resource's Account.
	Account *CommonDataAccount `json:"account"`
	// The resource's Environment.
	Environment *CommonDataEnvironment `json:"environment"`
	// The resource's creation date and time in UTC.
	CreatedAt time.Time `json:"createdAt"`
	// The resource's last modification date and time in UTC.
	ModifiedAt time.Time `json:"modifiedAt"`
	// The resource's creator. It can be either a User ID, an Application ID, or "system" if it was created by Propel.
	CreatedBy string `json:"createdBy"`
	// The resource's last modifier. It can be either a User ID, an Application ID, or "system" if it was modified by Propel.
	ModifiedBy string `json:"modifiedBy"`
}

// GetUniqueName returns CommonDataMetric.UniqueName, and is useful for accessing the field via an interface.
func (v *CommonDataMetric) GetUniqueName() string { return v.UniqueName }

// GetDescription returns CommonDataMetric.Description, and is useful for accessing the field via an interface.
func (v *CommonDataMetric) GetDescription() string { return v.Description }

// GetAccount returns CommonDataMetric.Account, and is useful for accessing the field via an interface.
func (v *CommonDataMetric) GetAccount() *CommonDataAccount { return v.Account }

// GetEnvironment returns CommonDataMetric.Environment, and is useful for accessing the field via an interface.
func (v *CommonDataMetric) GetEnvironment() *CommonDataEnvironment { return v.Environment }

// GetCreatedAt returns CommonDataMetric.CreatedAt, and is useful for accessing the field via an interface.
func (v *CommonDataMetric) GetCreatedAt() time.Time { return v.CreatedAt }

// GetModifiedAt returns CommonDataMetric.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CommonDataMetric) GetModifiedAt() time.Time { return v.ModifiedAt }

// GetCreatedBy returns CommonDataMetric.CreatedBy, and is useful for accessing the field via an interface.
func (v *CommonDataMetric) GetCreatedBy() string { return v.CreatedBy }

// GetModifiedBy returns CommonDataMetric.ModifiedBy, and is useful for accessing the field via an interface.
func (v *CommonDataMetric) GetModifiedBy() string { return v.ModifiedBy }

// CreateAddColumnToDataPoolJobCreateAddColumnToDataPoolJobAddColumnToDataPoolJobResponse includes the requested fields of the GraphQL type AddColumnToDataPoolJobResponse.
// The GraphQL type's documentation follows.
//
// The response returned by the Add Column Job.
type CreateAddColumnToDataPoolJobCreateAddColumnToDataPoolJobAddColumnToDataPoolJobResponse struct {
	// The AddColumnToDataPool Job that was just created.
	Job *CreateAddColumnToDataPoolJobCreateAddColumnToDataPoolJobAddColumnToDataPoolJobResponseJobAddColumnToDataPoolJob `json:"job"`
}

// GetJob returns CreateAddColumnToDataPoolJobCreateAddColumnToDataPoolJobAddColumnToDataPoolJobResponse.Job, and is useful for accessing the field via an interface.
func (v *CreateAddColumnToDataPoolJobCreateAddColumnToDataPoolJobAddColumnToDataPoolJobResponse) GetJob() *CreateAddColumnToDataPoolJobCreateAddColumnToDataPoolJobAddColumnToDataPoolJobResponseJobAddColumnToDataPoolJob {
	return v.Job
}

// CreateAddColumnToDataPoolJobCreateAddColumnToDataPoolJobAddColumnToDataPoolJobResponseJobAddColumnToDataPoolJob includes the requested fields of the GraphQL type AddColumnToDataPoolJob.
// The GraphQL type's documentation follows.
//
// AddColumnToDataPoolJob scheduled for a specific Data Pool.
//
// The Add Column Job represents the asynchronous process of adding a column,
// given its name and type, to a Data Pool. It tracks the process of adding a column
// until it is finished, showing the progress and the outcome when it is finished.
type CreateAddColumnToDataPoolJobCreateAddColumnToDataPoolJobAddColumnToDataPoolJobResponseJobAddColumnToDataPoolJob struct {
	AddColumnToDataPoolJobData `json:"-"`
}

// GetId returns CreateAddColumnToDataPoolJobCreateAddColumnToDataPoolJobAddColumnToDataPoolJobResponseJobAddColumnToDataPoolJob.Id, and is useful for accessing the field via an interface.
func (v *CreateAddColumnToDataPoolJobCreateAddColumnToDataPoolJobAddColumnToDataPoolJobResponseJobAddColumnToDataPoolJob) GetId() string {
	return v.AddColumnToDataPoolJobData.Id
}

// GetDataPool returns CreateAddColumnToDataPoolJobCreateAddColumnToDataPoolJobAddColumnToDataPoolJobResponseJobAddColumnToDataPoolJob.DataPool, and is useful for accessing the field via an interface.
func (v *CreateAddColumnToDataPoolJobCreateAddColumnToDataPoolJobAddColumnToDataPoolJobResponseJobAddColumnToDataPoolJob) GetDataPool() *AddColumnToDataPoolJobDataDataPool {
	return v.AddColumnToDataPoolJobData.DataPool
}

// GetStatus returns CreateAddColumnToDataPoolJobCreateAddColumnToDataPoolJobAddColumnToDataPoolJobResponseJobAddColumnToDataPoolJob.Status, and is useful for accessing the field via an interface.
func (v *CreateAddColumnToDataPoolJobCreateAddColumnToDataPoolJobAddColumnToDataPoolJobResponseJobAddColumnToDataPoolJob) GetStatus() JobStatus {
	return v.AddColumnToDataPoolJobData.Status
}

// GetError returns CreateAddColumnToDataPoolJobCreateAddColumnToDataPoolJobAddColumnToDataPoolJobResponseJobAddColumnToDataPoolJob.Error, and is useful for accessing the field via an interface.
func (v *CreateAddColumnToDataPoolJobCreateAddColumnToDataPoolJobAddColumnToDataPoolJobResponseJobAddColumnToDataPoolJob) GetError() *AddColumnToDataPoolJobDataError {
	return v.AddColumnToDataPoolJobData.Error
}

// GetColumnName returns CreateAddColumnToDataPoolJobCreateAddColumnToDataPoolJobAddColumnToDataPoolJobResponseJobAddColumnToDataPoolJob.ColumnName, and is useful for accessing the field via an interface.
func (v *CreateAddColumnToDataPoolJobCreateAddColumnToDataPoolJobAddColumnToDataPoolJobResponseJobAddColumnToDataPoolJob) GetColumnName() string {
	return v.AddColumnToDataPoolJobData.ColumnName
}

// GetColumnType returns CreateAddColumnToDataPoolJobCreateAddColumnToDataPoolJobAddColumnToDataPoolJobResponseJobAddColumnToDataPoolJob.ColumnType, and is useful for accessing the field via an interface.
func (v *CreateAddColumnToDataPoolJobCreateAddColumnToDataPoolJobAddColumnToDataPoolJobResponseJobAddColumnToDataPoolJob) GetColumnType() ColumnType {
	return v.AddColumnToDataPoolJobData.ColumnType
}

func (v *CreateAddColumnToDataPoolJobCreateAddColumnToDataPoolJobAddColumnToDataPoolJobResponseJobAddColumnToDataPoolJob) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateAddColumnToDataPoolJobCreateAddColumnToDataPoolJobAddColumnToDataPoolJobResponseJobAddColumnToDataPoolJob
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateAddColumnToDataPoolJobCreateAddColumnToDataPoolJobAddColumnToDataPoolJobResponseJobAddColumnToDataPoolJob = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AddColumnToDataPoolJobData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateAddColumnToDataPoolJobCreateAddColumnToDataPoolJobAddColumnToDataPoolJobResponseJobAddColumnToDataPoolJob struct {
	Id string `json:"id"`

	DataPool *AddColumnToDataPoolJobDataDataPool `json:"dataPool"`

	Status JobStatus `json:"status"`

	Error *AddColumnToDataPoolJobDataError `json:"error"`

	ColumnName string `json:"columnName"`

	ColumnType ColumnType `json:"columnType"`
}

func (v *CreateAddColumnToDataPoolJobCreateAddColumnToDataPoolJobAddColumnToDataPoolJobResponseJobAddColumnToDataPoolJob) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateAddColumnToDataPoolJobCreateAddColumnToDataPoolJobAddColumnToDataPoolJobResponseJobAddColumnToDataPoolJob) __premarshalJSON() (*__premarshalCreateAddColumnToDataPoolJobCreateAddColumnToDataPoolJobAddColumnToDataPoolJobResponseJobAddColumnToDataPoolJob, error) {
	var retval __premarshalCreateAddColumnToDataPoolJobCreateAddColumnToDataPoolJobAddColumnToDataPoolJobResponseJobAddColumnToDataPoolJob

	retval.Id = v.AddColumnToDataPoolJobData.Id
	retval.DataPool = v.AddColumnToDataPoolJobData.DataPool
	retval.Status = v.AddColumnToDataPoolJobData.Status
	retval.Error = v.AddColumnToDataPoolJobData.Error
	retval.ColumnName = v.AddColumnToDataPoolJobData.ColumnName
	retval.ColumnType = v.AddColumnToDataPoolJobData.ColumnType
	return &retval, nil
}

// The fields for creating an Add Column Job.
type CreateAddColumnToDataPoolJobInput struct {
	// The Data Pool to which the column will be added.
	DataPool string `json:"dataPool"`
	// Name of the new column.
	ColumnName string `json:"columnName"`
	// Type of the new column.
	ColumnType ColumnType `json:"columnType"`
	// JSON property to which the new column corresponds.
	JsonProperty *string `json:"jsonProperty"`
}

// GetDataPool returns CreateAddColumnToDataPoolJobInput.DataPool, and is useful for accessing the field via an interface.
func (v *CreateAddColumnToDataPoolJobInput) GetDataPool() string { return v.DataPool }

// GetColumnName returns CreateAddColumnToDataPoolJobInput.ColumnName, and is useful for accessing the field via an interface.
func (v *CreateAddColumnToDataPoolJobInput) GetColumnName() string { return v.ColumnName }

// GetColumnType returns CreateAddColumnToDataPoolJobInput.ColumnType, and is useful for accessing the field via an interface.
func (v *CreateAddColumnToDataPoolJobInput) GetColumnType() ColumnType { return v.ColumnType }

// GetJsonProperty returns CreateAddColumnToDataPoolJobInput.JsonProperty, and is useful for accessing the field via an interface.
func (v *CreateAddColumnToDataPoolJobInput) GetJsonProperty() *string { return v.JsonProperty }

// CreateAddColumnToDataPoolJobResponse is returned by CreateAddColumnToDataPoolJob on success.
type CreateAddColumnToDataPoolJobResponse struct {
	// Schedules a new AddColumnToDataPoolJob on the specified Data Pool.
	CreateAddColumnToDataPoolJob *CreateAddColumnToDataPoolJobCreateAddColumnToDataPoolJobAddColumnToDataPoolJobResponse `json:"createAddColumnToDataPoolJob"`
}

// GetCreateAddColumnToDataPoolJob returns CreateAddColumnToDataPoolJobResponse.CreateAddColumnToDataPoolJob, and is useful for accessing the field via an interface.
func (v *CreateAddColumnToDataPoolJobResponse) GetCreateAddColumnToDataPoolJob() *CreateAddColumnToDataPoolJobCreateAddColumnToDataPoolJobAddColumnToDataPoolJobResponse {
	return v.CreateAddColumnToDataPoolJob
}

// CreateAverageMetricCreateAverageMetricMetricResponse includes the requested fields of the GraphQL type MetricResponse.
// The GraphQL type's documentation follows.
//
// The result of a mutation which creates or modifies a Metric.
type CreateAverageMetricCreateAverageMetricMetricResponse struct {
	Typename *string `json:"__typename"`
	// The Metric which was created or modified.
	Metric *CreateAverageMetricCreateAverageMetricMetricResponseMetric `json:"metric"`
}

// GetTypename returns CreateAverageMetricCreateAverageMetricMetricResponse.Typename, and is useful for accessing the field via an interface.
func (v *CreateAverageMetricCreateAverageMetricMetricResponse) GetTypename() *string {
	return v.Typename
}

// GetMetric returns CreateAverageMetricCreateAverageMetricMetricResponse.Metric, and is useful for accessing the field via an interface.
func (v *CreateAverageMetricCreateAverageMetricMetricResponse) GetMetric() *CreateAverageMetricCreateAverageMetricMetricResponseMetric {
	return v.Metric
}

// CreateAverageMetricCreateAverageMetricMetricResponseMetric includes the requested fields of the GraphQL type Metric.
// The GraphQL type's documentation follows.
//
// The Metric object.
//
// A Metric is a business indicator measured over time.
//
// [Learn more about Metrics](/docs/key-concepts#metric).
type CreateAverageMetricCreateAverageMetricMetricResponseMetric struct {
	MetricData `json:"-"`
}

// GetId returns CreateAverageMetricCreateAverageMetricMetricResponseMetric.Id, and is useful for accessing the field via an interface.
func (v *CreateAverageMetricCreateAverageMetricMetricResponseMetric) GetId() string {
	return v.MetricData.Id
}

// GetType returns CreateAverageMetricCreateAverageMetricMetricResponseMetric.Type, and is useful for accessing the field via an interface.
func (v *CreateAverageMetricCreateAverageMetricMetricResponseMetric) GetType() MetricType {
	return v.MetricData.Type
}

// GetAccessControlEnabled returns CreateAverageMetricCreateAverageMetricMetricResponseMetric.AccessControlEnabled, and is useful for accessing the field via an interface.
func (v *CreateAverageMetricCreateAverageMetricMetricResponseMetric) GetAccessControlEnabled() bool {
	return v.MetricData.AccessControlEnabled
}

// GetDataPool returns CreateAverageMetricCreateAverageMetricMetricResponseMetric.DataPool, and is useful for accessing the field via an interface.
func (v *CreateAverageMetricCreateAverageMetricMetricResponseMetric) GetDataPool() *MetricDataDataPool {
	return v.MetricData.DataPool
}

// GetDimensions returns CreateAverageMetricCreateAverageMetricMetricResponseMetric.Dimensions, and is useful for accessing the field via an interface.
func (v *CreateAverageMetricCreateAverageMetricMetricResponseMetric) GetDimensions() []*MetricDataDimensionsDimension {
	return v.MetricData.Dimensions
}

// GetTimestamp returns CreateAverageMetricCreateAverageMetricMetricResponseMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *CreateAverageMetricCreateAverageMetricMetricResponseMetric) GetTimestamp() *MetricDataTimestampDimension {
	return v.MetricData.Timestamp
}

// GetMeasure returns CreateAverageMetricCreateAverageMetricMetricResponseMetric.Measure, and is useful for accessing the field via an interface.
func (v *CreateAverageMetricCreateAverageMetricMetricResponseMetric) GetMeasure() *MetricDataMeasureDimension {
	return v.MetricData.Measure
}

// GetSettings returns CreateAverageMetricCreateAverageMetricMetricResponseMetric.Settings, and is useful for accessing the field via an interface.
func (v *CreateAverageMetricCreateAverageMetricMetricResponseMetric) GetSettings() MetricDataSettingsMetricSettings {
	return v.MetricData.Settings
}

// GetUniqueName returns CreateAverageMetricCreateAverageMetricMetricResponseMetric.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateAverageMetricCreateAverageMetricMetricResponseMetric) GetUniqueName() string {
	return v.MetricData.CommonDataMetric.UniqueName
}

// GetDescription returns CreateAverageMetricCreateAverageMetricMetricResponseMetric.Description, and is useful for accessing the field via an interface.
func (v *CreateAverageMetricCreateAverageMetricMetricResponseMetric) GetDescription() string {
	return v.MetricData.CommonDataMetric.Description
}

// GetAccount returns CreateAverageMetricCreateAverageMetricMetricResponseMetric.Account, and is useful for accessing the field via an interface.
func (v *CreateAverageMetricCreateAverageMetricMetricResponseMetric) GetAccount() *CommonDataAccount {
	return v.MetricData.CommonDataMetric.Account
}

// GetEnvironment returns CreateAverageMetricCreateAverageMetricMetricResponseMetric.Environment, and is useful for accessing the field via an interface.
func (v *CreateAverageMetricCreateAverageMetricMetricResponseMetric) GetEnvironment() *CommonDataEnvironment {
	return v.MetricData.CommonDataMetric.Environment
}

// GetCreatedAt returns CreateAverageMetricCreateAverageMetricMetricResponseMetric.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateAverageMetricCreateAverageMetricMetricResponseMetric) GetCreatedAt() time.Time {
	return v.MetricData.CommonDataMetric.CreatedAt
}

// GetModifiedAt returns CreateAverageMetricCreateAverageMetricMetricResponseMetric.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CreateAverageMetricCreateAverageMetricMetricResponseMetric) GetModifiedAt() time.Time {
	return v.MetricData.CommonDataMetric.ModifiedAt
}

// GetCreatedBy returns CreateAverageMetricCreateAverageMetricMetricResponseMetric.CreatedBy, and is useful for accessing the field via an interface.
func (v *CreateAverageMetricCreateAverageMetricMetricResponseMetric) GetCreatedBy() string {
	return v.MetricData.CommonDataMetric.CreatedBy
}

// GetModifiedBy returns CreateAverageMetricCreateAverageMetricMetricResponseMetric.ModifiedBy, and is useful for accessing the field via an interface.
func (v *CreateAverageMetricCreateAverageMetricMetricResponseMetric) GetModifiedBy() string {
	return v.MetricData.CommonDataMetric.ModifiedBy
}

func (v *CreateAverageMetricCreateAverageMetricMetricResponseMetric) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateAverageMetricCreateAverageMetricMetricResponseMetric
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateAverageMetricCreateAverageMetricMetricResponseMetric = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MetricData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateAverageMetricCreateAverageMetricMetricResponseMetric struct {
	Id string `json:"id"`

	Type MetricType `json:"type"`

	AccessControlEnabled bool `json:"accessControlEnabled"`

	DataPool *MetricDataDataPool `json:"dataPool"`

	Dimensions []*MetricDataDimensionsDimension `json:"dimensions"`

	Timestamp *MetricDataTimestampDimension `json:"timestamp"`

	Measure *MetricDataMeasureDimension `json:"measure"`

	Settings json.RawMessage `json:"settings"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *CreateAverageMetricCreateAverageMetricMetricResponseMetric) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateAverageMetricCreateAverageMetricMetricResponseMetric) __premarshalJSON() (*__premarshalCreateAverageMetricCreateAverageMetricMetricResponseMetric, error) {
	var retval __premarshalCreateAverageMetricCreateAverageMetricMetricResponseMetric

	retval.Id = v.MetricData.Id
	retval.Type = v.MetricData.Type
	retval.AccessControlEnabled = v.MetricData.AccessControlEnabled
	retval.DataPool = v.MetricData.DataPool
	retval.Dimensions = v.MetricData.Dimensions
	retval.Timestamp = v.MetricData.Timestamp
	retval.Measure = v.MetricData.Measure
	{

		dst := &retval.Settings
		src := v.MetricData.Settings
		var err error
		*dst, err = __marshalMetricDataSettingsMetricSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CreateAverageMetricCreateAverageMetricMetricResponseMetric.MetricData.Settings: %w", err)
		}
	}
	retval.UniqueName = v.MetricData.CommonDataMetric.UniqueName
	retval.Description = v.MetricData.CommonDataMetric.Description
	retval.Account = v.MetricData.CommonDataMetric.Account
	retval.Environment = v.MetricData.CommonDataMetric.Environment
	retval.CreatedAt = v.MetricData.CommonDataMetric.CreatedAt
	retval.ModifiedAt = v.MetricData.CommonDataMetric.ModifiedAt
	retval.CreatedBy = v.MetricData.CommonDataMetric.CreatedBy
	retval.ModifiedBy = v.MetricData.CommonDataMetric.ModifiedBy
	return &retval, nil
}

// The fields for creating a new Average Metric.
type CreateAverageMetricInput struct {
	// The Data Pool that powers this Metric.
	DataPool string `json:"dataPool"`
	// The Metric's unique name.
	UniqueName *string `json:"uniqueName"`
	// The Metric's description.
	Description *string `json:"description"`
	// The Metric's Filters. Metric Filters allow defining a Metric with a subset of records from the given Data Pool. If no Filters are present, all records will be included.
	Filters []*FilterInput `json:"filters,omitempty"`
	// The Metric's Filters, in the form of SQL. Metric Filters allow defining a Metric with a subset of records from the given Data Pool. If no Filters are present, all records will be included.
	FilterSql *string `json:"filterSql"`
	// The Metric's Dimensions. Dimensions define the columns that will be available to filter the Metric at query time.
	Dimensions []*DimensionInput `json:"dimensions,omitempty"`
	// The column to be averaged.
	Measure *DimensionInput `json:"measure,omitempty"`
}

// GetDataPool returns CreateAverageMetricInput.DataPool, and is useful for accessing the field via an interface.
func (v *CreateAverageMetricInput) GetDataPool() string { return v.DataPool }

// GetUniqueName returns CreateAverageMetricInput.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateAverageMetricInput) GetUniqueName() *string { return v.UniqueName }

// GetDescription returns CreateAverageMetricInput.Description, and is useful for accessing the field via an interface.
func (v *CreateAverageMetricInput) GetDescription() *string { return v.Description }

// GetFilters returns CreateAverageMetricInput.Filters, and is useful for accessing the field via an interface.
func (v *CreateAverageMetricInput) GetFilters() []*FilterInput { return v.Filters }

// GetFilterSql returns CreateAverageMetricInput.FilterSql, and is useful for accessing the field via an interface.
func (v *CreateAverageMetricInput) GetFilterSql() *string { return v.FilterSql }

// GetDimensions returns CreateAverageMetricInput.Dimensions, and is useful for accessing the field via an interface.
func (v *CreateAverageMetricInput) GetDimensions() []*DimensionInput { return v.Dimensions }

// GetMeasure returns CreateAverageMetricInput.Measure, and is useful for accessing the field via an interface.
func (v *CreateAverageMetricInput) GetMeasure() *DimensionInput { return v.Measure }

// CreateAverageMetricResponse is returned by CreateAverageMetric on success.
type CreateAverageMetricResponse struct {
	// Creates a new Average Metric from the given Data Pool and returns the newly created Metric (or an error message if creating the Metric fails).
	//
	// [Learn more about Metrics](https://www.propeldata.com/docs/metrics).
	CreateAverageMetric *CreateAverageMetricCreateAverageMetricMetricResponse `json:"createAverageMetric"`
}

// GetCreateAverageMetric returns CreateAverageMetricResponse.CreateAverageMetric, and is useful for accessing the field via an interface.
func (v *CreateAverageMetricResponse) GetCreateAverageMetric() *CreateAverageMetricCreateAverageMetricMetricResponse {
	return v.CreateAverageMetric
}

// CreateCountDistinctMetricCreateCountDistinctMetricMetricResponse includes the requested fields of the GraphQL type MetricResponse.
// The GraphQL type's documentation follows.
//
// The result of a mutation which creates or modifies a Metric.
type CreateCountDistinctMetricCreateCountDistinctMetricMetricResponse struct {
	Typename *string `json:"__typename"`
	// The Metric which was created or modified.
	Metric *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric `json:"metric"`
}

// GetTypename returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponse.Typename, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponse) GetTypename() *string {
	return v.Typename
}

// GetMetric returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponse.Metric, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponse) GetMetric() *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric {
	return v.Metric
}

// CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric includes the requested fields of the GraphQL type Metric.
// The GraphQL type's documentation follows.
//
// The Metric object.
//
// A Metric is a business indicator measured over time.
//
// [Learn more about Metrics](/docs/key-concepts#metric).
type CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric struct {
	MetricData `json:"-"`
}

// GetId returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.Id, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetId() string {
	return v.MetricData.Id
}

// GetType returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.Type, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetType() MetricType {
	return v.MetricData.Type
}

// GetAccessControlEnabled returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.AccessControlEnabled, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetAccessControlEnabled() bool {
	return v.MetricData.AccessControlEnabled
}

// GetDataPool returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.DataPool, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetDataPool() *MetricDataDataPool {
	return v.MetricData.DataPool
}

// GetDimensions returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.Dimensions, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetDimensions() []*MetricDataDimensionsDimension {
	return v.MetricData.Dimensions
}

// GetTimestamp returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetTimestamp() *MetricDataTimestampDimension {
	return v.MetricData.Timestamp
}

// GetMeasure returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.Measure, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetMeasure() *MetricDataMeasureDimension {
	return v.MetricData.Measure
}

// GetSettings returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.Settings, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetSettings() MetricDataSettingsMetricSettings {
	return v.MetricData.Settings
}

// GetUniqueName returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetUniqueName() string {
	return v.MetricData.CommonDataMetric.UniqueName
}

// GetDescription returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.Description, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetDescription() string {
	return v.MetricData.CommonDataMetric.Description
}

// GetAccount returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.Account, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetAccount() *CommonDataAccount {
	return v.MetricData.CommonDataMetric.Account
}

// GetEnvironment returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.Environment, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetEnvironment() *CommonDataEnvironment {
	return v.MetricData.CommonDataMetric.Environment
}

// GetCreatedAt returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetCreatedAt() time.Time {
	return v.MetricData.CommonDataMetric.CreatedAt
}

// GetModifiedAt returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetModifiedAt() time.Time {
	return v.MetricData.CommonDataMetric.ModifiedAt
}

// GetCreatedBy returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.CreatedBy, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetCreatedBy() string {
	return v.MetricData.CommonDataMetric.CreatedBy
}

// GetModifiedBy returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.ModifiedBy, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetModifiedBy() string {
	return v.MetricData.CommonDataMetric.ModifiedBy
}

func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MetricData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric struct {
	Id string `json:"id"`

	Type MetricType `json:"type"`

	AccessControlEnabled bool `json:"accessControlEnabled"`

	DataPool *MetricDataDataPool `json:"dataPool"`

	Dimensions []*MetricDataDimensionsDimension `json:"dimensions"`

	Timestamp *MetricDataTimestampDimension `json:"timestamp"`

	Measure *MetricDataMeasureDimension `json:"measure"`

	Settings json.RawMessage `json:"settings"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) __premarshalJSON() (*__premarshalCreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric, error) {
	var retval __premarshalCreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric

	retval.Id = v.MetricData.Id
	retval.Type = v.MetricData.Type
	retval.AccessControlEnabled = v.MetricData.AccessControlEnabled
	retval.DataPool = v.MetricData.DataPool
	retval.Dimensions = v.MetricData.Dimensions
	retval.Timestamp = v.MetricData.Timestamp
	retval.Measure = v.MetricData.Measure
	{

		dst := &retval.Settings
		src := v.MetricData.Settings
		var err error
		*dst, err = __marshalMetricDataSettingsMetricSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.MetricData.Settings: %w", err)
		}
	}
	retval.UniqueName = v.MetricData.CommonDataMetric.UniqueName
	retval.Description = v.MetricData.CommonDataMetric.Description
	retval.Account = v.MetricData.CommonDataMetric.Account
	retval.Environment = v.MetricData.CommonDataMetric.Environment
	retval.CreatedAt = v.MetricData.CommonDataMetric.CreatedAt
	retval.ModifiedAt = v.MetricData.CommonDataMetric.ModifiedAt
	retval.CreatedBy = v.MetricData.CommonDataMetric.CreatedBy
	retval.ModifiedBy = v.MetricData.CommonDataMetric.ModifiedBy
	return &retval, nil
}

// The fields for creating a new Count Distinct Metric.
type CreateCountDistinctMetricInput struct {
	// The Data Pool that powers this Metric.
	DataPool string `json:"dataPool"`
	// The Metric's unique name. If not specified, Propel will set the ID as unique name.
	UniqueName *string `json:"uniqueName"`
	// The Metric's description.
	Description *string `json:"description"`
	// The Metric's Filters. Metric Filters allow defining a Metric with a subset of records from the given Data Pool. If no Filters are present, all records will be included.
	Filters []*FilterInput `json:"filters,omitempty"`
	// The Metric's Filters, in the form of SQL. Metric Filters allow defining a Metric with a subset of records from the given Data Pool. If no Filters are present, all records will be included.
	FilterSql *string `json:"filterSql"`
	// The Metric's Dimensions. Dimensions define the columns that will be available to filter the Metric at query time.
	Dimensions []*DimensionInput `json:"dimensions,omitempty"`
	// The Dimension over which the count distinct operation is going to be performed.
	Dimension *DimensionInput `json:"dimension,omitempty"`
}

// GetDataPool returns CreateCountDistinctMetricInput.DataPool, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricInput) GetDataPool() string { return v.DataPool }

// GetUniqueName returns CreateCountDistinctMetricInput.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricInput) GetUniqueName() *string { return v.UniqueName }

// GetDescription returns CreateCountDistinctMetricInput.Description, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricInput) GetDescription() *string { return v.Description }

// GetFilters returns CreateCountDistinctMetricInput.Filters, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricInput) GetFilters() []*FilterInput { return v.Filters }

// GetFilterSql returns CreateCountDistinctMetricInput.FilterSql, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricInput) GetFilterSql() *string { return v.FilterSql }

// GetDimensions returns CreateCountDistinctMetricInput.Dimensions, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricInput) GetDimensions() []*DimensionInput { return v.Dimensions }

// GetDimension returns CreateCountDistinctMetricInput.Dimension, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricInput) GetDimension() *DimensionInput { return v.Dimension }

// CreateCountDistinctMetricResponse is returned by CreateCountDistinctMetric on success.
type CreateCountDistinctMetricResponse struct {
	// Creates a new Count Distinct Metric from the given Data Pool and returns the newly created Metric (or an error message if creating the Metric fails).
	//
	// [Learn more about Metrics](https://www.propeldata.com/docs/metrics).
	CreateCountDistinctMetric *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponse `json:"createCountDistinctMetric"`
}

// GetCreateCountDistinctMetric returns CreateCountDistinctMetricResponse.CreateCountDistinctMetric, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricResponse) GetCreateCountDistinctMetric() *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponse {
	return v.CreateCountDistinctMetric
}

// CreateCountMetricCreateCountMetricMetricResponse includes the requested fields of the GraphQL type MetricResponse.
// The GraphQL type's documentation follows.
//
// The result of a mutation which creates or modifies a Metric.
type CreateCountMetricCreateCountMetricMetricResponse struct {
	Typename *string `json:"__typename"`
	// The Metric which was created or modified.
	Metric *CreateCountMetricCreateCountMetricMetricResponseMetric `json:"metric"`
}

// GetTypename returns CreateCountMetricCreateCountMetricMetricResponse.Typename, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponse) GetTypename() *string { return v.Typename }

// GetMetric returns CreateCountMetricCreateCountMetricMetricResponse.Metric, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponse) GetMetric() *CreateCountMetricCreateCountMetricMetricResponseMetric {
	return v.Metric
}

// CreateCountMetricCreateCountMetricMetricResponseMetric includes the requested fields of the GraphQL type Metric.
// The GraphQL type's documentation follows.
//
// The Metric object.
//
// A Metric is a business indicator measured over time.
//
// [Learn more about Metrics](/docs/key-concepts#metric).
type CreateCountMetricCreateCountMetricMetricResponseMetric struct {
	MetricData `json:"-"`
}

// GetId returns CreateCountMetricCreateCountMetricMetricResponseMetric.Id, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetId() string {
	return v.MetricData.Id
}

// GetType returns CreateCountMetricCreateCountMetricMetricResponseMetric.Type, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetType() MetricType {
	return v.MetricData.Type
}

// GetAccessControlEnabled returns CreateCountMetricCreateCountMetricMetricResponseMetric.AccessControlEnabled, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetAccessControlEnabled() bool {
	return v.MetricData.AccessControlEnabled
}

// GetDataPool returns CreateCountMetricCreateCountMetricMetricResponseMetric.DataPool, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetDataPool() *MetricDataDataPool {
	return v.MetricData.DataPool
}

// GetDimensions returns CreateCountMetricCreateCountMetricMetricResponseMetric.Dimensions, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetDimensions() []*MetricDataDimensionsDimension {
	return v.MetricData.Dimensions
}

// GetTimestamp returns CreateCountMetricCreateCountMetricMetricResponseMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetTimestamp() *MetricDataTimestampDimension {
	return v.MetricData.Timestamp
}

// GetMeasure returns CreateCountMetricCreateCountMetricMetricResponseMetric.Measure, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetMeasure() *MetricDataMeasureDimension {
	return v.MetricData.Measure
}

// GetSettings returns CreateCountMetricCreateCountMetricMetricResponseMetric.Settings, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetSettings() MetricDataSettingsMetricSettings {
	return v.MetricData.Settings
}

// GetUniqueName returns CreateCountMetricCreateCountMetricMetricResponseMetric.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetUniqueName() string {
	return v.MetricData.CommonDataMetric.UniqueName
}

// GetDescription returns CreateCountMetricCreateCountMetricMetricResponseMetric.Description, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetDescription() string {
	return v.MetricData.CommonDataMetric.Description
}

// GetAccount returns CreateCountMetricCreateCountMetricMetricResponseMetric.Account, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetAccount() *CommonDataAccount {
	return v.MetricData.CommonDataMetric.Account
}

// GetEnvironment returns CreateCountMetricCreateCountMetricMetricResponseMetric.Environment, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetEnvironment() *CommonDataEnvironment {
	return v.MetricData.CommonDataMetric.Environment
}

// GetCreatedAt returns CreateCountMetricCreateCountMetricMetricResponseMetric.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetCreatedAt() time.Time {
	return v.MetricData.CommonDataMetric.CreatedAt
}

// GetModifiedAt returns CreateCountMetricCreateCountMetricMetricResponseMetric.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetModifiedAt() time.Time {
	return v.MetricData.CommonDataMetric.ModifiedAt
}

// GetCreatedBy returns CreateCountMetricCreateCountMetricMetricResponseMetric.CreatedBy, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetCreatedBy() string {
	return v.MetricData.CommonDataMetric.CreatedBy
}

// GetModifiedBy returns CreateCountMetricCreateCountMetricMetricResponseMetric.ModifiedBy, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetModifiedBy() string {
	return v.MetricData.CommonDataMetric.ModifiedBy
}

func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateCountMetricCreateCountMetricMetricResponseMetric
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateCountMetricCreateCountMetricMetricResponseMetric = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MetricData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateCountMetricCreateCountMetricMetricResponseMetric struct {
	Id string `json:"id"`

	Type MetricType `json:"type"`

	AccessControlEnabled bool `json:"accessControlEnabled"`

	DataPool *MetricDataDataPool `json:"dataPool"`

	Dimensions []*MetricDataDimensionsDimension `json:"dimensions"`

	Timestamp *MetricDataTimestampDimension `json:"timestamp"`

	Measure *MetricDataMeasureDimension `json:"measure"`

	Settings json.RawMessage `json:"settings"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) __premarshalJSON() (*__premarshalCreateCountMetricCreateCountMetricMetricResponseMetric, error) {
	var retval __premarshalCreateCountMetricCreateCountMetricMetricResponseMetric

	retval.Id = v.MetricData.Id
	retval.Type = v.MetricData.Type
	retval.AccessControlEnabled = v.MetricData.AccessControlEnabled
	retval.DataPool = v.MetricData.DataPool
	retval.Dimensions = v.MetricData.Dimensions
	retval.Timestamp = v.MetricData.Timestamp
	retval.Measure = v.MetricData.Measure
	{

		dst := &retval.Settings
		src := v.MetricData.Settings
		var err error
		*dst, err = __marshalMetricDataSettingsMetricSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CreateCountMetricCreateCountMetricMetricResponseMetric.MetricData.Settings: %w", err)
		}
	}
	retval.UniqueName = v.MetricData.CommonDataMetric.UniqueName
	retval.Description = v.MetricData.CommonDataMetric.Description
	retval.Account = v.MetricData.CommonDataMetric.Account
	retval.Environment = v.MetricData.CommonDataMetric.Environment
	retval.CreatedAt = v.MetricData.CommonDataMetric.CreatedAt
	retval.ModifiedAt = v.MetricData.CommonDataMetric.ModifiedAt
	retval.CreatedBy = v.MetricData.CommonDataMetric.CreatedBy
	retval.ModifiedBy = v.MetricData.CommonDataMetric.ModifiedBy
	return &retval, nil
}

// The fields for creating a new Count Metric.
type CreateCountMetricInput struct {
	// The Data Pool that powers this Metric.
	DataPool string `json:"dataPool"`
	// The Metric's unique name. If not specified, Propel will set the ID as unique name.
	UniqueName *string `json:"uniqueName"`
	// The Metric's description.
	Description *string `json:"description"`
	// The Metric's Filters. Metric Filters allow defining a Metric with a subset of records from the given Data Pool. If no Filters are present, all records will be included.
	Filters []*FilterInput `json:"filters,omitempty"`
	// The Metric's Filters, in the form of SQL. Metric Filters allow defining a Metric with a subset of records from the given Data Pool. If no Filters are present, all records will be included.
	FilterSql *string `json:"filterSql"`
	// The Metric's Dimensions. Dimensions define the columns that will be available to filter the Metric at query time.
	Dimensions []*DimensionInput `json:"dimensions,omitempty"`
}

// GetDataPool returns CreateCountMetricInput.DataPool, and is useful for accessing the field via an interface.
func (v *CreateCountMetricInput) GetDataPool() string { return v.DataPool }

// GetUniqueName returns CreateCountMetricInput.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateCountMetricInput) GetUniqueName() *string { return v.UniqueName }

// GetDescription returns CreateCountMetricInput.Description, and is useful for accessing the field via an interface.
func (v *CreateCountMetricInput) GetDescription() *string { return v.Description }

// GetFilters returns CreateCountMetricInput.Filters, and is useful for accessing the field via an interface.
func (v *CreateCountMetricInput) GetFilters() []*FilterInput { return v.Filters }

// GetFilterSql returns CreateCountMetricInput.FilterSql, and is useful for accessing the field via an interface.
func (v *CreateCountMetricInput) GetFilterSql() *string { return v.FilterSql }

// GetDimensions returns CreateCountMetricInput.Dimensions, and is useful for accessing the field via an interface.
func (v *CreateCountMetricInput) GetDimensions() []*DimensionInput { return v.Dimensions }

// CreateCountMetricResponse is returned by CreateCountMetric on success.
type CreateCountMetricResponse struct {
	// Creates a new Count Metric from the given Data Pool and returns the newly created Metric (or an error message if creating the Metric fails).
	//
	// [Learn more about Metrics](https://www.propeldata.com/docs/metrics).
	CreateCountMetric *CreateCountMetricCreateCountMetricMetricResponse `json:"createCountMetric"`
}

// GetCreateCountMetric returns CreateCountMetricResponse.CreateCountMetric, and is useful for accessing the field via an interface.
func (v *CreateCountMetricResponse) GetCreateCountMetric() *CreateCountMetricCreateCountMetricMetricResponse {
	return v.CreateCountMetric
}

// CreateCustomMetricCreateCustomMetricMetricResponse includes the requested fields of the GraphQL type MetricResponse.
// The GraphQL type's documentation follows.
//
// The result of a mutation which creates or modifies a Metric.
type CreateCustomMetricCreateCustomMetricMetricResponse struct {
	Typename *string `json:"__typename"`
	// The Metric which was created or modified.
	Metric *CreateCustomMetricCreateCustomMetricMetricResponseMetric `json:"metric"`
}

// GetTypename returns CreateCustomMetricCreateCustomMetricMetricResponse.Typename, and is useful for accessing the field via an interface.
func (v *CreateCustomMetricCreateCustomMetricMetricResponse) GetTypename() *string { return v.Typename }

// GetMetric returns CreateCustomMetricCreateCustomMetricMetricResponse.Metric, and is useful for accessing the field via an interface.
func (v *CreateCustomMetricCreateCustomMetricMetricResponse) GetMetric() *CreateCustomMetricCreateCustomMetricMetricResponseMetric {
	return v.Metric
}

// CreateCustomMetricCreateCustomMetricMetricResponseMetric includes the requested fields of the GraphQL type Metric.
// The GraphQL type's documentation follows.
//
// The Metric object.
//
// A Metric is a business indicator measured over time.
//
// [Learn more about Metrics](/docs/key-concepts#metric).
type CreateCustomMetricCreateCustomMetricMetricResponseMetric struct {
	MetricData `json:"-"`
}

// GetId returns CreateCustomMetricCreateCustomMetricMetricResponseMetric.Id, and is useful for accessing the field via an interface.
func (v *CreateCustomMetricCreateCustomMetricMetricResponseMetric) GetId() string {
	return v.MetricData.Id
}

// GetType returns CreateCustomMetricCreateCustomMetricMetricResponseMetric.Type, and is useful for accessing the field via an interface.
func (v *CreateCustomMetricCreateCustomMetricMetricResponseMetric) GetType() MetricType {
	return v.MetricData.Type
}

// GetAccessControlEnabled returns CreateCustomMetricCreateCustomMetricMetricResponseMetric.AccessControlEnabled, and is useful for accessing the field via an interface.
func (v *CreateCustomMetricCreateCustomMetricMetricResponseMetric) GetAccessControlEnabled() bool {
	return v.MetricData.AccessControlEnabled
}

// GetDataPool returns CreateCustomMetricCreateCustomMetricMetricResponseMetric.DataPool, and is useful for accessing the field via an interface.
func (v *CreateCustomMetricCreateCustomMetricMetricResponseMetric) GetDataPool() *MetricDataDataPool {
	return v.MetricData.DataPool
}

// GetDimensions returns CreateCustomMetricCreateCustomMetricMetricResponseMetric.Dimensions, and is useful for accessing the field via an interface.
func (v *CreateCustomMetricCreateCustomMetricMetricResponseMetric) GetDimensions() []*MetricDataDimensionsDimension {
	return v.MetricData.Dimensions
}

// GetTimestamp returns CreateCustomMetricCreateCustomMetricMetricResponseMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *CreateCustomMetricCreateCustomMetricMetricResponseMetric) GetTimestamp() *MetricDataTimestampDimension {
	return v.MetricData.Timestamp
}

// GetMeasure returns CreateCustomMetricCreateCustomMetricMetricResponseMetric.Measure, and is useful for accessing the field via an interface.
func (v *CreateCustomMetricCreateCustomMetricMetricResponseMetric) GetMeasure() *MetricDataMeasureDimension {
	return v.MetricData.Measure
}

// GetSettings returns CreateCustomMetricCreateCustomMetricMetricResponseMetric.Settings, and is useful for accessing the field via an interface.
func (v *CreateCustomMetricCreateCustomMetricMetricResponseMetric) GetSettings() MetricDataSettingsMetricSettings {
	return v.MetricData.Settings
}

// GetUniqueName returns CreateCustomMetricCreateCustomMetricMetricResponseMetric.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateCustomMetricCreateCustomMetricMetricResponseMetric) GetUniqueName() string {
	return v.MetricData.CommonDataMetric.UniqueName
}

// GetDescription returns CreateCustomMetricCreateCustomMetricMetricResponseMetric.Description, and is useful for accessing the field via an interface.
func (v *CreateCustomMetricCreateCustomMetricMetricResponseMetric) GetDescription() string {
	return v.MetricData.CommonDataMetric.Description
}

// GetAccount returns CreateCustomMetricCreateCustomMetricMetricResponseMetric.Account, and is useful for accessing the field via an interface.
func (v *CreateCustomMetricCreateCustomMetricMetricResponseMetric) GetAccount() *CommonDataAccount {
	return v.MetricData.CommonDataMetric.Account
}

// GetEnvironment returns CreateCustomMetricCreateCustomMetricMetricResponseMetric.Environment, and is useful for accessing the field via an interface.
func (v *CreateCustomMetricCreateCustomMetricMetricResponseMetric) GetEnvironment() *CommonDataEnvironment {
	return v.MetricData.CommonDataMetric.Environment
}

// GetCreatedAt returns CreateCustomMetricCreateCustomMetricMetricResponseMetric.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateCustomMetricCreateCustomMetricMetricResponseMetric) GetCreatedAt() time.Time {
	return v.MetricData.CommonDataMetric.CreatedAt
}

// GetModifiedAt returns CreateCustomMetricCreateCustomMetricMetricResponseMetric.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CreateCustomMetricCreateCustomMetricMetricResponseMetric) GetModifiedAt() time.Time {
	return v.MetricData.CommonDataMetric.ModifiedAt
}

// GetCreatedBy returns CreateCustomMetricCreateCustomMetricMetricResponseMetric.CreatedBy, and is useful for accessing the field via an interface.
func (v *CreateCustomMetricCreateCustomMetricMetricResponseMetric) GetCreatedBy() string {
	return v.MetricData.CommonDataMetric.CreatedBy
}

// GetModifiedBy returns CreateCustomMetricCreateCustomMetricMetricResponseMetric.ModifiedBy, and is useful for accessing the field via an interface.
func (v *CreateCustomMetricCreateCustomMetricMetricResponseMetric) GetModifiedBy() string {
	return v.MetricData.CommonDataMetric.ModifiedBy
}

func (v *CreateCustomMetricCreateCustomMetricMetricResponseMetric) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateCustomMetricCreateCustomMetricMetricResponseMetric
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateCustomMetricCreateCustomMetricMetricResponseMetric = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MetricData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateCustomMetricCreateCustomMetricMetricResponseMetric struct {
	Id string `json:"id"`

	Type MetricType `json:"type"`

	AccessControlEnabled bool `json:"accessControlEnabled"`

	DataPool *MetricDataDataPool `json:"dataPool"`

	Dimensions []*MetricDataDimensionsDimension `json:"dimensions"`

	Timestamp *MetricDataTimestampDimension `json:"timestamp"`

	Measure *MetricDataMeasureDimension `json:"measure"`

	Settings json.RawMessage `json:"settings"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *CreateCustomMetricCreateCustomMetricMetricResponseMetric) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateCustomMetricCreateCustomMetricMetricResponseMetric) __premarshalJSON() (*__premarshalCreateCustomMetricCreateCustomMetricMetricResponseMetric, error) {
	var retval __premarshalCreateCustomMetricCreateCustomMetricMetricResponseMetric

	retval.Id = v.MetricData.Id
	retval.Type = v.MetricData.Type
	retval.AccessControlEnabled = v.MetricData.AccessControlEnabled
	retval.DataPool = v.MetricData.DataPool
	retval.Dimensions = v.MetricData.Dimensions
	retval.Timestamp = v.MetricData.Timestamp
	retval.Measure = v.MetricData.Measure
	{

		dst := &retval.Settings
		src := v.MetricData.Settings
		var err error
		*dst, err = __marshalMetricDataSettingsMetricSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CreateCustomMetricCreateCustomMetricMetricResponseMetric.MetricData.Settings: %w", err)
		}
	}
	retval.UniqueName = v.MetricData.CommonDataMetric.UniqueName
	retval.Description = v.MetricData.CommonDataMetric.Description
	retval.Account = v.MetricData.CommonDataMetric.Account
	retval.Environment = v.MetricData.CommonDataMetric.Environment
	retval.CreatedAt = v.MetricData.CommonDataMetric.CreatedAt
	retval.ModifiedAt = v.MetricData.CommonDataMetric.ModifiedAt
	retval.CreatedBy = v.MetricData.CommonDataMetric.CreatedBy
	retval.ModifiedBy = v.MetricData.CommonDataMetric.ModifiedBy
	return &retval, nil
}

// The fields for creating a new Custom Metric.
type CreateCustomMetricInput struct {
	// The Data Pool that powers this Metric.
	DataPool string `json:"dataPool"`
	// The Metric's unique name. If not specified, Propel will set the ID as unique name.
	UniqueName *string `json:"uniqueName"`
	// The Metric's description.
	Description *string `json:"description"`
	// The Metric's Filters. Metric Filters allow defining a Metric with a subset of records from the given Data Pool. If no Filters are present, all records will be included.
	Filters []*FilterInput `json:"filters,omitempty"`
	// The Metric's Filters, in the form of SQL. Metric Filters allow defining a Metric with a subset of records from the given Data Pool. If no Filters are present, all records will be included.
	FilterSql *string `json:"filterSql"`
	// The Metric's Dimensions. Dimensions define the columns that will be available to filter the Metric at query time.
	Dimensions []*DimensionInput `json:"dimensions,omitempty"`
	// The expression that defines the aggregation function for this Metric.
	Expression string `json:"expression"`
}

// GetDataPool returns CreateCustomMetricInput.DataPool, and is useful for accessing the field via an interface.
func (v *CreateCustomMetricInput) GetDataPool() string { return v.DataPool }

// GetUniqueName returns CreateCustomMetricInput.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateCustomMetricInput) GetUniqueName() *string { return v.UniqueName }

// GetDescription returns CreateCustomMetricInput.Description, and is useful for accessing the field via an interface.
func (v *CreateCustomMetricInput) GetDescription() *string { return v.Description }

// GetFilters returns CreateCustomMetricInput.Filters, and is useful for accessing the field via an interface.
func (v *CreateCustomMetricInput) GetFilters() []*FilterInput { return v.Filters }

// GetFilterSql returns CreateCustomMetricInput.FilterSql, and is useful for accessing the field via an interface.
func (v *CreateCustomMetricInput) GetFilterSql() *string { return v.FilterSql }

// GetDimensions returns CreateCustomMetricInput.Dimensions, and is useful for accessing the field via an interface.
func (v *CreateCustomMetricInput) GetDimensions() []*DimensionInput { return v.Dimensions }

// GetExpression returns CreateCustomMetricInput.Expression, and is useful for accessing the field via an interface.
func (v *CreateCustomMetricInput) GetExpression() string { return v.Expression }

// CreateCustomMetricResponse is returned by CreateCustomMetric on success.
type CreateCustomMetricResponse struct {
	// Creates a new Custom Metric from the given Data Pool and returns the newly created Metric (or an error message if creating the Metric fails).
	//
	// [Learn more about Metrics](https://www.propeldata.com/docs/metrics).
	CreateCustomMetric *CreateCustomMetricCreateCustomMetricMetricResponse `json:"createCustomMetric"`
}

// GetCreateCustomMetric returns CreateCustomMetricResponse.CreateCustomMetric, and is useful for accessing the field via an interface.
func (v *CreateCustomMetricResponse) GetCreateCustomMetric() *CreateCustomMetricCreateCustomMetricMetricResponse {
	return v.CreateCustomMetric
}

// CreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponse includes the requested fields of the GraphQL type DataPoolAccessPolicyResponse.
type CreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponse struct {
	// The Data Pool Access Policy.
	DataPoolAccessPolicy *CreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy `json:"dataPoolAccessPolicy"`
}

// GetDataPoolAccessPolicy returns CreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponse.DataPoolAccessPolicy, and is useful for accessing the field via an interface.
func (v *CreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponse) GetDataPoolAccessPolicy() *CreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy {
	return v.DataPoolAccessPolicy
}

// CreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy includes the requested fields of the GraphQL type DataPoolAccessPolicy.
type CreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy struct {
	DataPoolAccessPolicyData `json:"-"`
}

// GetId returns CreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy.Id, and is useful for accessing the field via an interface.
func (v *CreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy) GetId() string {
	return v.DataPoolAccessPolicyData.Id
}

// GetColumns returns CreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy.Columns, and is useful for accessing the field via an interface.
func (v *CreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy) GetColumns() []string {
	return v.DataPoolAccessPolicyData.Columns
}

// GetRows returns CreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy.Rows, and is useful for accessing the field via an interface.
func (v *CreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy) GetRows() []*DataPoolAccessPolicyDataRowsFilter {
	return v.DataPoolAccessPolicyData.Rows
}

// GetDataPool returns CreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy.DataPool, and is useful for accessing the field via an interface.
func (v *CreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy) GetDataPool() *DataPoolAccessPolicyDataDataPool {
	return v.DataPoolAccessPolicyData.DataPool
}

// GetUniqueName returns CreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy) GetUniqueName() string {
	return v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.UniqueName
}

// GetDescription returns CreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy.Description, and is useful for accessing the field via an interface.
func (v *CreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy) GetDescription() string {
	return v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.Description
}

// GetAccount returns CreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy.Account, and is useful for accessing the field via an interface.
func (v *CreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy) GetAccount() *CommonDataAccount {
	return v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.Account
}

// GetEnvironment returns CreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy.Environment, and is useful for accessing the field via an interface.
func (v *CreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy) GetEnvironment() *CommonDataEnvironment {
	return v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.Environment
}

// GetCreatedAt returns CreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy) GetCreatedAt() time.Time {
	return v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.CreatedAt
}

// GetModifiedAt returns CreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy) GetModifiedAt() time.Time {
	return v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.ModifiedAt
}

// GetCreatedBy returns CreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy.CreatedBy, and is useful for accessing the field via an interface.
func (v *CreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy) GetCreatedBy() string {
	return v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.CreatedBy
}

// GetModifiedBy returns CreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy.ModifiedBy, and is useful for accessing the field via an interface.
func (v *CreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy) GetModifiedBy() string {
	return v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.ModifiedBy
}

func (v *CreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataPoolAccessPolicyData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy struct {
	Id string `json:"id"`

	Columns []string `json:"columns"`

	Rows []*DataPoolAccessPolicyDataRowsFilter `json:"rows"`

	DataPool *DataPoolAccessPolicyDataDataPool `json:"dataPool"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *CreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy) __premarshalJSON() (*__premarshalCreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy, error) {
	var retval __premarshalCreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy

	retval.Id = v.DataPoolAccessPolicyData.Id
	retval.Columns = v.DataPoolAccessPolicyData.Columns
	retval.Rows = v.DataPoolAccessPolicyData.Rows
	retval.DataPool = v.DataPoolAccessPolicyData.DataPool
	retval.UniqueName = v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.UniqueName
	retval.Description = v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.Description
	retval.Account = v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.Account
	retval.Environment = v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.Environment
	retval.CreatedAt = v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.CreatedAt
	retval.ModifiedAt = v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.ModifiedAt
	retval.CreatedBy = v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.CreatedBy
	retval.ModifiedBy = v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.ModifiedBy
	return &retval, nil
}

type CreateDataPoolAccessPolicyInput struct {
	// The Data Pool Access Policy's unique name. If not specified, Propel will set the ID as unique name.
	UniqueName *string `json:"uniqueName"`
	// The Data Pool Access Policy's description.
	Description *string `json:"description"`
	// The Data Pool to which the Access Policy belongs.
	DataPool string `json:"dataPool"`
	// Columns that the Access Policy makes available for querying.
	//
	// If set to `["*"]`, all columns will be available for querying.
	Columns []string `json:"columns"`
	// Row-level filters that the Access Policy applies before executing queries.
	Rows []*FilterInput `json:"rows,omitempty"`
	// Row-level filters that the Access Policy applies before executing queries, in the form of SQL.
	FilterSql *string `json:"filterSql"`
}

// GetUniqueName returns CreateDataPoolAccessPolicyInput.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateDataPoolAccessPolicyInput) GetUniqueName() *string { return v.UniqueName }

// GetDescription returns CreateDataPoolAccessPolicyInput.Description, and is useful for accessing the field via an interface.
func (v *CreateDataPoolAccessPolicyInput) GetDescription() *string { return v.Description }

// GetDataPool returns CreateDataPoolAccessPolicyInput.DataPool, and is useful for accessing the field via an interface.
func (v *CreateDataPoolAccessPolicyInput) GetDataPool() string { return v.DataPool }

// GetColumns returns CreateDataPoolAccessPolicyInput.Columns, and is useful for accessing the field via an interface.
func (v *CreateDataPoolAccessPolicyInput) GetColumns() []string { return v.Columns }

// GetRows returns CreateDataPoolAccessPolicyInput.Rows, and is useful for accessing the field via an interface.
func (v *CreateDataPoolAccessPolicyInput) GetRows() []*FilterInput { return v.Rows }

// GetFilterSql returns CreateDataPoolAccessPolicyInput.FilterSql, and is useful for accessing the field via an interface.
func (v *CreateDataPoolAccessPolicyInput) GetFilterSql() *string { return v.FilterSql }

// CreateDataPoolAccessPolicyResponse is returned by CreateDataPoolAccessPolicy on success.
type CreateDataPoolAccessPolicyResponse struct {
	// Creates a Data Pool Access Policy for the specified Data Pool.
	//
	// [Learn more about Data Pool Access Policy](https://www.propeldata.com/docs/control-access).
	CreateDataPoolAccessPolicy *CreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponse `json:"createDataPoolAccessPolicy"`
}

// GetCreateDataPoolAccessPolicy returns CreateDataPoolAccessPolicyResponse.CreateDataPoolAccessPolicy, and is useful for accessing the field via an interface.
func (v *CreateDataPoolAccessPolicyResponse) GetCreateDataPoolAccessPolicy() *CreateDataPoolAccessPolicyCreateDataPoolAccessPolicyDataPoolAccessPolicyResponse {
	return v.CreateDataPoolAccessPolicy
}

// CreateDataPoolCreateDataPoolV2DataPoolResponse includes the requested fields of the GraphQL type DataPoolResponse.
// The GraphQL type's documentation follows.
//
// The result of a mutation which creates or modifies a Data Pool.
type CreateDataPoolCreateDataPoolV2DataPoolResponse struct {
	Typename *string `json:"__typename"`
	// The Data Pool which was created or modified.
	DataPool *CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool `json:"dataPool"`
}

// GetTypename returns CreateDataPoolCreateDataPoolV2DataPoolResponse.Typename, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolV2DataPoolResponse) GetTypename() *string { return v.Typename }

// GetDataPool returns CreateDataPoolCreateDataPoolV2DataPoolResponse.DataPool, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolV2DataPoolResponse) GetDataPool() *CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool {
	return v.DataPool
}

// CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool includes the requested fields of the GraphQL type DataPool.
// The GraphQL type's documentation follows.
//
// The Data Pool object. Data Pools are Propel's high-speed data store and cache
//
// [Learn more about Data Pools](https://www.propeldata.com/docs/connect-your-data#key-concept-2-data-pools).
type CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool struct {
	DataPoolData `json:"-"`
}

// GetId returns CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool.Id, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool) GetId() string {
	return v.DataPoolData.Id
}

// GetDataSource returns CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool.DataSource, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool) GetDataSource() *DataPoolDataDataSource {
	return v.DataPoolData.DataSource
}

// GetStatus returns CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool.Status, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool) GetStatus() DataPoolStatus {
	return v.DataPoolData.Status
}

// GetError returns CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool.Error, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool) GetError() *DataPoolDataError {
	return v.DataPoolData.Error
}

// GetTable returns CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool.Table, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool) GetTable() string {
	return v.DataPoolData.Table
}

// GetTenant returns CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool.Tenant, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool) GetTenant() *DataPoolDataTenant {
	return v.DataPoolData.Tenant
}

// GetTimestamp returns CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool.Timestamp, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool) GetTimestamp() *DataPoolDataTimestamp {
	return v.DataPoolData.Timestamp
}

// GetColumns returns CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool.Columns, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool) GetColumns() *DataPoolDataColumnsDataPoolColumnConnection {
	return v.DataPoolData.Columns
}

// GetUniqueId returns CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool.UniqueId, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool) GetUniqueId() *DataPoolDataUniqueId {
	return v.DataPoolData.UniqueId
}

// GetSyncing returns CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool.Syncing, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool) GetSyncing() *DataPoolDataSyncingDataPoolSyncing {
	return v.DataPoolData.Syncing
}

// GetAvailableMeasures returns CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool.AvailableMeasures, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool) GetAvailableMeasures() *DataPoolDataAvailableMeasuresDataPoolColumnConnection {
	return v.DataPoolData.AvailableMeasures
}

// GetSetupTasks returns CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool.SetupTasks, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool) GetSetupTasks() []*DataPoolDataSetupTasksDataPoolSetupTask {
	return v.DataPoolData.SetupTasks
}

// GetSyncs returns CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool.Syncs, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool) GetSyncs() *DataPoolDataSyncsSyncConnection {
	return v.DataPoolData.Syncs
}

// GetDataPoolAccessPolicies returns CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool.DataPoolAccessPolicies, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool) GetDataPoolAccessPolicies() *DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnection {
	return v.DataPoolData.DataPoolAccessPolicies
}

// GetAccessControlEnabled returns CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool.AccessControlEnabled, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool) GetAccessControlEnabled() bool {
	return v.DataPoolData.AccessControlEnabled
}

// GetUniqueName returns CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool) GetUniqueName() string {
	return v.DataPoolData.CommonDataDataPool.UniqueName
}

// GetDescription returns CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool.Description, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool) GetDescription() string {
	return v.DataPoolData.CommonDataDataPool.Description
}

// GetAccount returns CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool.Account, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool) GetAccount() *CommonDataAccount {
	return v.DataPoolData.CommonDataDataPool.Account
}

// GetEnvironment returns CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool.Environment, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool) GetEnvironment() *CommonDataEnvironment {
	return v.DataPoolData.CommonDataDataPool.Environment
}

// GetCreatedAt returns CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool) GetCreatedAt() time.Time {
	return v.DataPoolData.CommonDataDataPool.CreatedAt
}

// GetModifiedAt returns CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool) GetModifiedAt() time.Time {
	return v.DataPoolData.CommonDataDataPool.ModifiedAt
}

// GetCreatedBy returns CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool.CreatedBy, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool) GetCreatedBy() string {
	return v.DataPoolData.CommonDataDataPool.CreatedBy
}

// GetModifiedBy returns CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool.ModifiedBy, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool) GetModifiedBy() string {
	return v.DataPoolData.CommonDataDataPool.ModifiedBy
}

func (v *CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataPoolData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateDataPoolCreateDataPoolV2DataPoolResponseDataPool struct {
	Id string `json:"id"`

	DataSource *DataPoolDataDataSource `json:"dataSource"`

	Status DataPoolStatus `json:"status"`

	Error *DataPoolDataError `json:"error"`

	Table string `json:"table"`

	Tenant *DataPoolDataTenant `json:"tenant"`

	Timestamp *DataPoolDataTimestamp `json:"timestamp"`

	Columns *DataPoolDataColumnsDataPoolColumnConnection `json:"columns"`

	UniqueId *DataPoolDataUniqueId `json:"uniqueId"`

	Syncing *DataPoolDataSyncingDataPoolSyncing `json:"syncing"`

	AvailableMeasures *DataPoolDataAvailableMeasuresDataPoolColumnConnection `json:"availableMeasures"`

	SetupTasks []*DataPoolDataSetupTasksDataPoolSetupTask `json:"setupTasks"`

	Syncs *DataPoolDataSyncsSyncConnection `json:"syncs"`

	DataPoolAccessPolicies *DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnection `json:"dataPoolAccessPolicies"`

	AccessControlEnabled bool `json:"accessControlEnabled"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateDataPoolCreateDataPoolV2DataPoolResponseDataPool) __premarshalJSON() (*__premarshalCreateDataPoolCreateDataPoolV2DataPoolResponseDataPool, error) {
	var retval __premarshalCreateDataPoolCreateDataPoolV2DataPoolResponseDataPool

	retval.Id = v.DataPoolData.Id
	retval.DataSource = v.DataPoolData.DataSource
	retval.Status = v.DataPoolData.Status
	retval.Error = v.DataPoolData.Error
	retval.Table = v.DataPoolData.Table
	retval.Tenant = v.DataPoolData.Tenant
	retval.Timestamp = v.DataPoolData.Timestamp
	retval.Columns = v.DataPoolData.Columns
	retval.UniqueId = v.DataPoolData.UniqueId
	retval.Syncing = v.DataPoolData.Syncing
	retval.AvailableMeasures = v.DataPoolData.AvailableMeasures
	retval.SetupTasks = v.DataPoolData.SetupTasks
	retval.Syncs = v.DataPoolData.Syncs
	retval.DataPoolAccessPolicies = v.DataPoolData.DataPoolAccessPolicies
	retval.AccessControlEnabled = v.DataPoolData.AccessControlEnabled
	retval.UniqueName = v.DataPoolData.CommonDataDataPool.UniqueName
	retval.Description = v.DataPoolData.CommonDataDataPool.Description
	retval.Account = v.DataPoolData.CommonDataDataPool.Account
	retval.Environment = v.DataPoolData.CommonDataDataPool.Environment
	retval.CreatedAt = v.DataPoolData.CommonDataDataPool.CreatedAt
	retval.ModifiedAt = v.DataPoolData.CommonDataDataPool.ModifiedAt
	retval.CreatedBy = v.DataPoolData.CommonDataDataPool.CreatedBy
	retval.ModifiedBy = v.DataPoolData.CommonDataDataPool.ModifiedBy
	return &retval, nil
}

// The fields for creating a Data Pool.
type CreateDataPoolInputV2 struct {
	// The Data Source that will be used to create the Data Pool.
	DataSource *string `json:"dataSource"`
	// The table that the Data Pool will sync from.
	Table *string `json:"table"`
	// The table's primary timestamp column.
	//
	// Propel uses the primary timestamp to order and partition your data in Data Pools. It's part of what makes Propel
	// fast for larger data sets. It will also serve as the time dimension for your Metrics.
	//
	// If you do not provide a primary timestamp column, you will need to supply an alternate timestamp when querying your
	// Data Pool or its Metrics using the TimeRangeInput.
	Timestamp *TimestampInput `json:"timestamp,omitempty"`
	// The Data Pool's unique name. If not specified, Propel will set the ID as the unique name.
	UniqueName *string `json:"uniqueName"`
	// The Data Pool's description.
	Description *string `json:"description"`
	// The list of columns.
	Columns []*DataPoolColumnInput `json:"columns,omitempty"`
	// The Data Pool's optional tenant ID column. The tenant ID column is used to control access to your data with access policies.
	Tenant *TenantInput `json:"tenant,omitempty"`
	// The Data Pool's unique ID column. Propel uses the primary timestamp and a unique ID to compose a primary key for determining whether records should be inserted, deleted, or updated within the Data Pool.
	UniqueId *UniqueIdInput `json:"uniqueId,omitempty"`
	// The Data Pool's syncing settings.
	Syncing *DataPoolSyncingInput `json:"syncing,omitempty"`
	// Enables or disables access control for the Data Pool.
	//
	// If the Data Pool has access control enabled, Applications must be assigned Data Pool Access
	// Policies in order to query the Data Pool and its Metrics.
	AccessControlEnabled *bool `json:"accessControlEnabled"`
	// Override the Data Pool's table settings. These describe how the Data Pool's table is created in ClickHouse, and a
	// default will be chosen based on the Data Pool's `timestamp` and `uniqueId` values, if any. You can override these
	// defaults in order to specify a custom table engine, custom ORDER BY, etc.
	TableSettings *TableSettingsInput `json:"tableSettings,omitempty"`
}

// GetDataSource returns CreateDataPoolInputV2.DataSource, and is useful for accessing the field via an interface.
func (v *CreateDataPoolInputV2) GetDataSource() *string { return v.DataSource }

// GetTable returns CreateDataPoolInputV2.Table, and is useful for accessing the field via an interface.
func (v *CreateDataPoolInputV2) GetTable() *string { return v.Table }

// GetTimestamp returns CreateDataPoolInputV2.Timestamp, and is useful for accessing the field via an interface.
func (v *CreateDataPoolInputV2) GetTimestamp() *TimestampInput { return v.Timestamp }

// GetUniqueName returns CreateDataPoolInputV2.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateDataPoolInputV2) GetUniqueName() *string { return v.UniqueName }

// GetDescription returns CreateDataPoolInputV2.Description, and is useful for accessing the field via an interface.
func (v *CreateDataPoolInputV2) GetDescription() *string { return v.Description }

// GetColumns returns CreateDataPoolInputV2.Columns, and is useful for accessing the field via an interface.
func (v *CreateDataPoolInputV2) GetColumns() []*DataPoolColumnInput { return v.Columns }

// GetTenant returns CreateDataPoolInputV2.Tenant, and is useful for accessing the field via an interface.
func (v *CreateDataPoolInputV2) GetTenant() *TenantInput { return v.Tenant }

// GetUniqueId returns CreateDataPoolInputV2.UniqueId, and is useful for accessing the field via an interface.
func (v *CreateDataPoolInputV2) GetUniqueId() *UniqueIdInput { return v.UniqueId }

// GetSyncing returns CreateDataPoolInputV2.Syncing, and is useful for accessing the field via an interface.
func (v *CreateDataPoolInputV2) GetSyncing() *DataPoolSyncingInput { return v.Syncing }

// GetAccessControlEnabled returns CreateDataPoolInputV2.AccessControlEnabled, and is useful for accessing the field via an interface.
func (v *CreateDataPoolInputV2) GetAccessControlEnabled() *bool { return v.AccessControlEnabled }

// GetTableSettings returns CreateDataPoolInputV2.TableSettings, and is useful for accessing the field via an interface.
func (v *CreateDataPoolInputV2) GetTableSettings() *TableSettingsInput { return v.TableSettings }

// CreateDataPoolResponse is returned by CreateDataPool on success.
type CreateDataPoolResponse struct {
	// Creates a new Data Pool from the given Data Source based on the specified table and using a particular column as the timestamp.
	//
	// Returns the newly created Data Pool (or an error message if creating the Data Pool fails).
	//
	// [Learn more about Data Pools](https://www.propeldata.com/docs/connect-your-data#key-concept-2-data-pools).
	CreateDataPoolV2 *CreateDataPoolCreateDataPoolV2DataPoolResponse `json:"createDataPoolV2"`
}

// GetCreateDataPoolV2 returns CreateDataPoolResponse.CreateDataPoolV2, and is useful for accessing the field via an interface.
func (v *CreateDataPoolResponse) GetCreateDataPoolV2() *CreateDataPoolCreateDataPoolV2DataPoolResponse {
	return v.CreateDataPoolV2
}

// CreateHttpDataSourceCreateHttpDataSourceDataSourceResponse includes the requested fields of the GraphQL type DataSourceResponse.
// The GraphQL type's documentation follows.
//
// The result of a mutation which creates or modifies a Data Source.
type CreateHttpDataSourceCreateHttpDataSourceDataSourceResponse struct {
	// The Data Source which was created or modified.
	DataSource *CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource `json:"dataSource"`
}

// GetDataSource returns CreateHttpDataSourceCreateHttpDataSourceDataSourceResponse.DataSource, and is useful for accessing the field via an interface.
func (v *CreateHttpDataSourceCreateHttpDataSourceDataSourceResponse) GetDataSource() *CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource {
	return v.DataSource
}

// CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource includes the requested fields of the GraphQL type DataSource.
// The GraphQL type's documentation follows.
//
// The Data Source object.
//
// A Data Source is a connection to your data warehouse. It has the necessary connection details for Propel to access Snowflake or any other supported Data Source.
//
// [Learn more about Data Sources](https://www.propeldata.com/docs/data-sources).
type CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource struct {
	DataSourceData `json:"-"`
}

// GetId returns CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource.Id, and is useful for accessing the field via an interface.
func (v *CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource) GetId() string {
	return v.DataSourceData.Id
}

// GetType returns CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource.Type, and is useful for accessing the field via an interface.
func (v *CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource) GetType() DataSourceType {
	return v.DataSourceData.Type
}

// GetStatus returns CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource.Status, and is useful for accessing the field via an interface.
func (v *CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource) GetStatus() DataSourceStatus {
	return v.DataSourceData.Status
}

// GetError returns CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource.Error, and is useful for accessing the field via an interface.
func (v *CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource) GetError() *DataSourceDataError {
	return v.DataSourceData.Error
}

// GetDataPools returns CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource.DataPools, and is useful for accessing the field via an interface.
func (v *CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource) GetDataPools() *DataSourceDataDataPoolsDataPoolConnection {
	return v.DataSourceData.DataPools
}

// GetConnectionSettings returns CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource) GetConnectionSettings() DataSourceDataConnectionSettings {
	return v.DataSourceData.ConnectionSettings
}

// GetTables returns CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource.Tables, and is useful for accessing the field via an interface.
func (v *CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource) GetTables() *DataSourceDataTablesTableConnection {
	return v.DataSourceData.Tables
}

// GetChecks returns CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource.Checks, and is useful for accessing the field via an interface.
func (v *CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource) GetChecks() []*DataSourceDataChecksDataSourceCheck {
	return v.DataSourceData.Checks
}

// GetTableIntrospections returns CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource.TableIntrospections, and is useful for accessing the field via an interface.
func (v *CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource) GetTableIntrospections() *DataSourceDataTableIntrospectionsTableIntrospectionConnection {
	return v.DataSourceData.TableIntrospections
}

// GetUniqueName returns CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource) GetUniqueName() string {
	return v.DataSourceData.CommonDataDataSource.UniqueName
}

// GetDescription returns CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource.Description, and is useful for accessing the field via an interface.
func (v *CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource) GetDescription() string {
	return v.DataSourceData.CommonDataDataSource.Description
}

// GetAccount returns CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource.Account, and is useful for accessing the field via an interface.
func (v *CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource) GetAccount() *CommonDataAccount {
	return v.DataSourceData.CommonDataDataSource.Account
}

// GetEnvironment returns CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource.Environment, and is useful for accessing the field via an interface.
func (v *CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource) GetEnvironment() *CommonDataEnvironment {
	return v.DataSourceData.CommonDataDataSource.Environment
}

// GetCreatedAt returns CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource) GetCreatedAt() time.Time {
	return v.DataSourceData.CommonDataDataSource.CreatedAt
}

// GetModifiedAt returns CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource) GetModifiedAt() time.Time {
	return v.DataSourceData.CommonDataDataSource.ModifiedAt
}

// GetCreatedBy returns CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource.CreatedBy, and is useful for accessing the field via an interface.
func (v *CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource) GetCreatedBy() string {
	return v.DataSourceData.CommonDataDataSource.CreatedBy
}

// GetModifiedBy returns CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource.ModifiedBy, and is useful for accessing the field via an interface.
func (v *CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource) GetModifiedBy() string {
	return v.DataSourceData.CommonDataDataSource.ModifiedBy
}

func (v *CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataSourceData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource struct {
	Id string `json:"id"`

	Type DataSourceType `json:"type"`

	Status DataSourceStatus `json:"status"`

	Error *DataSourceDataError `json:"error"`

	DataPools *DataSourceDataDataPoolsDataPoolConnection `json:"dataPools"`

	ConnectionSettings json.RawMessage `json:"connectionSettings"`

	Tables *DataSourceDataTablesTableConnection `json:"tables"`

	Checks []*DataSourceDataChecksDataSourceCheck `json:"checks"`

	TableIntrospections *DataSourceDataTableIntrospectionsTableIntrospectionConnection `json:"tableIntrospections"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource) __premarshalJSON() (*__premarshalCreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource, error) {
	var retval __premarshalCreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource

	retval.Id = v.DataSourceData.Id
	retval.Type = v.DataSourceData.Type
	retval.Status = v.DataSourceData.Status
	retval.Error = v.DataSourceData.Error
	retval.DataPools = v.DataSourceData.DataPools
	{

		dst := &retval.ConnectionSettings
		src := v.DataSourceData.ConnectionSettings
		var err error
		*dst, err = __marshalDataSourceDataConnectionSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CreateHttpDataSourceCreateHttpDataSourceDataSourceResponseDataSource.DataSourceData.ConnectionSettings: %w", err)
		}
	}
	retval.Tables = v.DataSourceData.Tables
	retval.Checks = v.DataSourceData.Checks
	retval.TableIntrospections = v.DataSourceData.TableIntrospections
	retval.UniqueName = v.DataSourceData.CommonDataDataSource.UniqueName
	retval.Description = v.DataSourceData.CommonDataDataSource.Description
	retval.Account = v.DataSourceData.CommonDataDataSource.Account
	retval.Environment = v.DataSourceData.CommonDataDataSource.Environment
	retval.CreatedAt = v.DataSourceData.CommonDataDataSource.CreatedAt
	retval.ModifiedAt = v.DataSourceData.CommonDataDataSource.ModifiedAt
	retval.CreatedBy = v.DataSourceData.CommonDataDataSource.CreatedBy
	retval.ModifiedBy = v.DataSourceData.CommonDataDataSource.ModifiedBy
	return &retval, nil
}

type CreateHttpDataSourceInput struct {
	// The HTTP Data Source's connection settings
	ConnectionSettings *HttpConnectionSettingsInput `json:"connectionSettings,omitempty"`
	// The HTTP Data Source's description.
	Description *string `json:"description"`
	// The HTTP Data Source's unique name. If not specified, Propel will set the ID as unique name.
	UniqueName *string `json:"uniqueName"`
}

// GetConnectionSettings returns CreateHttpDataSourceInput.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *CreateHttpDataSourceInput) GetConnectionSettings() *HttpConnectionSettingsInput {
	return v.ConnectionSettings
}

// GetDescription returns CreateHttpDataSourceInput.Description, and is useful for accessing the field via an interface.
func (v *CreateHttpDataSourceInput) GetDescription() *string { return v.Description }

// GetUniqueName returns CreateHttpDataSourceInput.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateHttpDataSourceInput) GetUniqueName() *string { return v.UniqueName }

// CreateHttpDataSourceResponse is returned by CreateHttpDataSource on success.
type CreateHttpDataSourceResponse struct {
	// Creates a new HTTP Data Source from the given settings.
	//
	// Returns the newly created Data Source (or an error message if creating the Data Source fails).
	CreateHttpDataSource *CreateHttpDataSourceCreateHttpDataSourceDataSourceResponse `json:"createHttpDataSource"`
}

// GetCreateHttpDataSource returns CreateHttpDataSourceResponse.CreateHttpDataSource, and is useful for accessing the field via an interface.
func (v *CreateHttpDataSourceResponse) GetCreateHttpDataSource() *CreateHttpDataSourceCreateHttpDataSourceDataSourceResponse {
	return v.CreateHttpDataSource
}

// CreateMaterializedViewCreateMaterializedViewMaterializedViewResponse includes the requested fields of the GraphQL type MaterializedViewResponse.
// The GraphQL type's documentation follows.
//
// The result of a mutation which creates or modifies a Materialized View.
type CreateMaterializedViewCreateMaterializedViewMaterializedViewResponse struct {
	Typename *string `json:"__typename"`
	// The Materialized View which was created or modified.
	MaterializedView *CreateMaterializedViewCreateMaterializedViewMaterializedViewResponseMaterializedView `json:"materializedView"`
}

// GetTypename returns CreateMaterializedViewCreateMaterializedViewMaterializedViewResponse.Typename, and is useful for accessing the field via an interface.
func (v *CreateMaterializedViewCreateMaterializedViewMaterializedViewResponse) GetTypename() *string {
	return v.Typename
}

// GetMaterializedView returns CreateMaterializedViewCreateMaterializedViewMaterializedViewResponse.MaterializedView, and is useful for accessing the field via an interface.
func (v *CreateMaterializedViewCreateMaterializedViewMaterializedViewResponse) GetMaterializedView() *CreateMaterializedViewCreateMaterializedViewMaterializedViewResponseMaterializedView {
	return v.MaterializedView
}

// CreateMaterializedViewCreateMaterializedViewMaterializedViewResponseMaterializedView includes the requested fields of the GraphQL type MaterializedView.
type CreateMaterializedViewCreateMaterializedViewMaterializedViewResponseMaterializedView struct {
	MaterializedViewData `json:"-"`
}

// GetId returns CreateMaterializedViewCreateMaterializedViewMaterializedViewResponseMaterializedView.Id, and is useful for accessing the field via an interface.
func (v *CreateMaterializedViewCreateMaterializedViewMaterializedViewResponseMaterializedView) GetId() string {
	return v.MaterializedViewData.Id
}

// GetSql returns CreateMaterializedViewCreateMaterializedViewMaterializedViewResponseMaterializedView.Sql, and is useful for accessing the field via an interface.
func (v *CreateMaterializedViewCreateMaterializedViewMaterializedViewResponseMaterializedView) GetSql() string {
	return v.MaterializedViewData.Sql
}

// GetDestination returns CreateMaterializedViewCreateMaterializedViewMaterializedViewResponseMaterializedView.Destination, and is useful for accessing the field via an interface.
func (v *CreateMaterializedViewCreateMaterializedViewMaterializedViewResponseMaterializedView) GetDestination() *MaterializedViewDataDestinationDataPool {
	return v.MaterializedViewData.Destination
}

// GetSource returns CreateMaterializedViewCreateMaterializedViewMaterializedViewResponseMaterializedView.Source, and is useful for accessing the field via an interface.
func (v *CreateMaterializedViewCreateMaterializedViewMaterializedViewResponseMaterializedView) GetSource() *MaterializedViewDataSourceDataPool {
	return v.MaterializedViewData.Source
}

// GetOthers returns CreateMaterializedViewCreateMaterializedViewMaterializedViewResponseMaterializedView.Others, and is useful for accessing the field via an interface.
func (v *CreateMaterializedViewCreateMaterializedViewMaterializedViewResponseMaterializedView) GetOthers() []*MaterializedViewDataOthersDataPool {
	return v.MaterializedViewData.Others
}

// GetUniqueName returns CreateMaterializedViewCreateMaterializedViewMaterializedViewResponseMaterializedView.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateMaterializedViewCreateMaterializedViewMaterializedViewResponseMaterializedView) GetUniqueName() string {
	return v.MaterializedViewData.CommonDataMaterializedView.UniqueName
}

// GetDescription returns CreateMaterializedViewCreateMaterializedViewMaterializedViewResponseMaterializedView.Description, and is useful for accessing the field via an interface.
func (v *CreateMaterializedViewCreateMaterializedViewMaterializedViewResponseMaterializedView) GetDescription() string {
	return v.MaterializedViewData.CommonDataMaterializedView.Description
}

// GetAccount returns CreateMaterializedViewCreateMaterializedViewMaterializedViewResponseMaterializedView.Account, and is useful for accessing the field via an interface.
func (v *CreateMaterializedViewCreateMaterializedViewMaterializedViewResponseMaterializedView) GetAccount() *CommonDataAccount {
	return v.MaterializedViewData.CommonDataMaterializedView.Account
}

// GetEnvironment returns CreateMaterializedViewCreateMaterializedViewMaterializedViewResponseMaterializedView.Environment, and is useful for accessing the field via an interface.
func (v *CreateMaterializedViewCreateMaterializedViewMaterializedViewResponseMaterializedView) GetEnvironment() *CommonDataEnvironment {
	return v.MaterializedViewData.CommonDataMaterializedView.Environment
}

// GetCreatedAt returns CreateMaterializedViewCreateMaterializedViewMaterializedViewResponseMaterializedView.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateMaterializedViewCreateMaterializedViewMaterializedViewResponseMaterializedView) GetCreatedAt() time.Time {
	return v.MaterializedViewData.CommonDataMaterializedView.CreatedAt
}

// GetModifiedAt returns CreateMaterializedViewCreateMaterializedViewMaterializedViewResponseMaterializedView.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CreateMaterializedViewCreateMaterializedViewMaterializedViewResponseMaterializedView) GetModifiedAt() time.Time {
	return v.MaterializedViewData.CommonDataMaterializedView.ModifiedAt
}

// GetCreatedBy returns CreateMaterializedViewCreateMaterializedViewMaterializedViewResponseMaterializedView.CreatedBy, and is useful for accessing the field via an interface.
func (v *CreateMaterializedViewCreateMaterializedViewMaterializedViewResponseMaterializedView) GetCreatedBy() string {
	return v.MaterializedViewData.CommonDataMaterializedView.CreatedBy
}

// GetModifiedBy returns CreateMaterializedViewCreateMaterializedViewMaterializedViewResponseMaterializedView.ModifiedBy, and is useful for accessing the field via an interface.
func (v *CreateMaterializedViewCreateMaterializedViewMaterializedViewResponseMaterializedView) GetModifiedBy() string {
	return v.MaterializedViewData.CommonDataMaterializedView.ModifiedBy
}

func (v *CreateMaterializedViewCreateMaterializedViewMaterializedViewResponseMaterializedView) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateMaterializedViewCreateMaterializedViewMaterializedViewResponseMaterializedView
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateMaterializedViewCreateMaterializedViewMaterializedViewResponseMaterializedView = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MaterializedViewData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateMaterializedViewCreateMaterializedViewMaterializedViewResponseMaterializedView struct {
	Id string `json:"id"`

	Sql string `json:"sql"`

	Destination *MaterializedViewDataDestinationDataPool `json:"destination"`

	Source *MaterializedViewDataSourceDataPool `json:"source"`

	Others []*MaterializedViewDataOthersDataPool `json:"others"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *CreateMaterializedViewCreateMaterializedViewMaterializedViewResponseMaterializedView) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateMaterializedViewCreateMaterializedViewMaterializedViewResponseMaterializedView) __premarshalJSON() (*__premarshalCreateMaterializedViewCreateMaterializedViewMaterializedViewResponseMaterializedView, error) {
	var retval __premarshalCreateMaterializedViewCreateMaterializedViewMaterializedViewResponseMaterializedView

	retval.Id = v.MaterializedViewData.Id
	retval.Sql = v.MaterializedViewData.Sql
	retval.Destination = v.MaterializedViewData.Destination
	retval.Source = v.MaterializedViewData.Source
	retval.Others = v.MaterializedViewData.Others
	retval.UniqueName = v.MaterializedViewData.CommonDataMaterializedView.UniqueName
	retval.Description = v.MaterializedViewData.CommonDataMaterializedView.Description
	retval.Account = v.MaterializedViewData.CommonDataMaterializedView.Account
	retval.Environment = v.MaterializedViewData.CommonDataMaterializedView.Environment
	retval.CreatedAt = v.MaterializedViewData.CommonDataMaterializedView.CreatedAt
	retval.ModifiedAt = v.MaterializedViewData.CommonDataMaterializedView.ModifiedAt
	retval.CreatedBy = v.MaterializedViewData.CommonDataMaterializedView.CreatedBy
	retval.ModifiedBy = v.MaterializedViewData.CommonDataMaterializedView.ModifiedBy
	return &retval, nil
}

// The fields for targeting an existing Data Pool or a new Data Pool.
type CreateMaterializedViewDestinationInput struct {
	// If specified, the Materialized View will target an existing Data Pool.
	// Ensure the Data Pool's schema is compatible with your Materialized View's SQL statement.
	ExistingDataPool *DataPoolInput `json:"existingDataPool,omitempty"`
	// If specified, the Materialized View will create and target a new Data Pool.
	// You can further customize the new Data Pool's engine settings.
	NewDataPool *CreateMaterializedViewDestinationNewDataPoolInput `json:"newDataPool,omitempty"`
}

// GetExistingDataPool returns CreateMaterializedViewDestinationInput.ExistingDataPool, and is useful for accessing the field via an interface.
func (v *CreateMaterializedViewDestinationInput) GetExistingDataPool() *DataPoolInput {
	return v.ExistingDataPool
}

// GetNewDataPool returns CreateMaterializedViewDestinationInput.NewDataPool, and is useful for accessing the field via an interface.
func (v *CreateMaterializedViewDestinationInput) GetNewDataPool() *CreateMaterializedViewDestinationNewDataPoolInput {
	return v.NewDataPool
}

// The fields for customizing a new Data Pool that a Materialized View will target.
type CreateMaterializedViewDestinationNewDataPoolInput struct {
	// The Data Pool's unique name.
	UniqueName *string `json:"uniqueName"`
	// The Data Pool's description.
	Description *string `json:"description"`
	// Optionally specify the Data Pool's primary timestamp. This will influence the Data Pool's engine settings.
	Timestamp *TimestampInput `json:"timestamp,omitempty"`
	// Optionally specify the Data Pool's unique ID. This will influence the Data Pool's engine settings.
	UniqueId *UniqueIdInput `json:"uniqueId,omitempty"`
	// Enables or disables access control for the Data Pool.
	//
	// If the Data Pool has access control enabled, Applications must be assigned Data Pool Access
	// Policies in order to query the Data Pool and its Metrics.
	AccessControlEnabled *bool `json:"accessControlEnabled"`
	// Override the Data Pool's table settings. These describe how the Data Pool's table is created in ClickHouse, and a
	// default will be chosen based on the Data Pool's `timestamp` and `uniqueId` values, if any. You can override these
	// defaults in order to specify a custom table engine, custom ORDER BY, etc.
	TableSettings *TableSettingsInput `json:"tableSettings,omitempty"`
}

// GetUniqueName returns CreateMaterializedViewDestinationNewDataPoolInput.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateMaterializedViewDestinationNewDataPoolInput) GetUniqueName() *string {
	return v.UniqueName
}

// GetDescription returns CreateMaterializedViewDestinationNewDataPoolInput.Description, and is useful for accessing the field via an interface.
func (v *CreateMaterializedViewDestinationNewDataPoolInput) GetDescription() *string {
	return v.Description
}

// GetTimestamp returns CreateMaterializedViewDestinationNewDataPoolInput.Timestamp, and is useful for accessing the field via an interface.
func (v *CreateMaterializedViewDestinationNewDataPoolInput) GetTimestamp() *TimestampInput {
	return v.Timestamp
}

// GetUniqueId returns CreateMaterializedViewDestinationNewDataPoolInput.UniqueId, and is useful for accessing the field via an interface.
func (v *CreateMaterializedViewDestinationNewDataPoolInput) GetUniqueId() *UniqueIdInput {
	return v.UniqueId
}

// GetAccessControlEnabled returns CreateMaterializedViewDestinationNewDataPoolInput.AccessControlEnabled, and is useful for accessing the field via an interface.
func (v *CreateMaterializedViewDestinationNewDataPoolInput) GetAccessControlEnabled() *bool {
	return v.AccessControlEnabled
}

// GetTableSettings returns CreateMaterializedViewDestinationNewDataPoolInput.TableSettings, and is useful for accessing the field via an interface.
func (v *CreateMaterializedViewDestinationNewDataPoolInput) GetTableSettings() *TableSettingsInput {
	return v.TableSettings
}

// The fields for creating a Materialized View.
type CreateMaterializedViewInput struct {
	// The Materialized View's unique name. If not specified, Propel will set the ID as the unique name.
	UniqueName *string `json:"uniqueName"`
	// The Materialized View's description.
	Description *string `json:"description"`
	// The SQL that the Materialized View will execute.
	Sql string `json:"sql"`
	// By default, a destination Data Pool with default settings will be created for the Materialized View;
	// however, you can customize the destination Data Pool (or point to an existing Data Pool), by setting
	// this field. Use this to target an existing Data Pool or the engine settings of a new Data Pool.
	Destination *CreateMaterializedViewDestinationInput `json:"destination,omitempty"`
	// By default, a Materialized View only applies to records added after its creation. This option allows
	// to backfill all the data that was present before the Materialized View creation.
	BackfillOptions *BackfillOptionsInput `json:"backfillOptions,omitempty"`
}

// GetUniqueName returns CreateMaterializedViewInput.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateMaterializedViewInput) GetUniqueName() *string { return v.UniqueName }

// GetDescription returns CreateMaterializedViewInput.Description, and is useful for accessing the field via an interface.
func (v *CreateMaterializedViewInput) GetDescription() *string { return v.Description }

// GetSql returns CreateMaterializedViewInput.Sql, and is useful for accessing the field via an interface.
func (v *CreateMaterializedViewInput) GetSql() string { return v.Sql }

// GetDestination returns CreateMaterializedViewInput.Destination, and is useful for accessing the field via an interface.
func (v *CreateMaterializedViewInput) GetDestination() *CreateMaterializedViewDestinationInput {
	return v.Destination
}

// GetBackfillOptions returns CreateMaterializedViewInput.BackfillOptions, and is useful for accessing the field via an interface.
func (v *CreateMaterializedViewInput) GetBackfillOptions() *BackfillOptionsInput {
	return v.BackfillOptions
}

// CreateMaterializedViewResponse is returned by CreateMaterializedView on success.
type CreateMaterializedViewResponse struct {
	// Creates a new Materialized View.
	// Returns the newly created Materialized View (or an error message if creating the Materialized View fails).
	CreateMaterializedView *CreateMaterializedViewCreateMaterializedViewMaterializedViewResponse `json:"createMaterializedView"`
}

// GetCreateMaterializedView returns CreateMaterializedViewResponse.CreateMaterializedView, and is useful for accessing the field via an interface.
func (v *CreateMaterializedViewResponse) GetCreateMaterializedView() *CreateMaterializedViewCreateMaterializedViewMaterializedViewResponse {
	return v.CreateMaterializedView
}

// CreateMaxMetricCreateMaxMetricMetricResponse includes the requested fields of the GraphQL type MetricResponse.
// The GraphQL type's documentation follows.
//
// The result of a mutation which creates or modifies a Metric.
type CreateMaxMetricCreateMaxMetricMetricResponse struct {
	Typename *string `json:"__typename"`
	// The Metric which was created or modified.
	Metric *CreateMaxMetricCreateMaxMetricMetricResponseMetric `json:"metric"`
}

// GetTypename returns CreateMaxMetricCreateMaxMetricMetricResponse.Typename, and is useful for accessing the field via an interface.
func (v *CreateMaxMetricCreateMaxMetricMetricResponse) GetTypename() *string { return v.Typename }

// GetMetric returns CreateMaxMetricCreateMaxMetricMetricResponse.Metric, and is useful for accessing the field via an interface.
func (v *CreateMaxMetricCreateMaxMetricMetricResponse) GetMetric() *CreateMaxMetricCreateMaxMetricMetricResponseMetric {
	return v.Metric
}

// CreateMaxMetricCreateMaxMetricMetricResponseMetric includes the requested fields of the GraphQL type Metric.
// The GraphQL type's documentation follows.
//
// The Metric object.
//
// A Metric is a business indicator measured over time.
//
// [Learn more about Metrics](/docs/key-concepts#metric).
type CreateMaxMetricCreateMaxMetricMetricResponseMetric struct {
	MetricData `json:"-"`
}

// GetId returns CreateMaxMetricCreateMaxMetricMetricResponseMetric.Id, and is useful for accessing the field via an interface.
func (v *CreateMaxMetricCreateMaxMetricMetricResponseMetric) GetId() string { return v.MetricData.Id }

// GetType returns CreateMaxMetricCreateMaxMetricMetricResponseMetric.Type, and is useful for accessing the field via an interface.
func (v *CreateMaxMetricCreateMaxMetricMetricResponseMetric) GetType() MetricType {
	return v.MetricData.Type
}

// GetAccessControlEnabled returns CreateMaxMetricCreateMaxMetricMetricResponseMetric.AccessControlEnabled, and is useful for accessing the field via an interface.
func (v *CreateMaxMetricCreateMaxMetricMetricResponseMetric) GetAccessControlEnabled() bool {
	return v.MetricData.AccessControlEnabled
}

// GetDataPool returns CreateMaxMetricCreateMaxMetricMetricResponseMetric.DataPool, and is useful for accessing the field via an interface.
func (v *CreateMaxMetricCreateMaxMetricMetricResponseMetric) GetDataPool() *MetricDataDataPool {
	return v.MetricData.DataPool
}

// GetDimensions returns CreateMaxMetricCreateMaxMetricMetricResponseMetric.Dimensions, and is useful for accessing the field via an interface.
func (v *CreateMaxMetricCreateMaxMetricMetricResponseMetric) GetDimensions() []*MetricDataDimensionsDimension {
	return v.MetricData.Dimensions
}

// GetTimestamp returns CreateMaxMetricCreateMaxMetricMetricResponseMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *CreateMaxMetricCreateMaxMetricMetricResponseMetric) GetTimestamp() *MetricDataTimestampDimension {
	return v.MetricData.Timestamp
}

// GetMeasure returns CreateMaxMetricCreateMaxMetricMetricResponseMetric.Measure, and is useful for accessing the field via an interface.
func (v *CreateMaxMetricCreateMaxMetricMetricResponseMetric) GetMeasure() *MetricDataMeasureDimension {
	return v.MetricData.Measure
}

// GetSettings returns CreateMaxMetricCreateMaxMetricMetricResponseMetric.Settings, and is useful for accessing the field via an interface.
func (v *CreateMaxMetricCreateMaxMetricMetricResponseMetric) GetSettings() MetricDataSettingsMetricSettings {
	return v.MetricData.Settings
}

// GetUniqueName returns CreateMaxMetricCreateMaxMetricMetricResponseMetric.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateMaxMetricCreateMaxMetricMetricResponseMetric) GetUniqueName() string {
	return v.MetricData.CommonDataMetric.UniqueName
}

// GetDescription returns CreateMaxMetricCreateMaxMetricMetricResponseMetric.Description, and is useful for accessing the field via an interface.
func (v *CreateMaxMetricCreateMaxMetricMetricResponseMetric) GetDescription() string {
	return v.MetricData.CommonDataMetric.Description
}

// GetAccount returns CreateMaxMetricCreateMaxMetricMetricResponseMetric.Account, and is useful for accessing the field via an interface.
func (v *CreateMaxMetricCreateMaxMetricMetricResponseMetric) GetAccount() *CommonDataAccount {
	return v.MetricData.CommonDataMetric.Account
}

// GetEnvironment returns CreateMaxMetricCreateMaxMetricMetricResponseMetric.Environment, and is useful for accessing the field via an interface.
func (v *CreateMaxMetricCreateMaxMetricMetricResponseMetric) GetEnvironment() *CommonDataEnvironment {
	return v.MetricData.CommonDataMetric.Environment
}

// GetCreatedAt returns CreateMaxMetricCreateMaxMetricMetricResponseMetric.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateMaxMetricCreateMaxMetricMetricResponseMetric) GetCreatedAt() time.Time {
	return v.MetricData.CommonDataMetric.CreatedAt
}

// GetModifiedAt returns CreateMaxMetricCreateMaxMetricMetricResponseMetric.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CreateMaxMetricCreateMaxMetricMetricResponseMetric) GetModifiedAt() time.Time {
	return v.MetricData.CommonDataMetric.ModifiedAt
}

// GetCreatedBy returns CreateMaxMetricCreateMaxMetricMetricResponseMetric.CreatedBy, and is useful for accessing the field via an interface.
func (v *CreateMaxMetricCreateMaxMetricMetricResponseMetric) GetCreatedBy() string {
	return v.MetricData.CommonDataMetric.CreatedBy
}

// GetModifiedBy returns CreateMaxMetricCreateMaxMetricMetricResponseMetric.ModifiedBy, and is useful for accessing the field via an interface.
func (v *CreateMaxMetricCreateMaxMetricMetricResponseMetric) GetModifiedBy() string {
	return v.MetricData.CommonDataMetric.ModifiedBy
}

func (v *CreateMaxMetricCreateMaxMetricMetricResponseMetric) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateMaxMetricCreateMaxMetricMetricResponseMetric
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateMaxMetricCreateMaxMetricMetricResponseMetric = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MetricData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateMaxMetricCreateMaxMetricMetricResponseMetric struct {
	Id string `json:"id"`

	Type MetricType `json:"type"`

	AccessControlEnabled bool `json:"accessControlEnabled"`

	DataPool *MetricDataDataPool `json:"dataPool"`

	Dimensions []*MetricDataDimensionsDimension `json:"dimensions"`

	Timestamp *MetricDataTimestampDimension `json:"timestamp"`

	Measure *MetricDataMeasureDimension `json:"measure"`

	Settings json.RawMessage `json:"settings"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *CreateMaxMetricCreateMaxMetricMetricResponseMetric) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateMaxMetricCreateMaxMetricMetricResponseMetric) __premarshalJSON() (*__premarshalCreateMaxMetricCreateMaxMetricMetricResponseMetric, error) {
	var retval __premarshalCreateMaxMetricCreateMaxMetricMetricResponseMetric

	retval.Id = v.MetricData.Id
	retval.Type = v.MetricData.Type
	retval.AccessControlEnabled = v.MetricData.AccessControlEnabled
	retval.DataPool = v.MetricData.DataPool
	retval.Dimensions = v.MetricData.Dimensions
	retval.Timestamp = v.MetricData.Timestamp
	retval.Measure = v.MetricData.Measure
	{

		dst := &retval.Settings
		src := v.MetricData.Settings
		var err error
		*dst, err = __marshalMetricDataSettingsMetricSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CreateMaxMetricCreateMaxMetricMetricResponseMetric.MetricData.Settings: %w", err)
		}
	}
	retval.UniqueName = v.MetricData.CommonDataMetric.UniqueName
	retval.Description = v.MetricData.CommonDataMetric.Description
	retval.Account = v.MetricData.CommonDataMetric.Account
	retval.Environment = v.MetricData.CommonDataMetric.Environment
	retval.CreatedAt = v.MetricData.CommonDataMetric.CreatedAt
	retval.ModifiedAt = v.MetricData.CommonDataMetric.ModifiedAt
	retval.CreatedBy = v.MetricData.CommonDataMetric.CreatedBy
	retval.ModifiedBy = v.MetricData.CommonDataMetric.ModifiedBy
	return &retval, nil
}

// The fields for creating a new Maximum (Max) Metric.
type CreateMaxMetricInput struct {
	// The Data Pool that powers this Metric.
	DataPool string `json:"dataPool"`
	// The Metric's unique name. If not specified, Propel will set the ID as unique name.
	UniqueName *string `json:"uniqueName"`
	// The Metric's description.
	Description *string `json:"description"`
	// The Metric's Filters. Metric Filters allow defining a Metric with a subset of records from the given Data Pool. If no Filters are present, all records will be included.
	Filters []*FilterInput `json:"filters,omitempty"`
	// The Metric's Filters, in the form of SQL. Metric Filters allow defining a Metric with a subset of records from the given Data Pool. If no Filters are present, all records will be included.
	FilterSql *string `json:"filterSql"`
	// The Metric's Dimensions. Dimensions define the columns that will be available to filter the Metric at query time.
	Dimensions []*DimensionInput `json:"dimensions,omitempty"`
	// The column to calculate the maximum from.
	Measure *DimensionInput `json:"measure,omitempty"`
}

// GetDataPool returns CreateMaxMetricInput.DataPool, and is useful for accessing the field via an interface.
func (v *CreateMaxMetricInput) GetDataPool() string { return v.DataPool }

// GetUniqueName returns CreateMaxMetricInput.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateMaxMetricInput) GetUniqueName() *string { return v.UniqueName }

// GetDescription returns CreateMaxMetricInput.Description, and is useful for accessing the field via an interface.
func (v *CreateMaxMetricInput) GetDescription() *string { return v.Description }

// GetFilters returns CreateMaxMetricInput.Filters, and is useful for accessing the field via an interface.
func (v *CreateMaxMetricInput) GetFilters() []*FilterInput { return v.Filters }

// GetFilterSql returns CreateMaxMetricInput.FilterSql, and is useful for accessing the field via an interface.
func (v *CreateMaxMetricInput) GetFilterSql() *string { return v.FilterSql }

// GetDimensions returns CreateMaxMetricInput.Dimensions, and is useful for accessing the field via an interface.
func (v *CreateMaxMetricInput) GetDimensions() []*DimensionInput { return v.Dimensions }

// GetMeasure returns CreateMaxMetricInput.Measure, and is useful for accessing the field via an interface.
func (v *CreateMaxMetricInput) GetMeasure() *DimensionInput { return v.Measure }

// CreateMaxMetricResponse is returned by CreateMaxMetric on success.
type CreateMaxMetricResponse struct {
	// Creates a new Max Metric from the given Data Pool and returns the newly created Metric (or an error message if creating the Metric fails).
	//
	// [Learn more about Metrics](https://www.propeldata.com/docs/metrics).
	CreateMaxMetric *CreateMaxMetricCreateMaxMetricMetricResponse `json:"createMaxMetric"`
}

// GetCreateMaxMetric returns CreateMaxMetricResponse.CreateMaxMetric, and is useful for accessing the field via an interface.
func (v *CreateMaxMetricResponse) GetCreateMaxMetric() *CreateMaxMetricCreateMaxMetricMetricResponse {
	return v.CreateMaxMetric
}

// CreateMinMetricCreateMinMetricMetricResponse includes the requested fields of the GraphQL type MetricResponse.
// The GraphQL type's documentation follows.
//
// The result of a mutation which creates or modifies a Metric.
type CreateMinMetricCreateMinMetricMetricResponse struct {
	Typename *string `json:"__typename"`
	// The Metric which was created or modified.
	Metric *CreateMinMetricCreateMinMetricMetricResponseMetric `json:"metric"`
}

// GetTypename returns CreateMinMetricCreateMinMetricMetricResponse.Typename, and is useful for accessing the field via an interface.
func (v *CreateMinMetricCreateMinMetricMetricResponse) GetTypename() *string { return v.Typename }

// GetMetric returns CreateMinMetricCreateMinMetricMetricResponse.Metric, and is useful for accessing the field via an interface.
func (v *CreateMinMetricCreateMinMetricMetricResponse) GetMetric() *CreateMinMetricCreateMinMetricMetricResponseMetric {
	return v.Metric
}

// CreateMinMetricCreateMinMetricMetricResponseMetric includes the requested fields of the GraphQL type Metric.
// The GraphQL type's documentation follows.
//
// The Metric object.
//
// A Metric is a business indicator measured over time.
//
// [Learn more about Metrics](/docs/key-concepts#metric).
type CreateMinMetricCreateMinMetricMetricResponseMetric struct {
	MetricData `json:"-"`
}

// GetId returns CreateMinMetricCreateMinMetricMetricResponseMetric.Id, and is useful for accessing the field via an interface.
func (v *CreateMinMetricCreateMinMetricMetricResponseMetric) GetId() string { return v.MetricData.Id }

// GetType returns CreateMinMetricCreateMinMetricMetricResponseMetric.Type, and is useful for accessing the field via an interface.
func (v *CreateMinMetricCreateMinMetricMetricResponseMetric) GetType() MetricType {
	return v.MetricData.Type
}

// GetAccessControlEnabled returns CreateMinMetricCreateMinMetricMetricResponseMetric.AccessControlEnabled, and is useful for accessing the field via an interface.
func (v *CreateMinMetricCreateMinMetricMetricResponseMetric) GetAccessControlEnabled() bool {
	return v.MetricData.AccessControlEnabled
}

// GetDataPool returns CreateMinMetricCreateMinMetricMetricResponseMetric.DataPool, and is useful for accessing the field via an interface.
func (v *CreateMinMetricCreateMinMetricMetricResponseMetric) GetDataPool() *MetricDataDataPool {
	return v.MetricData.DataPool
}

// GetDimensions returns CreateMinMetricCreateMinMetricMetricResponseMetric.Dimensions, and is useful for accessing the field via an interface.
func (v *CreateMinMetricCreateMinMetricMetricResponseMetric) GetDimensions() []*MetricDataDimensionsDimension {
	return v.MetricData.Dimensions
}

// GetTimestamp returns CreateMinMetricCreateMinMetricMetricResponseMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *CreateMinMetricCreateMinMetricMetricResponseMetric) GetTimestamp() *MetricDataTimestampDimension {
	return v.MetricData.Timestamp
}

// GetMeasure returns CreateMinMetricCreateMinMetricMetricResponseMetric.Measure, and is useful for accessing the field via an interface.
func (v *CreateMinMetricCreateMinMetricMetricResponseMetric) GetMeasure() *MetricDataMeasureDimension {
	return v.MetricData.Measure
}

// GetSettings returns CreateMinMetricCreateMinMetricMetricResponseMetric.Settings, and is useful for accessing the field via an interface.
func (v *CreateMinMetricCreateMinMetricMetricResponseMetric) GetSettings() MetricDataSettingsMetricSettings {
	return v.MetricData.Settings
}

// GetUniqueName returns CreateMinMetricCreateMinMetricMetricResponseMetric.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateMinMetricCreateMinMetricMetricResponseMetric) GetUniqueName() string {
	return v.MetricData.CommonDataMetric.UniqueName
}

// GetDescription returns CreateMinMetricCreateMinMetricMetricResponseMetric.Description, and is useful for accessing the field via an interface.
func (v *CreateMinMetricCreateMinMetricMetricResponseMetric) GetDescription() string {
	return v.MetricData.CommonDataMetric.Description
}

// GetAccount returns CreateMinMetricCreateMinMetricMetricResponseMetric.Account, and is useful for accessing the field via an interface.
func (v *CreateMinMetricCreateMinMetricMetricResponseMetric) GetAccount() *CommonDataAccount {
	return v.MetricData.CommonDataMetric.Account
}

// GetEnvironment returns CreateMinMetricCreateMinMetricMetricResponseMetric.Environment, and is useful for accessing the field via an interface.
func (v *CreateMinMetricCreateMinMetricMetricResponseMetric) GetEnvironment() *CommonDataEnvironment {
	return v.MetricData.CommonDataMetric.Environment
}

// GetCreatedAt returns CreateMinMetricCreateMinMetricMetricResponseMetric.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateMinMetricCreateMinMetricMetricResponseMetric) GetCreatedAt() time.Time {
	return v.MetricData.CommonDataMetric.CreatedAt
}

// GetModifiedAt returns CreateMinMetricCreateMinMetricMetricResponseMetric.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CreateMinMetricCreateMinMetricMetricResponseMetric) GetModifiedAt() time.Time {
	return v.MetricData.CommonDataMetric.ModifiedAt
}

// GetCreatedBy returns CreateMinMetricCreateMinMetricMetricResponseMetric.CreatedBy, and is useful for accessing the field via an interface.
func (v *CreateMinMetricCreateMinMetricMetricResponseMetric) GetCreatedBy() string {
	return v.MetricData.CommonDataMetric.CreatedBy
}

// GetModifiedBy returns CreateMinMetricCreateMinMetricMetricResponseMetric.ModifiedBy, and is useful for accessing the field via an interface.
func (v *CreateMinMetricCreateMinMetricMetricResponseMetric) GetModifiedBy() string {
	return v.MetricData.CommonDataMetric.ModifiedBy
}

func (v *CreateMinMetricCreateMinMetricMetricResponseMetric) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateMinMetricCreateMinMetricMetricResponseMetric
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateMinMetricCreateMinMetricMetricResponseMetric = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MetricData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateMinMetricCreateMinMetricMetricResponseMetric struct {
	Id string `json:"id"`

	Type MetricType `json:"type"`

	AccessControlEnabled bool `json:"accessControlEnabled"`

	DataPool *MetricDataDataPool `json:"dataPool"`

	Dimensions []*MetricDataDimensionsDimension `json:"dimensions"`

	Timestamp *MetricDataTimestampDimension `json:"timestamp"`

	Measure *MetricDataMeasureDimension `json:"measure"`

	Settings json.RawMessage `json:"settings"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *CreateMinMetricCreateMinMetricMetricResponseMetric) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateMinMetricCreateMinMetricMetricResponseMetric) __premarshalJSON() (*__premarshalCreateMinMetricCreateMinMetricMetricResponseMetric, error) {
	var retval __premarshalCreateMinMetricCreateMinMetricMetricResponseMetric

	retval.Id = v.MetricData.Id
	retval.Type = v.MetricData.Type
	retval.AccessControlEnabled = v.MetricData.AccessControlEnabled
	retval.DataPool = v.MetricData.DataPool
	retval.Dimensions = v.MetricData.Dimensions
	retval.Timestamp = v.MetricData.Timestamp
	retval.Measure = v.MetricData.Measure
	{

		dst := &retval.Settings
		src := v.MetricData.Settings
		var err error
		*dst, err = __marshalMetricDataSettingsMetricSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CreateMinMetricCreateMinMetricMetricResponseMetric.MetricData.Settings: %w", err)
		}
	}
	retval.UniqueName = v.MetricData.CommonDataMetric.UniqueName
	retval.Description = v.MetricData.CommonDataMetric.Description
	retval.Account = v.MetricData.CommonDataMetric.Account
	retval.Environment = v.MetricData.CommonDataMetric.Environment
	retval.CreatedAt = v.MetricData.CommonDataMetric.CreatedAt
	retval.ModifiedAt = v.MetricData.CommonDataMetric.ModifiedAt
	retval.CreatedBy = v.MetricData.CommonDataMetric.CreatedBy
	retval.ModifiedBy = v.MetricData.CommonDataMetric.ModifiedBy
	return &retval, nil
}

// The fields for creating a new Minimum (Min) Metric.
type CreateMinMetricInput struct {
	// The Data Pool that powers this Metric.
	DataPool string `json:"dataPool"`
	// The Metric's unique name. If not specified, Propel will set the ID as unique name.
	UniqueName *string `json:"uniqueName"`
	// The Metric's description.
	Description *string `json:"description"`
	// The Metric's Filters. Metric Filters allow defining a Metric with a subset of records from the given Data Pool. If no Filters are present, all records will be included.
	Filters []*FilterInput `json:"filters,omitempty"`
	// The Metric's Filters, in the form of SQL. Metric Filters allow defining a Metric with a subset of records from the given Data Pool. If no Filters are present, all records will be included.
	FilterSql *string `json:"filterSql"`
	// The Metric's Dimensions. Dimensions define the columns that will be available to filter the Metric at query time.
	Dimensions []*DimensionInput `json:"dimensions,omitempty"`
	Measure    *DimensionInput   `json:"measure,omitempty"`
}

// GetDataPool returns CreateMinMetricInput.DataPool, and is useful for accessing the field via an interface.
func (v *CreateMinMetricInput) GetDataPool() string { return v.DataPool }

// GetUniqueName returns CreateMinMetricInput.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateMinMetricInput) GetUniqueName() *string { return v.UniqueName }

// GetDescription returns CreateMinMetricInput.Description, and is useful for accessing the field via an interface.
func (v *CreateMinMetricInput) GetDescription() *string { return v.Description }

// GetFilters returns CreateMinMetricInput.Filters, and is useful for accessing the field via an interface.
func (v *CreateMinMetricInput) GetFilters() []*FilterInput { return v.Filters }

// GetFilterSql returns CreateMinMetricInput.FilterSql, and is useful for accessing the field via an interface.
func (v *CreateMinMetricInput) GetFilterSql() *string { return v.FilterSql }

// GetDimensions returns CreateMinMetricInput.Dimensions, and is useful for accessing the field via an interface.
func (v *CreateMinMetricInput) GetDimensions() []*DimensionInput { return v.Dimensions }

// GetMeasure returns CreateMinMetricInput.Measure, and is useful for accessing the field via an interface.
func (v *CreateMinMetricInput) GetMeasure() *DimensionInput { return v.Measure }

// CreateMinMetricResponse is returned by CreateMinMetric on success.
type CreateMinMetricResponse struct {
	// Creates a new Min Metric from the given Data Pool and returns the newly created Metric (or an error message if creating the Metric fails).
	//
	// [Learn more about Metrics](https://www.propeldata.com/docs/metrics).
	CreateMinMetric *CreateMinMetricCreateMinMetricMetricResponse `json:"createMinMetric"`
}

// GetCreateMinMetric returns CreateMinMetricResponse.CreateMinMetric, and is useful for accessing the field via an interface.
func (v *CreateMinMetricResponse) GetCreateMinMetric() *CreateMinMetricCreateMinMetricMetricResponse {
	return v.CreateMinMetric
}

// CreatePolicyCreatePolicyPolicyResponse includes the requested fields of the GraphQL type PolicyResponse.
// The GraphQL type's documentation follows.
//
// The result of a mutation which creates or modifies a Policy.
type CreatePolicyCreatePolicyPolicyResponse struct {
	// The Policy which was created or modified.
	Policy *CreatePolicyCreatePolicyPolicyResponsePolicy `json:"policy"`
}

// GetPolicy returns CreatePolicyCreatePolicyPolicyResponse.Policy, and is useful for accessing the field via an interface.
func (v *CreatePolicyCreatePolicyPolicyResponse) GetPolicy() *CreatePolicyCreatePolicyPolicyResponsePolicy {
	return v.Policy
}

// CreatePolicyCreatePolicyPolicyResponsePolicy includes the requested fields of the GraphQL type Policy.
// The GraphQL type's documentation follows.
//
// The Policy type. It governs an Application's access to a Metric's data.
type CreatePolicyCreatePolicyPolicyResponsePolicy struct {
	PolicyData `json:"-"`
}

// GetId returns CreatePolicyCreatePolicyPolicyResponsePolicy.Id, and is useful for accessing the field via an interface.
func (v *CreatePolicyCreatePolicyPolicyResponsePolicy) GetId() string { return v.PolicyData.Id }

// GetType returns CreatePolicyCreatePolicyPolicyResponsePolicy.Type, and is useful for accessing the field via an interface.
func (v *CreatePolicyCreatePolicyPolicyResponsePolicy) GetType() PolicyType { return v.PolicyData.Type }

// GetMetric returns CreatePolicyCreatePolicyPolicyResponsePolicy.Metric, and is useful for accessing the field via an interface.
func (v *CreatePolicyCreatePolicyPolicyResponsePolicy) GetMetric() *PolicyDataMetric {
	return v.PolicyData.Metric
}

// GetApplication returns CreatePolicyCreatePolicyPolicyResponsePolicy.Application, and is useful for accessing the field via an interface.
func (v *CreatePolicyCreatePolicyPolicyResponsePolicy) GetApplication() *PolicyDataApplication {
	return v.PolicyData.Application
}

func (v *CreatePolicyCreatePolicyPolicyResponsePolicy) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreatePolicyCreatePolicyPolicyResponsePolicy
		graphql.NoUnmarshalJSON
	}
	firstPass.CreatePolicyCreatePolicyPolicyResponsePolicy = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PolicyData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreatePolicyCreatePolicyPolicyResponsePolicy struct {
	Id string `json:"id"`

	Type PolicyType `json:"type"`

	Metric *PolicyDataMetric `json:"metric"`

	Application *PolicyDataApplication `json:"application"`
}

func (v *CreatePolicyCreatePolicyPolicyResponsePolicy) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreatePolicyCreatePolicyPolicyResponsePolicy) __premarshalJSON() (*__premarshalCreatePolicyCreatePolicyPolicyResponsePolicy, error) {
	var retval __premarshalCreatePolicyCreatePolicyPolicyResponsePolicy

	retval.Id = v.PolicyData.Id
	retval.Type = v.PolicyData.Type
	retval.Metric = v.PolicyData.Metric
	retval.Application = v.PolicyData.Application
	return &retval, nil
}

// The fields for creating a Policy.
type CreatePolicyInput struct {
	// The Metric to which the Policy will be applied.
	Metric string `json:"metric"`
	// The type of Policy to create.
	Type PolicyType `json:"type"`
	// The Application that will be granted access to the Metric.
	Application string `json:"application"`
}

// GetMetric returns CreatePolicyInput.Metric, and is useful for accessing the field via an interface.
func (v *CreatePolicyInput) GetMetric() string { return v.Metric }

// GetType returns CreatePolicyInput.Type, and is useful for accessing the field via an interface.
func (v *CreatePolicyInput) GetType() PolicyType { return v.Type }

// GetApplication returns CreatePolicyInput.Application, and is useful for accessing the field via an interface.
func (v *CreatePolicyInput) GetApplication() string { return v.Application }

// CreatePolicyResponse is returned by CreatePolicy on success.
type CreatePolicyResponse struct {
	// Creates a new Policy granting an Application access to a Metric's data.
	CreatePolicy *CreatePolicyCreatePolicyPolicyResponse `json:"createPolicy"`
}

// GetCreatePolicy returns CreatePolicyResponse.CreatePolicy, and is useful for accessing the field via an interface.
func (v *CreatePolicyResponse) GetCreatePolicy() *CreatePolicyCreatePolicyPolicyResponse {
	return v.CreatePolicy
}

// CreateS3DataSourceCreateS3DataSourceDataSourceResponse includes the requested fields of the GraphQL type DataSourceResponse.
// The GraphQL type's documentation follows.
//
// The result of a mutation which creates or modifies a Data Source.
type CreateS3DataSourceCreateS3DataSourceDataSourceResponse struct {
	// The Data Source which was created or modified.
	DataSource *CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource `json:"dataSource"`
}

// GetDataSource returns CreateS3DataSourceCreateS3DataSourceDataSourceResponse.DataSource, and is useful for accessing the field via an interface.
func (v *CreateS3DataSourceCreateS3DataSourceDataSourceResponse) GetDataSource() *CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource {
	return v.DataSource
}

// CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource includes the requested fields of the GraphQL type DataSource.
// The GraphQL type's documentation follows.
//
// The Data Source object.
//
// A Data Source is a connection to your data warehouse. It has the necessary connection details for Propel to access Snowflake or any other supported Data Source.
//
// [Learn more about Data Sources](https://www.propeldata.com/docs/data-sources).
type CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource struct {
	DataSourceData `json:"-"`
}

// GetId returns CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource.Id, and is useful for accessing the field via an interface.
func (v *CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource) GetId() string {
	return v.DataSourceData.Id
}

// GetType returns CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource.Type, and is useful for accessing the field via an interface.
func (v *CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource) GetType() DataSourceType {
	return v.DataSourceData.Type
}

// GetStatus returns CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource.Status, and is useful for accessing the field via an interface.
func (v *CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource) GetStatus() DataSourceStatus {
	return v.DataSourceData.Status
}

// GetError returns CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource.Error, and is useful for accessing the field via an interface.
func (v *CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource) GetError() *DataSourceDataError {
	return v.DataSourceData.Error
}

// GetDataPools returns CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource.DataPools, and is useful for accessing the field via an interface.
func (v *CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource) GetDataPools() *DataSourceDataDataPoolsDataPoolConnection {
	return v.DataSourceData.DataPools
}

// GetConnectionSettings returns CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource) GetConnectionSettings() DataSourceDataConnectionSettings {
	return v.DataSourceData.ConnectionSettings
}

// GetTables returns CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource.Tables, and is useful for accessing the field via an interface.
func (v *CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource) GetTables() *DataSourceDataTablesTableConnection {
	return v.DataSourceData.Tables
}

// GetChecks returns CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource.Checks, and is useful for accessing the field via an interface.
func (v *CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource) GetChecks() []*DataSourceDataChecksDataSourceCheck {
	return v.DataSourceData.Checks
}

// GetTableIntrospections returns CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource.TableIntrospections, and is useful for accessing the field via an interface.
func (v *CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource) GetTableIntrospections() *DataSourceDataTableIntrospectionsTableIntrospectionConnection {
	return v.DataSourceData.TableIntrospections
}

// GetUniqueName returns CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource) GetUniqueName() string {
	return v.DataSourceData.CommonDataDataSource.UniqueName
}

// GetDescription returns CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource.Description, and is useful for accessing the field via an interface.
func (v *CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource) GetDescription() string {
	return v.DataSourceData.CommonDataDataSource.Description
}

// GetAccount returns CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource.Account, and is useful for accessing the field via an interface.
func (v *CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource) GetAccount() *CommonDataAccount {
	return v.DataSourceData.CommonDataDataSource.Account
}

// GetEnvironment returns CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource.Environment, and is useful for accessing the field via an interface.
func (v *CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource) GetEnvironment() *CommonDataEnvironment {
	return v.DataSourceData.CommonDataDataSource.Environment
}

// GetCreatedAt returns CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource) GetCreatedAt() time.Time {
	return v.DataSourceData.CommonDataDataSource.CreatedAt
}

// GetModifiedAt returns CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource) GetModifiedAt() time.Time {
	return v.DataSourceData.CommonDataDataSource.ModifiedAt
}

// GetCreatedBy returns CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource.CreatedBy, and is useful for accessing the field via an interface.
func (v *CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource) GetCreatedBy() string {
	return v.DataSourceData.CommonDataDataSource.CreatedBy
}

// GetModifiedBy returns CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource.ModifiedBy, and is useful for accessing the field via an interface.
func (v *CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource) GetModifiedBy() string {
	return v.DataSourceData.CommonDataDataSource.ModifiedBy
}

func (v *CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataSourceData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource struct {
	Id string `json:"id"`

	Type DataSourceType `json:"type"`

	Status DataSourceStatus `json:"status"`

	Error *DataSourceDataError `json:"error"`

	DataPools *DataSourceDataDataPoolsDataPoolConnection `json:"dataPools"`

	ConnectionSettings json.RawMessage `json:"connectionSettings"`

	Tables *DataSourceDataTablesTableConnection `json:"tables"`

	Checks []*DataSourceDataChecksDataSourceCheck `json:"checks"`

	TableIntrospections *DataSourceDataTableIntrospectionsTableIntrospectionConnection `json:"tableIntrospections"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource) __premarshalJSON() (*__premarshalCreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource, error) {
	var retval __premarshalCreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource

	retval.Id = v.DataSourceData.Id
	retval.Type = v.DataSourceData.Type
	retval.Status = v.DataSourceData.Status
	retval.Error = v.DataSourceData.Error
	retval.DataPools = v.DataSourceData.DataPools
	{

		dst := &retval.ConnectionSettings
		src := v.DataSourceData.ConnectionSettings
		var err error
		*dst, err = __marshalDataSourceDataConnectionSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CreateS3DataSourceCreateS3DataSourceDataSourceResponseDataSource.DataSourceData.ConnectionSettings: %w", err)
		}
	}
	retval.Tables = v.DataSourceData.Tables
	retval.Checks = v.DataSourceData.Checks
	retval.TableIntrospections = v.DataSourceData.TableIntrospections
	retval.UniqueName = v.DataSourceData.CommonDataDataSource.UniqueName
	retval.Description = v.DataSourceData.CommonDataDataSource.Description
	retval.Account = v.DataSourceData.CommonDataDataSource.Account
	retval.Environment = v.DataSourceData.CommonDataDataSource.Environment
	retval.CreatedAt = v.DataSourceData.CommonDataDataSource.CreatedAt
	retval.ModifiedAt = v.DataSourceData.CommonDataDataSource.ModifiedAt
	retval.CreatedBy = v.DataSourceData.CommonDataDataSource.CreatedBy
	retval.ModifiedBy = v.DataSourceData.CommonDataDataSource.ModifiedBy
	return &retval, nil
}

type CreateS3DataSourceInput struct {
	// The S3 Data Source's connection settings
	ConnectionSettings *S3ConnectionSettingsInput `json:"connectionSettings,omitempty"`
	// The S3 Data Source's description.
	Description *string `json:"description"`
	// The S3 Data Source's unique name. If not specified, Propel will set the ID as unique name.
	UniqueName *string `json:"uniqueName"`
}

// GetConnectionSettings returns CreateS3DataSourceInput.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *CreateS3DataSourceInput) GetConnectionSettings() *S3ConnectionSettingsInput {
	return v.ConnectionSettings
}

// GetDescription returns CreateS3DataSourceInput.Description, and is useful for accessing the field via an interface.
func (v *CreateS3DataSourceInput) GetDescription() *string { return v.Description }

// GetUniqueName returns CreateS3DataSourceInput.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateS3DataSourceInput) GetUniqueName() *string { return v.UniqueName }

// CreateS3DataSourceResponse is returned by CreateS3DataSource on success.
type CreateS3DataSourceResponse struct {
	// Creates a new Amazon S3 Data Source pointed at the specified S3 bucket.
	//
	// Returns the newly created Data Source (or an error message if creating the Data Source fails).
	CreateS3DataSource *CreateS3DataSourceCreateS3DataSourceDataSourceResponse `json:"createS3DataSource"`
}

// GetCreateS3DataSource returns CreateS3DataSourceResponse.CreateS3DataSource, and is useful for accessing the field via an interface.
func (v *CreateS3DataSourceResponse) GetCreateS3DataSource() *CreateS3DataSourceCreateS3DataSourceDataSourceResponse {
	return v.CreateS3DataSource
}

// CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse includes the requested fields of the GraphQL interface DataSourceOrFailureResponse.
//
// CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse is implemented by the following types:
// CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse
// CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse
// The GraphQL type's documentation follows.
//
// The result of a mutation which creates or modifies a DataSource.
//
// If successful, an `DataSourceResponse` will be returned; otherwise, a
// `FailureResponse` will be returned.
type CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse interface {
	implementsGraphQLInterfaceCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse) implementsGraphQLInterfaceCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse() {
}
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse) implementsGraphQLInterfaceCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse() {
}

func __unmarshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse(b []byte, v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "DataSourceResponse":
		*v = new(CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse)
		return json.Unmarshal(b, *v)
	case "FailureResponse":
		*v = new(CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing DataSourceOrFailureResponse.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse: "%v"`, tn.TypeName)
	}
}

func __marshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse(v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse:
		typename = "DataSourceResponse"

		result := struct {
			TypeName string `json:"__typename"`
			*CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse
		}{typename, v}
		return json.Marshal(result)
	case *CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse:
		typename = "FailureResponse"

		result := struct {
			TypeName string `json:"__typename"`
			*CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse: "%T"`, v)
	}
}

// CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse includes the requested fields of the GraphQL type DataSourceResponse.
// The GraphQL type's documentation follows.
//
// The result of a mutation which creates or modifies a Data Source.
type CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse struct {
	Typename *string `json:"__typename"`
	// The Data Source which was created or modified.
	DataSource *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource `json:"dataSource"`
}

// GetTypename returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse.Typename, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse) GetTypename() *string {
	return v.Typename
}

// GetDataSource returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse.DataSource, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse) GetDataSource() *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource {
	return v.DataSource
}

// CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource includes the requested fields of the GraphQL type DataSource.
// The GraphQL type's documentation follows.
//
// The Data Source object.
//
// A Data Source is a connection to your data warehouse. It has the necessary connection details for Propel to access Snowflake or any other supported Data Source.
//
// [Learn more about Data Sources](https://www.propeldata.com/docs/data-sources).
type CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource struct {
	DataSourceData `json:"-"`
}

// GetId returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.Id, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetId() string {
	return v.DataSourceData.Id
}

// GetType returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.Type, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetType() DataSourceType {
	return v.DataSourceData.Type
}

// GetStatus returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.Status, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetStatus() DataSourceStatus {
	return v.DataSourceData.Status
}

// GetError returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.Error, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetError() *DataSourceDataError {
	return v.DataSourceData.Error
}

// GetDataPools returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.DataPools, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetDataPools() *DataSourceDataDataPoolsDataPoolConnection {
	return v.DataSourceData.DataPools
}

// GetConnectionSettings returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetConnectionSettings() DataSourceDataConnectionSettings {
	return v.DataSourceData.ConnectionSettings
}

// GetTables returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.Tables, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetTables() *DataSourceDataTablesTableConnection {
	return v.DataSourceData.Tables
}

// GetChecks returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.Checks, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetChecks() []*DataSourceDataChecksDataSourceCheck {
	return v.DataSourceData.Checks
}

// GetTableIntrospections returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.TableIntrospections, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetTableIntrospections() *DataSourceDataTableIntrospectionsTableIntrospectionConnection {
	return v.DataSourceData.TableIntrospections
}

// GetUniqueName returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetUniqueName() string {
	return v.DataSourceData.CommonDataDataSource.UniqueName
}

// GetDescription returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.Description, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetDescription() string {
	return v.DataSourceData.CommonDataDataSource.Description
}

// GetAccount returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.Account, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetAccount() *CommonDataAccount {
	return v.DataSourceData.CommonDataDataSource.Account
}

// GetEnvironment returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.Environment, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetEnvironment() *CommonDataEnvironment {
	return v.DataSourceData.CommonDataDataSource.Environment
}

// GetCreatedAt returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetCreatedAt() time.Time {
	return v.DataSourceData.CommonDataDataSource.CreatedAt
}

// GetModifiedAt returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetModifiedAt() time.Time {
	return v.DataSourceData.CommonDataDataSource.ModifiedAt
}

// GetCreatedBy returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.CreatedBy, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetCreatedBy() string {
	return v.DataSourceData.CommonDataDataSource.CreatedBy
}

// GetModifiedBy returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.ModifiedBy, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetModifiedBy() string {
	return v.DataSourceData.CommonDataDataSource.ModifiedBy
}

func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataSourceData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource struct {
	Id string `json:"id"`

	Type DataSourceType `json:"type"`

	Status DataSourceStatus `json:"status"`

	Error *DataSourceDataError `json:"error"`

	DataPools *DataSourceDataDataPoolsDataPoolConnection `json:"dataPools"`

	ConnectionSettings json.RawMessage `json:"connectionSettings"`

	Tables *DataSourceDataTablesTableConnection `json:"tables"`

	Checks []*DataSourceDataChecksDataSourceCheck `json:"checks"`

	TableIntrospections *DataSourceDataTableIntrospectionsTableIntrospectionConnection `json:"tableIntrospections"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) __premarshalJSON() (*__premarshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource, error) {
	var retval __premarshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource

	retval.Id = v.DataSourceData.Id
	retval.Type = v.DataSourceData.Type
	retval.Status = v.DataSourceData.Status
	retval.Error = v.DataSourceData.Error
	retval.DataPools = v.DataSourceData.DataPools
	{

		dst := &retval.ConnectionSettings
		src := v.DataSourceData.ConnectionSettings
		var err error
		*dst, err = __marshalDataSourceDataConnectionSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.DataSourceData.ConnectionSettings: %w", err)
		}
	}
	retval.Tables = v.DataSourceData.Tables
	retval.Checks = v.DataSourceData.Checks
	retval.TableIntrospections = v.DataSourceData.TableIntrospections
	retval.UniqueName = v.DataSourceData.CommonDataDataSource.UniqueName
	retval.Description = v.DataSourceData.CommonDataDataSource.Description
	retval.Account = v.DataSourceData.CommonDataDataSource.Account
	retval.Environment = v.DataSourceData.CommonDataDataSource.Environment
	retval.CreatedAt = v.DataSourceData.CommonDataDataSource.CreatedAt
	retval.ModifiedAt = v.DataSourceData.CommonDataDataSource.ModifiedAt
	retval.CreatedBy = v.DataSourceData.CommonDataDataSource.CreatedBy
	retval.ModifiedBy = v.DataSourceData.CommonDataDataSource.ModifiedBy
	return &retval, nil
}

// CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse includes the requested fields of the GraphQL type FailureResponse.
// The GraphQL type's documentation follows.
//
// The failure response object.
type CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse struct {
	Typename *string `json:"__typename"`
	// The error that caused the failure.
	Error *CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError `json:"error"`
}

// GetTypename returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse.Typename, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse) GetTypename() *string {
	return v.Typename
}

// GetError returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse.Error, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse) GetError() *CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError {
	return v.Error
}

// CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError includes the requested fields of the GraphQL type Error.
// The GraphQL type's documentation follows.
//
// The error object.
type CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError struct {
	GqlError `json:"-"`
}

// GetCode returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError.Code, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError) GetCode() *int {
	return v.GqlError.Code
}

// GetMessage returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError.Message, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError) GetMessage() string {
	return v.GqlError.Message
}

func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.GqlError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError struct {
	Code *int `json:"code"`

	Message string `json:"message"`
}

func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError) __premarshalJSON() (*__premarshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError, error) {
	var retval __premarshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError

	retval.Code = v.GqlError.Code
	retval.Message = v.GqlError.Message
	return &retval, nil
}

// The fields for creating a Snowflake Data Source.
type CreateSnowflakeDataSourceInput struct {
	// The Data Source's unique name. If not specified, Propel will set the ID as unique name.
	UniqueName *string `json:"uniqueName"`
	// The Data Source's description.
	Description *string `json:"description"`
	// The Data Source's connection settings.
	ConnectionSettings *SnowflakeConnectionSettingsInput `json:"connectionSettings,omitempty"`
}

// GetUniqueName returns CreateSnowflakeDataSourceInput.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceInput) GetUniqueName() *string { return v.UniqueName }

// GetDescription returns CreateSnowflakeDataSourceInput.Description, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceInput) GetDescription() *string { return v.Description }

// GetConnectionSettings returns CreateSnowflakeDataSourceInput.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceInput) GetConnectionSettings() *SnowflakeConnectionSettingsInput {
	return v.ConnectionSettings
}

// CreateSnowflakeDataSourceResponse is returned by CreateSnowflakeDataSource on success.
type CreateSnowflakeDataSourceResponse struct {
	// Creates a new Data Source from the given Snowflake database using the specified Snowflake account, warehouse, schema, username, and role.
	//
	// Returns the newly created Data Source (or an error message if creating the Data Source fails).
	CreateSnowflakeDataSource *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse `json:"-"`
}

// GetCreateSnowflakeDataSource returns CreateSnowflakeDataSourceResponse.CreateSnowflakeDataSource, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceResponse) GetCreateSnowflakeDataSource() *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse {
	return v.CreateSnowflakeDataSource
}

func (v *CreateSnowflakeDataSourceResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateSnowflakeDataSourceResponse
		CreateSnowflakeDataSource json.RawMessage `json:"createSnowflakeDataSource"`
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateSnowflakeDataSourceResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.CreateSnowflakeDataSource
		src := firstPass.CreateSnowflakeDataSource
		if len(src) != 0 && string(src) != "null" {
			*dst = new(CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse)
			err = __unmarshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal CreateSnowflakeDataSourceResponse.CreateSnowflakeDataSource: %w", err)
			}
		}
	}
	return nil
}

type __premarshalCreateSnowflakeDataSourceResponse struct {
	CreateSnowflakeDataSource json.RawMessage `json:"createSnowflakeDataSource"`
}

func (v *CreateSnowflakeDataSourceResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateSnowflakeDataSourceResponse) __premarshalJSON() (*__premarshalCreateSnowflakeDataSourceResponse, error) {
	var retval __premarshalCreateSnowflakeDataSourceResponse

	{

		dst := &retval.CreateSnowflakeDataSource
		src := v.CreateSnowflakeDataSource
		if src != nil {
			var err error
			*dst, err = __marshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal CreateSnowflakeDataSourceResponse.CreateSnowflakeDataSource: %w", err)
			}
		}
	}
	return &retval, nil
}

// CreateSumMetricCreateSumMetricMetricResponse includes the requested fields of the GraphQL type MetricResponse.
// The GraphQL type's documentation follows.
//
// The result of a mutation which creates or modifies a Metric.
type CreateSumMetricCreateSumMetricMetricResponse struct {
	Typename *string `json:"__typename"`
	// The Metric which was created or modified.
	Metric *CreateSumMetricCreateSumMetricMetricResponseMetric `json:"metric"`
}

// GetTypename returns CreateSumMetricCreateSumMetricMetricResponse.Typename, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponse) GetTypename() *string { return v.Typename }

// GetMetric returns CreateSumMetricCreateSumMetricMetricResponse.Metric, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponse) GetMetric() *CreateSumMetricCreateSumMetricMetricResponseMetric {
	return v.Metric
}

// CreateSumMetricCreateSumMetricMetricResponseMetric includes the requested fields of the GraphQL type Metric.
// The GraphQL type's documentation follows.
//
// The Metric object.
//
// A Metric is a business indicator measured over time.
//
// [Learn more about Metrics](/docs/key-concepts#metric).
type CreateSumMetricCreateSumMetricMetricResponseMetric struct {
	MetricData `json:"-"`
}

// GetId returns CreateSumMetricCreateSumMetricMetricResponseMetric.Id, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetId() string { return v.MetricData.Id }

// GetType returns CreateSumMetricCreateSumMetricMetricResponseMetric.Type, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetType() MetricType {
	return v.MetricData.Type
}

// GetAccessControlEnabled returns CreateSumMetricCreateSumMetricMetricResponseMetric.AccessControlEnabled, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetAccessControlEnabled() bool {
	return v.MetricData.AccessControlEnabled
}

// GetDataPool returns CreateSumMetricCreateSumMetricMetricResponseMetric.DataPool, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetDataPool() *MetricDataDataPool {
	return v.MetricData.DataPool
}

// GetDimensions returns CreateSumMetricCreateSumMetricMetricResponseMetric.Dimensions, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetDimensions() []*MetricDataDimensionsDimension {
	return v.MetricData.Dimensions
}

// GetTimestamp returns CreateSumMetricCreateSumMetricMetricResponseMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetTimestamp() *MetricDataTimestampDimension {
	return v.MetricData.Timestamp
}

// GetMeasure returns CreateSumMetricCreateSumMetricMetricResponseMetric.Measure, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetMeasure() *MetricDataMeasureDimension {
	return v.MetricData.Measure
}

// GetSettings returns CreateSumMetricCreateSumMetricMetricResponseMetric.Settings, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetSettings() MetricDataSettingsMetricSettings {
	return v.MetricData.Settings
}

// GetUniqueName returns CreateSumMetricCreateSumMetricMetricResponseMetric.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetUniqueName() string {
	return v.MetricData.CommonDataMetric.UniqueName
}

// GetDescription returns CreateSumMetricCreateSumMetricMetricResponseMetric.Description, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetDescription() string {
	return v.MetricData.CommonDataMetric.Description
}

// GetAccount returns CreateSumMetricCreateSumMetricMetricResponseMetric.Account, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetAccount() *CommonDataAccount {
	return v.MetricData.CommonDataMetric.Account
}

// GetEnvironment returns CreateSumMetricCreateSumMetricMetricResponseMetric.Environment, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetEnvironment() *CommonDataEnvironment {
	return v.MetricData.CommonDataMetric.Environment
}

// GetCreatedAt returns CreateSumMetricCreateSumMetricMetricResponseMetric.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetCreatedAt() time.Time {
	return v.MetricData.CommonDataMetric.CreatedAt
}

// GetModifiedAt returns CreateSumMetricCreateSumMetricMetricResponseMetric.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetModifiedAt() time.Time {
	return v.MetricData.CommonDataMetric.ModifiedAt
}

// GetCreatedBy returns CreateSumMetricCreateSumMetricMetricResponseMetric.CreatedBy, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetCreatedBy() string {
	return v.MetricData.CommonDataMetric.CreatedBy
}

// GetModifiedBy returns CreateSumMetricCreateSumMetricMetricResponseMetric.ModifiedBy, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetModifiedBy() string {
	return v.MetricData.CommonDataMetric.ModifiedBy
}

func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateSumMetricCreateSumMetricMetricResponseMetric
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateSumMetricCreateSumMetricMetricResponseMetric = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MetricData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateSumMetricCreateSumMetricMetricResponseMetric struct {
	Id string `json:"id"`

	Type MetricType `json:"type"`

	AccessControlEnabled bool `json:"accessControlEnabled"`

	DataPool *MetricDataDataPool `json:"dataPool"`

	Dimensions []*MetricDataDimensionsDimension `json:"dimensions"`

	Timestamp *MetricDataTimestampDimension `json:"timestamp"`

	Measure *MetricDataMeasureDimension `json:"measure"`

	Settings json.RawMessage `json:"settings"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) __premarshalJSON() (*__premarshalCreateSumMetricCreateSumMetricMetricResponseMetric, error) {
	var retval __premarshalCreateSumMetricCreateSumMetricMetricResponseMetric

	retval.Id = v.MetricData.Id
	retval.Type = v.MetricData.Type
	retval.AccessControlEnabled = v.MetricData.AccessControlEnabled
	retval.DataPool = v.MetricData.DataPool
	retval.Dimensions = v.MetricData.Dimensions
	retval.Timestamp = v.MetricData.Timestamp
	retval.Measure = v.MetricData.Measure
	{

		dst := &retval.Settings
		src := v.MetricData.Settings
		var err error
		*dst, err = __marshalMetricDataSettingsMetricSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CreateSumMetricCreateSumMetricMetricResponseMetric.MetricData.Settings: %w", err)
		}
	}
	retval.UniqueName = v.MetricData.CommonDataMetric.UniqueName
	retval.Description = v.MetricData.CommonDataMetric.Description
	retval.Account = v.MetricData.CommonDataMetric.Account
	retval.Environment = v.MetricData.CommonDataMetric.Environment
	retval.CreatedAt = v.MetricData.CommonDataMetric.CreatedAt
	retval.ModifiedAt = v.MetricData.CommonDataMetric.ModifiedAt
	retval.CreatedBy = v.MetricData.CommonDataMetric.CreatedBy
	retval.ModifiedBy = v.MetricData.CommonDataMetric.ModifiedBy
	return &retval, nil
}

// The fields for creating a new Sum Metric.
type CreateSumMetricInput struct {
	// The Data Pool that powers this Metric.
	DataPool string `json:"dataPool"`
	// The Metric's unique name. If not specified, Propel will set the ID as unique name.
	UniqueName *string `json:"uniqueName"`
	// The Metric's description.
	Description *string `json:"description"`
	// The Metric's Filters. Metric Filters allow defining a Metric with a subset of records from the given Data Pool. If no Filters are present, all records will be included.
	Filters []*FilterInput `json:"filters,omitempty"`
	// The Metric's Filters, in the form of SQL. Metric Filters allow defining a Metric with a subset of records from the given Data Pool. If no Filters are present, all records will be included.
	FilterSql *string `json:"filterSql"`
	// The Metric's Dimensions. Dimensions define the columns that will be available to filter the Metric at query time.
	Dimensions []*DimensionInput `json:"dimensions,omitempty"`
	// The column to be summed.
	Measure *DimensionInput `json:"measure,omitempty"`
}

// GetDataPool returns CreateSumMetricInput.DataPool, and is useful for accessing the field via an interface.
func (v *CreateSumMetricInput) GetDataPool() string { return v.DataPool }

// GetUniqueName returns CreateSumMetricInput.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateSumMetricInput) GetUniqueName() *string { return v.UniqueName }

// GetDescription returns CreateSumMetricInput.Description, and is useful for accessing the field via an interface.
func (v *CreateSumMetricInput) GetDescription() *string { return v.Description }

// GetFilters returns CreateSumMetricInput.Filters, and is useful for accessing the field via an interface.
func (v *CreateSumMetricInput) GetFilters() []*FilterInput { return v.Filters }

// GetFilterSql returns CreateSumMetricInput.FilterSql, and is useful for accessing the field via an interface.
func (v *CreateSumMetricInput) GetFilterSql() *string { return v.FilterSql }

// GetDimensions returns CreateSumMetricInput.Dimensions, and is useful for accessing the field via an interface.
func (v *CreateSumMetricInput) GetDimensions() []*DimensionInput { return v.Dimensions }

// GetMeasure returns CreateSumMetricInput.Measure, and is useful for accessing the field via an interface.
func (v *CreateSumMetricInput) GetMeasure() *DimensionInput { return v.Measure }

// CreateSumMetricResponse is returned by CreateSumMetric on success.
type CreateSumMetricResponse struct {
	// Creates a new Sum Metric from the given Data Pool and returns the newly created Metric (or an error message if creating the Metric fails).
	//
	// [Learn more about Metrics](https://www.propeldata.com/docs/metrics).
	CreateSumMetric *CreateSumMetricCreateSumMetricMetricResponse `json:"createSumMetric"`
}

// GetCreateSumMetric returns CreateSumMetricResponse.CreateSumMetric, and is useful for accessing the field via an interface.
func (v *CreateSumMetricResponse) GetCreateSumMetric() *CreateSumMetricCreateSumMetricMetricResponse {
	return v.CreateSumMetric
}

// CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponse includes the requested fields of the GraphQL type DataSourceResponse.
// The GraphQL type's documentation follows.
//
// The result of a mutation which creates or modifies a Data Source.
type CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponse struct {
	// The Data Source which was created or modified.
	DataSource *CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource `json:"dataSource"`
}

// GetDataSource returns CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponse.DataSource, and is useful for accessing the field via an interface.
func (v *CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponse) GetDataSource() *CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource {
	return v.DataSource
}

// CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource includes the requested fields of the GraphQL type DataSource.
// The GraphQL type's documentation follows.
//
// The Data Source object.
//
// A Data Source is a connection to your data warehouse. It has the necessary connection details for Propel to access Snowflake or any other supported Data Source.
//
// [Learn more about Data Sources](https://www.propeldata.com/docs/data-sources).
type CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource struct {
	DataSourceData `json:"-"`
}

// GetId returns CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource.Id, and is useful for accessing the field via an interface.
func (v *CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource) GetId() string {
	return v.DataSourceData.Id
}

// GetType returns CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource.Type, and is useful for accessing the field via an interface.
func (v *CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource) GetType() DataSourceType {
	return v.DataSourceData.Type
}

// GetStatus returns CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource.Status, and is useful for accessing the field via an interface.
func (v *CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource) GetStatus() DataSourceStatus {
	return v.DataSourceData.Status
}

// GetError returns CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource.Error, and is useful for accessing the field via an interface.
func (v *CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource) GetError() *DataSourceDataError {
	return v.DataSourceData.Error
}

// GetDataPools returns CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource.DataPools, and is useful for accessing the field via an interface.
func (v *CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource) GetDataPools() *DataSourceDataDataPoolsDataPoolConnection {
	return v.DataSourceData.DataPools
}

// GetConnectionSettings returns CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource) GetConnectionSettings() DataSourceDataConnectionSettings {
	return v.DataSourceData.ConnectionSettings
}

// GetTables returns CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource.Tables, and is useful for accessing the field via an interface.
func (v *CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource) GetTables() *DataSourceDataTablesTableConnection {
	return v.DataSourceData.Tables
}

// GetChecks returns CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource.Checks, and is useful for accessing the field via an interface.
func (v *CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource) GetChecks() []*DataSourceDataChecksDataSourceCheck {
	return v.DataSourceData.Checks
}

// GetTableIntrospections returns CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource.TableIntrospections, and is useful for accessing the field via an interface.
func (v *CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource) GetTableIntrospections() *DataSourceDataTableIntrospectionsTableIntrospectionConnection {
	return v.DataSourceData.TableIntrospections
}

// GetUniqueName returns CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource) GetUniqueName() string {
	return v.DataSourceData.CommonDataDataSource.UniqueName
}

// GetDescription returns CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource.Description, and is useful for accessing the field via an interface.
func (v *CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource) GetDescription() string {
	return v.DataSourceData.CommonDataDataSource.Description
}

// GetAccount returns CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource.Account, and is useful for accessing the field via an interface.
func (v *CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource) GetAccount() *CommonDataAccount {
	return v.DataSourceData.CommonDataDataSource.Account
}

// GetEnvironment returns CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource.Environment, and is useful for accessing the field via an interface.
func (v *CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource) GetEnvironment() *CommonDataEnvironment {
	return v.DataSourceData.CommonDataDataSource.Environment
}

// GetCreatedAt returns CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource) GetCreatedAt() time.Time {
	return v.DataSourceData.CommonDataDataSource.CreatedAt
}

// GetModifiedAt returns CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource) GetModifiedAt() time.Time {
	return v.DataSourceData.CommonDataDataSource.ModifiedAt
}

// GetCreatedBy returns CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource.CreatedBy, and is useful for accessing the field via an interface.
func (v *CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource) GetCreatedBy() string {
	return v.DataSourceData.CommonDataDataSource.CreatedBy
}

// GetModifiedBy returns CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource.ModifiedBy, and is useful for accessing the field via an interface.
func (v *CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource) GetModifiedBy() string {
	return v.DataSourceData.CommonDataDataSource.ModifiedBy
}

func (v *CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataSourceData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource struct {
	Id string `json:"id"`

	Type DataSourceType `json:"type"`

	Status DataSourceStatus `json:"status"`

	Error *DataSourceDataError `json:"error"`

	DataPools *DataSourceDataDataPoolsDataPoolConnection `json:"dataPools"`

	ConnectionSettings json.RawMessage `json:"connectionSettings"`

	Tables *DataSourceDataTablesTableConnection `json:"tables"`

	Checks []*DataSourceDataChecksDataSourceCheck `json:"checks"`

	TableIntrospections *DataSourceDataTableIntrospectionsTableIntrospectionConnection `json:"tableIntrospections"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource) __premarshalJSON() (*__premarshalCreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource, error) {
	var retval __premarshalCreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource

	retval.Id = v.DataSourceData.Id
	retval.Type = v.DataSourceData.Type
	retval.Status = v.DataSourceData.Status
	retval.Error = v.DataSourceData.Error
	retval.DataPools = v.DataSourceData.DataPools
	{

		dst := &retval.ConnectionSettings
		src := v.DataSourceData.ConnectionSettings
		var err error
		*dst, err = __marshalDataSourceDataConnectionSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponseDataSource.DataSourceData.ConnectionSettings: %w", err)
		}
	}
	retval.Tables = v.DataSourceData.Tables
	retval.Checks = v.DataSourceData.Checks
	retval.TableIntrospections = v.DataSourceData.TableIntrospections
	retval.UniqueName = v.DataSourceData.CommonDataDataSource.UniqueName
	retval.Description = v.DataSourceData.CommonDataDataSource.Description
	retval.Account = v.DataSourceData.CommonDataDataSource.Account
	retval.Environment = v.DataSourceData.CommonDataDataSource.Environment
	retval.CreatedAt = v.DataSourceData.CommonDataDataSource.CreatedAt
	retval.ModifiedAt = v.DataSourceData.CommonDataDataSource.ModifiedAt
	retval.CreatedBy = v.DataSourceData.CommonDataDataSource.CreatedBy
	retval.ModifiedBy = v.DataSourceData.CommonDataDataSource.ModifiedBy
	return &retval, nil
}

type CreateWebhookDataSourceInput struct {
	// The Webhook Data Source's connection settings
	ConnectionSettings *WebhookConnectionSettingsInput `json:"connectionSettings,omitempty"`
	// The Webhook Data Source's description.
	Description *string `json:"description"`
	// The Webhook Data Source's unique name. If not specified, Propel will set the ID as unique name.
	UniqueName *string `json:"uniqueName"`
}

// GetConnectionSettings returns CreateWebhookDataSourceInput.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *CreateWebhookDataSourceInput) GetConnectionSettings() *WebhookConnectionSettingsInput {
	return v.ConnectionSettings
}

// GetDescription returns CreateWebhookDataSourceInput.Description, and is useful for accessing the field via an interface.
func (v *CreateWebhookDataSourceInput) GetDescription() *string { return v.Description }

// GetUniqueName returns CreateWebhookDataSourceInput.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateWebhookDataSourceInput) GetUniqueName() *string { return v.UniqueName }

// CreateWebhookDataSourceResponse is returned by CreateWebhookDataSource on success.
type CreateWebhookDataSourceResponse struct {
	// Creates a new Webhook Data Source from the given settings.
	//
	// Returns the newly created Data Source (or an error message if creating the Data Source fails).
	CreateWebhookDataSource *CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponse `json:"createWebhookDataSource"`
}

// GetCreateWebhookDataSource returns CreateWebhookDataSourceResponse.CreateWebhookDataSource, and is useful for accessing the field via an interface.
func (v *CreateWebhookDataSourceResponse) GetCreateWebhookDataSource() *CreateWebhookDataSourceCreateWebhookDataSourceDataSourceResponse {
	return v.CreateWebhookDataSource
}

// DataPoolAccessPolicyData includes the GraphQL fields of DataPoolAccessPolicy requested by the fragment DataPoolAccessPolicyData.
type DataPoolAccessPolicyData struct {
	// The ID of the Data Pool Access Policy.
	Id                             string `json:"id"`
	CommonDataDataPoolAccessPolicy `json:"-"`
	// Columns that the Access Policy makes available for querying.
	Columns []string `json:"columns"`
	// Row-level filters that the Access Policy applies before executing queries.
	Rows []*DataPoolAccessPolicyDataRowsFilter `json:"rows"`
	// The Data Pool to which the Access Policy belongs.
	DataPool *DataPoolAccessPolicyDataDataPool `json:"dataPool"`
}

// GetId returns DataPoolAccessPolicyData.Id, and is useful for accessing the field via an interface.
func (v *DataPoolAccessPolicyData) GetId() string { return v.Id }

// GetColumns returns DataPoolAccessPolicyData.Columns, and is useful for accessing the field via an interface.
func (v *DataPoolAccessPolicyData) GetColumns() []string { return v.Columns }

// GetRows returns DataPoolAccessPolicyData.Rows, and is useful for accessing the field via an interface.
func (v *DataPoolAccessPolicyData) GetRows() []*DataPoolAccessPolicyDataRowsFilter { return v.Rows }

// GetDataPool returns DataPoolAccessPolicyData.DataPool, and is useful for accessing the field via an interface.
func (v *DataPoolAccessPolicyData) GetDataPool() *DataPoolAccessPolicyDataDataPool { return v.DataPool }

// GetUniqueName returns DataPoolAccessPolicyData.UniqueName, and is useful for accessing the field via an interface.
func (v *DataPoolAccessPolicyData) GetUniqueName() string {
	return v.CommonDataDataPoolAccessPolicy.UniqueName
}

// GetDescription returns DataPoolAccessPolicyData.Description, and is useful for accessing the field via an interface.
func (v *DataPoolAccessPolicyData) GetDescription() string {
	return v.CommonDataDataPoolAccessPolicy.Description
}

// GetAccount returns DataPoolAccessPolicyData.Account, and is useful for accessing the field via an interface.
func (v *DataPoolAccessPolicyData) GetAccount() *CommonDataAccount {
	return v.CommonDataDataPoolAccessPolicy.Account
}

// GetEnvironment returns DataPoolAccessPolicyData.Environment, and is useful for accessing the field via an interface.
func (v *DataPoolAccessPolicyData) GetEnvironment() *CommonDataEnvironment {
	return v.CommonDataDataPoolAccessPolicy.Environment
}

// GetCreatedAt returns DataPoolAccessPolicyData.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataPoolAccessPolicyData) GetCreatedAt() time.Time {
	return v.CommonDataDataPoolAccessPolicy.CreatedAt
}

// GetModifiedAt returns DataPoolAccessPolicyData.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataPoolAccessPolicyData) GetModifiedAt() time.Time {
	return v.CommonDataDataPoolAccessPolicy.ModifiedAt
}

// GetCreatedBy returns DataPoolAccessPolicyData.CreatedBy, and is useful for accessing the field via an interface.
func (v *DataPoolAccessPolicyData) GetCreatedBy() string {
	return v.CommonDataDataPoolAccessPolicy.CreatedBy
}

// GetModifiedBy returns DataPoolAccessPolicyData.ModifiedBy, and is useful for accessing the field via an interface.
func (v *DataPoolAccessPolicyData) GetModifiedBy() string {
	return v.CommonDataDataPoolAccessPolicy.ModifiedBy
}

func (v *DataPoolAccessPolicyData) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataPoolAccessPolicyData
		graphql.NoUnmarshalJSON
	}
	firstPass.DataPoolAccessPolicyData = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CommonDataDataPoolAccessPolicy)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataPoolAccessPolicyData struct {
	Id string `json:"id"`

	Columns []string `json:"columns"`

	Rows []*DataPoolAccessPolicyDataRowsFilter `json:"rows"`

	DataPool *DataPoolAccessPolicyDataDataPool `json:"dataPool"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *DataPoolAccessPolicyData) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataPoolAccessPolicyData) __premarshalJSON() (*__premarshalDataPoolAccessPolicyData, error) {
	var retval __premarshalDataPoolAccessPolicyData

	retval.Id = v.Id
	retval.Columns = v.Columns
	retval.Rows = v.Rows
	retval.DataPool = v.DataPool
	retval.UniqueName = v.CommonDataDataPoolAccessPolicy.UniqueName
	retval.Description = v.CommonDataDataPoolAccessPolicy.Description
	retval.Account = v.CommonDataDataPoolAccessPolicy.Account
	retval.Environment = v.CommonDataDataPoolAccessPolicy.Environment
	retval.CreatedAt = v.CommonDataDataPoolAccessPolicy.CreatedAt
	retval.ModifiedAt = v.CommonDataDataPoolAccessPolicy.ModifiedAt
	retval.CreatedBy = v.CommonDataDataPoolAccessPolicy.CreatedBy
	retval.ModifiedBy = v.CommonDataDataPoolAccessPolicy.ModifiedBy
	return &retval, nil
}

// DataPoolAccessPolicyDataDataPool includes the requested fields of the GraphQL type DataPool.
// The GraphQL type's documentation follows.
//
// The Data Pool object. Data Pools are Propel's high-speed data store and cache
//
// [Learn more about Data Pools](https://www.propeldata.com/docs/connect-your-data#key-concept-2-data-pools).
type DataPoolAccessPolicyDataDataPool struct {
	// The Data Pool's unique identifier.
	Id string `json:"id"`
}

// GetId returns DataPoolAccessPolicyDataDataPool.Id, and is useful for accessing the field via an interface.
func (v *DataPoolAccessPolicyDataDataPool) GetId() string { return v.Id }

// DataPoolAccessPolicyDataPoolAccessPolicy includes the requested fields of the GraphQL type DataPoolAccessPolicy.
type DataPoolAccessPolicyDataPoolAccessPolicy struct {
	DataPoolAccessPolicyData `json:"-"`
	// Applications that are assigned to this Data Pool Access Policy.
	Applications *DataPoolAccessPolicyDataPoolAccessPolicyApplicationsApplicationConnection `json:"applications"`
}

// GetApplications returns DataPoolAccessPolicyDataPoolAccessPolicy.Applications, and is useful for accessing the field via an interface.
func (v *DataPoolAccessPolicyDataPoolAccessPolicy) GetApplications() *DataPoolAccessPolicyDataPoolAccessPolicyApplicationsApplicationConnection {
	return v.Applications
}

// GetId returns DataPoolAccessPolicyDataPoolAccessPolicy.Id, and is useful for accessing the field via an interface.
func (v *DataPoolAccessPolicyDataPoolAccessPolicy) GetId() string {
	return v.DataPoolAccessPolicyData.Id
}

// GetColumns returns DataPoolAccessPolicyDataPoolAccessPolicy.Columns, and is useful for accessing the field via an interface.
func (v *DataPoolAccessPolicyDataPoolAccessPolicy) GetColumns() []string {
	return v.DataPoolAccessPolicyData.Columns
}

// GetRows returns DataPoolAccessPolicyDataPoolAccessPolicy.Rows, and is useful for accessing the field via an interface.
func (v *DataPoolAccessPolicyDataPoolAccessPolicy) GetRows() []*DataPoolAccessPolicyDataRowsFilter {
	return v.DataPoolAccessPolicyData.Rows
}

// GetDataPool returns DataPoolAccessPolicyDataPoolAccessPolicy.DataPool, and is useful for accessing the field via an interface.
func (v *DataPoolAccessPolicyDataPoolAccessPolicy) GetDataPool() *DataPoolAccessPolicyDataDataPool {
	return v.DataPoolAccessPolicyData.DataPool
}

// GetUniqueName returns DataPoolAccessPolicyDataPoolAccessPolicy.UniqueName, and is useful for accessing the field via an interface.
func (v *DataPoolAccessPolicyDataPoolAccessPolicy) GetUniqueName() string {
	return v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.UniqueName
}

// GetDescription returns DataPoolAccessPolicyDataPoolAccessPolicy.Description, and is useful for accessing the field via an interface.
func (v *DataPoolAccessPolicyDataPoolAccessPolicy) GetDescription() string {
	return v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.Description
}

// GetAccount returns DataPoolAccessPolicyDataPoolAccessPolicy.Account, and is useful for accessing the field via an interface.
func (v *DataPoolAccessPolicyDataPoolAccessPolicy) GetAccount() *CommonDataAccount {
	return v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.Account
}

// GetEnvironment returns DataPoolAccessPolicyDataPoolAccessPolicy.Environment, and is useful for accessing the field via an interface.
func (v *DataPoolAccessPolicyDataPoolAccessPolicy) GetEnvironment() *CommonDataEnvironment {
	return v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.Environment
}

// GetCreatedAt returns DataPoolAccessPolicyDataPoolAccessPolicy.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataPoolAccessPolicyDataPoolAccessPolicy) GetCreatedAt() time.Time {
	return v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.CreatedAt
}

// GetModifiedAt returns DataPoolAccessPolicyDataPoolAccessPolicy.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataPoolAccessPolicyDataPoolAccessPolicy) GetModifiedAt() time.Time {
	return v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.ModifiedAt
}

// GetCreatedBy returns DataPoolAccessPolicyDataPoolAccessPolicy.CreatedBy, and is useful for accessing the field via an interface.
func (v *DataPoolAccessPolicyDataPoolAccessPolicy) GetCreatedBy() string {
	return v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.CreatedBy
}

// GetModifiedBy returns DataPoolAccessPolicyDataPoolAccessPolicy.ModifiedBy, and is useful for accessing the field via an interface.
func (v *DataPoolAccessPolicyDataPoolAccessPolicy) GetModifiedBy() string {
	return v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.ModifiedBy
}

func (v *DataPoolAccessPolicyDataPoolAccessPolicy) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataPoolAccessPolicyDataPoolAccessPolicy
		graphql.NoUnmarshalJSON
	}
	firstPass.DataPoolAccessPolicyDataPoolAccessPolicy = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataPoolAccessPolicyData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataPoolAccessPolicyDataPoolAccessPolicy struct {
	Applications *DataPoolAccessPolicyDataPoolAccessPolicyApplicationsApplicationConnection `json:"applications"`

	Id string `json:"id"`

	Columns []string `json:"columns"`

	Rows []*DataPoolAccessPolicyDataRowsFilter `json:"rows"`

	DataPool *DataPoolAccessPolicyDataDataPool `json:"dataPool"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *DataPoolAccessPolicyDataPoolAccessPolicy) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataPoolAccessPolicyDataPoolAccessPolicy) __premarshalJSON() (*__premarshalDataPoolAccessPolicyDataPoolAccessPolicy, error) {
	var retval __premarshalDataPoolAccessPolicyDataPoolAccessPolicy

	retval.Applications = v.Applications
	retval.Id = v.DataPoolAccessPolicyData.Id
	retval.Columns = v.DataPoolAccessPolicyData.Columns
	retval.Rows = v.DataPoolAccessPolicyData.Rows
	retval.DataPool = v.DataPoolAccessPolicyData.DataPool
	retval.UniqueName = v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.UniqueName
	retval.Description = v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.Description
	retval.Account = v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.Account
	retval.Environment = v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.Environment
	retval.CreatedAt = v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.CreatedAt
	retval.ModifiedAt = v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.ModifiedAt
	retval.CreatedBy = v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.CreatedBy
	retval.ModifiedBy = v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.ModifiedBy
	return &retval, nil
}

// DataPoolAccessPolicyDataPoolAccessPolicyApplicationsApplicationConnection includes the requested fields of the GraphQL type ApplicationConnection.
// The GraphQL type's documentation follows.
//
// The Application connection object.
//
// Learn more about [pagination in GraphQL](https://www.propeldata.com/docs/api/pagination).
type DataPoolAccessPolicyDataPoolAccessPolicyApplicationsApplicationConnection struct {
	// The Application connection's nodes.
	Nodes []*DataPoolAccessPolicyDataPoolAccessPolicyApplicationsApplicationConnectionNodesApplication `json:"nodes"`
}

// GetNodes returns DataPoolAccessPolicyDataPoolAccessPolicyApplicationsApplicationConnection.Nodes, and is useful for accessing the field via an interface.
func (v *DataPoolAccessPolicyDataPoolAccessPolicyApplicationsApplicationConnection) GetNodes() []*DataPoolAccessPolicyDataPoolAccessPolicyApplicationsApplicationConnectionNodesApplication {
	return v.Nodes
}

// DataPoolAccessPolicyDataPoolAccessPolicyApplicationsApplicationConnectionNodesApplication includes the requested fields of the GraphQL type Application.
// The GraphQL type's documentation follows.
//
// The Application object.
//
// Propel Applications represent the web or mobile app you are building. They provide the API credentials that allow your client- or server-side app to access the Propel API. The Application's Propeller determines the speed and cost of your Metric Queries.
//
// [Learn more about Applications](https://www.propeldata.com/docs/applications).
type DataPoolAccessPolicyDataPoolAccessPolicyApplicationsApplicationConnectionNodesApplication struct {
	// The Application's unique identifier.
	Id string `json:"id"`
}

// GetId returns DataPoolAccessPolicyDataPoolAccessPolicyApplicationsApplicationConnectionNodesApplication.Id, and is useful for accessing the field via an interface.
func (v *DataPoolAccessPolicyDataPoolAccessPolicyApplicationsApplicationConnectionNodesApplication) GetId() string {
	return v.Id
}

// DataPoolAccessPolicyDataRowsFilter includes the requested fields of the GraphQL type Filter.
// The GraphQL type's documentation follows.
//
// The fields of a filter.
//
// You can construct more complex filters using `and` and `or`. For example, to construct a filter equivalent to
//
// ```
// (value > 0 AND value <= 100) OR status = "confirmed"
// ```
//
// you could write
//
// ```
// {
// "column": "value",
// "operator": "GREATER_THAN",
// "value": "0",
// "and": [{
// "column": "value",
// "operator": "LESS_THAN_OR_EQUAL_TO",
// "value": "0"
// }],
// "or": [{
// "column": "status",
// "operator": "EQUALS",
// "value": "confirmed"
// }]
// }
// ```
//
// Note that `and` takes precedence over `or`.
type DataPoolAccessPolicyDataRowsFilter struct {
	FilterData `json:"-"`
}

// GetColumn returns DataPoolAccessPolicyDataRowsFilter.Column, and is useful for accessing the field via an interface.
func (v *DataPoolAccessPolicyDataRowsFilter) GetColumn() string { return v.FilterData.Column }

// GetOperator returns DataPoolAccessPolicyDataRowsFilter.Operator, and is useful for accessing the field via an interface.
func (v *DataPoolAccessPolicyDataRowsFilter) GetOperator() FilterOperator {
	return v.FilterData.Operator
}

// GetValue returns DataPoolAccessPolicyDataRowsFilter.Value, and is useful for accessing the field via an interface.
func (v *DataPoolAccessPolicyDataRowsFilter) GetValue() *string { return v.FilterData.Value }

// GetAnd returns DataPoolAccessPolicyDataRowsFilter.And, and is useful for accessing the field via an interface.
func (v *DataPoolAccessPolicyDataRowsFilter) GetAnd() []*FilterDataAndFilter { return v.FilterData.And }

// GetOr returns DataPoolAccessPolicyDataRowsFilter.Or, and is useful for accessing the field via an interface.
func (v *DataPoolAccessPolicyDataRowsFilter) GetOr() []*FilterDataOrFilter { return v.FilterData.Or }

func (v *DataPoolAccessPolicyDataRowsFilter) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataPoolAccessPolicyDataRowsFilter
		graphql.NoUnmarshalJSON
	}
	firstPass.DataPoolAccessPolicyDataRowsFilter = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.FilterData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataPoolAccessPolicyDataRowsFilter struct {
	Column string `json:"column"`

	Operator FilterOperator `json:"operator"`

	Value *string `json:"value"`

	And []*FilterDataAndFilter `json:"and"`

	Or []*FilterDataOrFilter `json:"or"`
}

func (v *DataPoolAccessPolicyDataRowsFilter) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataPoolAccessPolicyDataRowsFilter) __premarshalJSON() (*__premarshalDataPoolAccessPolicyDataRowsFilter, error) {
	var retval __premarshalDataPoolAccessPolicyDataRowsFilter

	retval.Column = v.FilterData.Column
	retval.Operator = v.FilterData.Operator
	retval.Value = v.FilterData.Value
	retval.And = v.FilterData.And
	retval.Or = v.FilterData.Or
	return &retval, nil
}

// DataPoolAccessPolicyResponse is returned by DataPoolAccessPolicy on success.
type DataPoolAccessPolicyResponse struct {
	// This query returns the Data Pool Access Policy specified by the given ID.
	//
	// A Data Pool Access Policy limits the data that Applications can access within a Data Pool.
	DataPoolAccessPolicy *DataPoolAccessPolicyDataPoolAccessPolicy `json:"dataPoolAccessPolicy"`
}

// GetDataPoolAccessPolicy returns DataPoolAccessPolicyResponse.DataPoolAccessPolicy, and is useful for accessing the field via an interface.
func (v *DataPoolAccessPolicyResponse) GetDataPoolAccessPolicy() *DataPoolAccessPolicyDataPoolAccessPolicy {
	return v.DataPoolAccessPolicy
}

// DataPoolByNameDataPool includes the requested fields of the GraphQL type DataPool.
// The GraphQL type's documentation follows.
//
// The Data Pool object. Data Pools are Propel's high-speed data store and cache
//
// [Learn more about Data Pools](https://www.propeldata.com/docs/connect-your-data#key-concept-2-data-pools).
type DataPoolByNameDataPool struct {
	DataPoolData `json:"-"`
}

// GetId returns DataPoolByNameDataPool.Id, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetId() string { return v.DataPoolData.Id }

// GetDataSource returns DataPoolByNameDataPool.DataSource, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetDataSource() *DataPoolDataDataSource {
	return v.DataPoolData.DataSource
}

// GetStatus returns DataPoolByNameDataPool.Status, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetStatus() DataPoolStatus { return v.DataPoolData.Status }

// GetError returns DataPoolByNameDataPool.Error, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetError() *DataPoolDataError { return v.DataPoolData.Error }

// GetTable returns DataPoolByNameDataPool.Table, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetTable() string { return v.DataPoolData.Table }

// GetTenant returns DataPoolByNameDataPool.Tenant, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetTenant() *DataPoolDataTenant { return v.DataPoolData.Tenant }

// GetTimestamp returns DataPoolByNameDataPool.Timestamp, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetTimestamp() *DataPoolDataTimestamp {
	return v.DataPoolData.Timestamp
}

// GetColumns returns DataPoolByNameDataPool.Columns, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetColumns() *DataPoolDataColumnsDataPoolColumnConnection {
	return v.DataPoolData.Columns
}

// GetUniqueId returns DataPoolByNameDataPool.UniqueId, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetUniqueId() *DataPoolDataUniqueId { return v.DataPoolData.UniqueId }

// GetSyncing returns DataPoolByNameDataPool.Syncing, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetSyncing() *DataPoolDataSyncingDataPoolSyncing {
	return v.DataPoolData.Syncing
}

// GetAvailableMeasures returns DataPoolByNameDataPool.AvailableMeasures, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetAvailableMeasures() *DataPoolDataAvailableMeasuresDataPoolColumnConnection {
	return v.DataPoolData.AvailableMeasures
}

// GetSetupTasks returns DataPoolByNameDataPool.SetupTasks, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetSetupTasks() []*DataPoolDataSetupTasksDataPoolSetupTask {
	return v.DataPoolData.SetupTasks
}

// GetSyncs returns DataPoolByNameDataPool.Syncs, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetSyncs() *DataPoolDataSyncsSyncConnection {
	return v.DataPoolData.Syncs
}

// GetDataPoolAccessPolicies returns DataPoolByNameDataPool.DataPoolAccessPolicies, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetDataPoolAccessPolicies() *DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnection {
	return v.DataPoolData.DataPoolAccessPolicies
}

// GetAccessControlEnabled returns DataPoolByNameDataPool.AccessControlEnabled, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetAccessControlEnabled() bool {
	return v.DataPoolData.AccessControlEnabled
}

// GetUniqueName returns DataPoolByNameDataPool.UniqueName, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetUniqueName() string {
	return v.DataPoolData.CommonDataDataPool.UniqueName
}

// GetDescription returns DataPoolByNameDataPool.Description, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetDescription() string {
	return v.DataPoolData.CommonDataDataPool.Description
}

// GetAccount returns DataPoolByNameDataPool.Account, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetAccount() *CommonDataAccount {
	return v.DataPoolData.CommonDataDataPool.Account
}

// GetEnvironment returns DataPoolByNameDataPool.Environment, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetEnvironment() *CommonDataEnvironment {
	return v.DataPoolData.CommonDataDataPool.Environment
}

// GetCreatedAt returns DataPoolByNameDataPool.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetCreatedAt() time.Time {
	return v.DataPoolData.CommonDataDataPool.CreatedAt
}

// GetModifiedAt returns DataPoolByNameDataPool.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetModifiedAt() time.Time {
	return v.DataPoolData.CommonDataDataPool.ModifiedAt
}

// GetCreatedBy returns DataPoolByNameDataPool.CreatedBy, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetCreatedBy() string {
	return v.DataPoolData.CommonDataDataPool.CreatedBy
}

// GetModifiedBy returns DataPoolByNameDataPool.ModifiedBy, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetModifiedBy() string {
	return v.DataPoolData.CommonDataDataPool.ModifiedBy
}

func (v *DataPoolByNameDataPool) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataPoolByNameDataPool
		graphql.NoUnmarshalJSON
	}
	firstPass.DataPoolByNameDataPool = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataPoolData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataPoolByNameDataPool struct {
	Id string `json:"id"`

	DataSource *DataPoolDataDataSource `json:"dataSource"`

	Status DataPoolStatus `json:"status"`

	Error *DataPoolDataError `json:"error"`

	Table string `json:"table"`

	Tenant *DataPoolDataTenant `json:"tenant"`

	Timestamp *DataPoolDataTimestamp `json:"timestamp"`

	Columns *DataPoolDataColumnsDataPoolColumnConnection `json:"columns"`

	UniqueId *DataPoolDataUniqueId `json:"uniqueId"`

	Syncing *DataPoolDataSyncingDataPoolSyncing `json:"syncing"`

	AvailableMeasures *DataPoolDataAvailableMeasuresDataPoolColumnConnection `json:"availableMeasures"`

	SetupTasks []*DataPoolDataSetupTasksDataPoolSetupTask `json:"setupTasks"`

	Syncs *DataPoolDataSyncsSyncConnection `json:"syncs"`

	DataPoolAccessPolicies *DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnection `json:"dataPoolAccessPolicies"`

	AccessControlEnabled bool `json:"accessControlEnabled"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *DataPoolByNameDataPool) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataPoolByNameDataPool) __premarshalJSON() (*__premarshalDataPoolByNameDataPool, error) {
	var retval __premarshalDataPoolByNameDataPool

	retval.Id = v.DataPoolData.Id
	retval.DataSource = v.DataPoolData.DataSource
	retval.Status = v.DataPoolData.Status
	retval.Error = v.DataPoolData.Error
	retval.Table = v.DataPoolData.Table
	retval.Tenant = v.DataPoolData.Tenant
	retval.Timestamp = v.DataPoolData.Timestamp
	retval.Columns = v.DataPoolData.Columns
	retval.UniqueId = v.DataPoolData.UniqueId
	retval.Syncing = v.DataPoolData.Syncing
	retval.AvailableMeasures = v.DataPoolData.AvailableMeasures
	retval.SetupTasks = v.DataPoolData.SetupTasks
	retval.Syncs = v.DataPoolData.Syncs
	retval.DataPoolAccessPolicies = v.DataPoolData.DataPoolAccessPolicies
	retval.AccessControlEnabled = v.DataPoolData.AccessControlEnabled
	retval.UniqueName = v.DataPoolData.CommonDataDataPool.UniqueName
	retval.Description = v.DataPoolData.CommonDataDataPool.Description
	retval.Account = v.DataPoolData.CommonDataDataPool.Account
	retval.Environment = v.DataPoolData.CommonDataDataPool.Environment
	retval.CreatedAt = v.DataPoolData.CommonDataDataPool.CreatedAt
	retval.ModifiedAt = v.DataPoolData.CommonDataDataPool.ModifiedAt
	retval.CreatedBy = v.DataPoolData.CommonDataDataPool.CreatedBy
	retval.ModifiedBy = v.DataPoolData.CommonDataDataPool.ModifiedBy
	return &retval, nil
}

// DataPoolByNameResponse is returned by DataPoolByName on success.
type DataPoolByNameResponse struct {
	// This query returns the Data Pool specified by the given unique name.
	//
	// A Data Pool is a cached table hydrated from your data warehouse optimized for high-concurrency and low-latency queries.
	DataPool *DataPoolByNameDataPool `json:"dataPool"`
}

// GetDataPool returns DataPoolByNameResponse.DataPool, and is useful for accessing the field via an interface.
func (v *DataPoolByNameResponse) GetDataPool() *DataPoolByNameDataPool { return v.DataPool }

// DataPoolColumnData includes the GraphQL fields of DataPoolColumn requested by the fragment DataPoolColumnData.
type DataPoolColumnData struct {
	// The name of the Data Source column that this Data Pool column derives from.
	ColumnName string `json:"columnName"`
	// The Data Pool column's type. This may differ from the corresponding Data Source column's type.
	Type ColumnType `json:"type"`
	// Whether the column is nullable, meaning whether it accepts a null value.
	IsNullable bool `json:"isNullable"`
}

// GetColumnName returns DataPoolColumnData.ColumnName, and is useful for accessing the field via an interface.
func (v *DataPoolColumnData) GetColumnName() string { return v.ColumnName }

// GetType returns DataPoolColumnData.Type, and is useful for accessing the field via an interface.
func (v *DataPoolColumnData) GetType() ColumnType { return v.Type }

// GetIsNullable returns DataPoolColumnData.IsNullable, and is useful for accessing the field via an interface.
func (v *DataPoolColumnData) GetIsNullable() bool { return v.IsNullable }

type DataPoolColumnInput struct {
	// The name of the Data Source column that this Data Pool column derives from.
	ColumnName string `json:"columnName"`
	// The Data Pool column's type. This may differ from the corresponding Data Source column's type.
	Type ColumnType `json:"type"`
	// The ClickHouse type to use when `type` is set to `CLICKHOUSE`.
	ClickHouseType *string `json:"clickHouseType"`
	// Whether the column is nullable, meaning whether it accepts a null value.
	IsNullable bool `json:"isNullable"`
}

// GetColumnName returns DataPoolColumnInput.ColumnName, and is useful for accessing the field via an interface.
func (v *DataPoolColumnInput) GetColumnName() string { return v.ColumnName }

// GetType returns DataPoolColumnInput.Type, and is useful for accessing the field via an interface.
func (v *DataPoolColumnInput) GetType() ColumnType { return v.Type }

// GetClickHouseType returns DataPoolColumnInput.ClickHouseType, and is useful for accessing the field via an interface.
func (v *DataPoolColumnInput) GetClickHouseType() *string { return v.ClickHouseType }

// GetIsNullable returns DataPoolColumnInput.IsNullable, and is useful for accessing the field via an interface.
func (v *DataPoolColumnInput) GetIsNullable() bool { return v.IsNullable }

// DataPoolData includes the GraphQL fields of DataPool requested by the fragment DataPoolData.
// The GraphQL type's documentation follows.
//
// The Data Pool object. Data Pools are Propel's high-speed data store and cache
//
// [Learn more about Data Pools](https://www.propeldata.com/docs/connect-your-data#key-concept-2-data-pools).
type DataPoolData struct {
	// The Data Pool's unique identifier.
	Id                 string `json:"id"`
	CommonDataDataPool `json:"-"`
	// The Data Pool's Data Source.
	DataSource *DataPoolDataDataSource `json:"dataSource"`
	// The Data Pool's status.
	Status DataPoolStatus     `json:"status"`
	Error  *DataPoolDataError `json:"error"`
	// The name of the Data Pool's table.
	Table string `json:"table"`
	// The Data Pool's tenant ID, if configured.
	Tenant *DataPoolDataTenant `json:"tenant"`
	// The Data Pool's primary timestamp column, if any.
	Timestamp *DataPoolDataTimestamp `json:"timestamp"`
	// The Data Pool's columns.
	Columns *DataPoolDataColumnsDataPoolColumnConnection `json:"columns"`
	// The Data Pool's unique ID column. Propel uses the primary timestamp and a unique ID to compose a primary key for determining whether records should be inserted, deleted, or updated within the Data Pool.
	UniqueId *DataPoolDataUniqueId `json:"uniqueId"`
	// Settings related to Data Pool syncing.
	Syncing *DataPoolDataSyncingDataPoolSyncing `json:"syncing"`
	// The list of measures (numeric columns) in the Data Pool.
	AvailableMeasures *DataPoolDataAvailableMeasuresDataPoolColumnConnection `json:"availableMeasures"`
	// A list of setup tasks performed on the Data Pool during its most recent setup attempt.
	SetupTasks []*DataPoolDataSetupTasksDataPoolSetupTask `json:"setupTasks"`
	// The list of Syncs of the Data Pool.
	Syncs *DataPoolDataSyncsSyncConnection `json:"syncs"`
	// A paginated list of Data Pool Access Policies available on the Data Pool.
	DataPoolAccessPolicies *DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnection `json:"dataPoolAccessPolicies"`
	// Whether the Data Pool has access control enabled or not.
	//
	// If the Data Pool has access control enabled, Applications must be assigned Data Pool Access
	// Policies in order to query the Data Pool and its Metrics.
	AccessControlEnabled bool `json:"accessControlEnabled"`
}

// GetId returns DataPoolData.Id, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetId() string { return v.Id }

// GetDataSource returns DataPoolData.DataSource, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetDataSource() *DataPoolDataDataSource { return v.DataSource }

// GetStatus returns DataPoolData.Status, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetStatus() DataPoolStatus { return v.Status }

// GetError returns DataPoolData.Error, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetError() *DataPoolDataError { return v.Error }

// GetTable returns DataPoolData.Table, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetTable() string { return v.Table }

// GetTenant returns DataPoolData.Tenant, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetTenant() *DataPoolDataTenant { return v.Tenant }

// GetTimestamp returns DataPoolData.Timestamp, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetTimestamp() *DataPoolDataTimestamp { return v.Timestamp }

// GetColumns returns DataPoolData.Columns, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetColumns() *DataPoolDataColumnsDataPoolColumnConnection { return v.Columns }

// GetUniqueId returns DataPoolData.UniqueId, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetUniqueId() *DataPoolDataUniqueId { return v.UniqueId }

// GetSyncing returns DataPoolData.Syncing, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetSyncing() *DataPoolDataSyncingDataPoolSyncing { return v.Syncing }

// GetAvailableMeasures returns DataPoolData.AvailableMeasures, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetAvailableMeasures() *DataPoolDataAvailableMeasuresDataPoolColumnConnection {
	return v.AvailableMeasures
}

// GetSetupTasks returns DataPoolData.SetupTasks, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetSetupTasks() []*DataPoolDataSetupTasksDataPoolSetupTask {
	return v.SetupTasks
}

// GetSyncs returns DataPoolData.Syncs, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetSyncs() *DataPoolDataSyncsSyncConnection { return v.Syncs }

// GetDataPoolAccessPolicies returns DataPoolData.DataPoolAccessPolicies, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetDataPoolAccessPolicies() *DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnection {
	return v.DataPoolAccessPolicies
}

// GetAccessControlEnabled returns DataPoolData.AccessControlEnabled, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetAccessControlEnabled() bool { return v.AccessControlEnabled }

// GetUniqueName returns DataPoolData.UniqueName, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetUniqueName() string { return v.CommonDataDataPool.UniqueName }

// GetDescription returns DataPoolData.Description, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetDescription() string { return v.CommonDataDataPool.Description }

// GetAccount returns DataPoolData.Account, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetAccount() *CommonDataAccount { return v.CommonDataDataPool.Account }

// GetEnvironment returns DataPoolData.Environment, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetEnvironment() *CommonDataEnvironment {
	return v.CommonDataDataPool.Environment
}

// GetCreatedAt returns DataPoolData.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetCreatedAt() time.Time { return v.CommonDataDataPool.CreatedAt }

// GetModifiedAt returns DataPoolData.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetModifiedAt() time.Time { return v.CommonDataDataPool.ModifiedAt }

// GetCreatedBy returns DataPoolData.CreatedBy, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetCreatedBy() string { return v.CommonDataDataPool.CreatedBy }

// GetModifiedBy returns DataPoolData.ModifiedBy, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetModifiedBy() string { return v.CommonDataDataPool.ModifiedBy }

func (v *DataPoolData) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataPoolData
		graphql.NoUnmarshalJSON
	}
	firstPass.DataPoolData = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CommonDataDataPool)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataPoolData struct {
	Id string `json:"id"`

	DataSource *DataPoolDataDataSource `json:"dataSource"`

	Status DataPoolStatus `json:"status"`

	Error *DataPoolDataError `json:"error"`

	Table string `json:"table"`

	Tenant *DataPoolDataTenant `json:"tenant"`

	Timestamp *DataPoolDataTimestamp `json:"timestamp"`

	Columns *DataPoolDataColumnsDataPoolColumnConnection `json:"columns"`

	UniqueId *DataPoolDataUniqueId `json:"uniqueId"`

	Syncing *DataPoolDataSyncingDataPoolSyncing `json:"syncing"`

	AvailableMeasures *DataPoolDataAvailableMeasuresDataPoolColumnConnection `json:"availableMeasures"`

	SetupTasks []*DataPoolDataSetupTasksDataPoolSetupTask `json:"setupTasks"`

	Syncs *DataPoolDataSyncsSyncConnection `json:"syncs"`

	DataPoolAccessPolicies *DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnection `json:"dataPoolAccessPolicies"`

	AccessControlEnabled bool `json:"accessControlEnabled"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *DataPoolData) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataPoolData) __premarshalJSON() (*__premarshalDataPoolData, error) {
	var retval __premarshalDataPoolData

	retval.Id = v.Id
	retval.DataSource = v.DataSource
	retval.Status = v.Status
	retval.Error = v.Error
	retval.Table = v.Table
	retval.Tenant = v.Tenant
	retval.Timestamp = v.Timestamp
	retval.Columns = v.Columns
	retval.UniqueId = v.UniqueId
	retval.Syncing = v.Syncing
	retval.AvailableMeasures = v.AvailableMeasures
	retval.SetupTasks = v.SetupTasks
	retval.Syncs = v.Syncs
	retval.DataPoolAccessPolicies = v.DataPoolAccessPolicies
	retval.AccessControlEnabled = v.AccessControlEnabled
	retval.UniqueName = v.CommonDataDataPool.UniqueName
	retval.Description = v.CommonDataDataPool.Description
	retval.Account = v.CommonDataDataPool.Account
	retval.Environment = v.CommonDataDataPool.Environment
	retval.CreatedAt = v.CommonDataDataPool.CreatedAt
	retval.ModifiedAt = v.CommonDataDataPool.ModifiedAt
	retval.CreatedBy = v.CommonDataDataPool.CreatedBy
	retval.ModifiedBy = v.CommonDataDataPool.ModifiedBy
	return &retval, nil
}

// DataPoolDataAvailableMeasuresDataPoolColumnConnection includes the requested fields of the GraphQL type DataPoolColumnConnection.
// The GraphQL type's documentation follows.
//
// The Data Pool column connection object.
//
// Learn more about [pagination in GraphQL](https://www.propeldata.com/docs/api/pagination).
type DataPoolDataAvailableMeasuresDataPoolColumnConnection struct {
	// The Data Pool column connection's nodes.
	Nodes []*DataPoolDataAvailableMeasuresDataPoolColumnConnectionNodesDataPoolColumn `json:"nodes"`
}

// GetNodes returns DataPoolDataAvailableMeasuresDataPoolColumnConnection.Nodes, and is useful for accessing the field via an interface.
func (v *DataPoolDataAvailableMeasuresDataPoolColumnConnection) GetNodes() []*DataPoolDataAvailableMeasuresDataPoolColumnConnectionNodesDataPoolColumn {
	return v.Nodes
}

// DataPoolDataAvailableMeasuresDataPoolColumnConnectionNodesDataPoolColumn includes the requested fields of the GraphQL type DataPoolColumn.
type DataPoolDataAvailableMeasuresDataPoolColumnConnectionNodesDataPoolColumn struct {
	DataPoolColumnData `json:"-"`
}

// GetColumnName returns DataPoolDataAvailableMeasuresDataPoolColumnConnectionNodesDataPoolColumn.ColumnName, and is useful for accessing the field via an interface.
func (v *DataPoolDataAvailableMeasuresDataPoolColumnConnectionNodesDataPoolColumn) GetColumnName() string {
	return v.DataPoolColumnData.ColumnName
}

// GetType returns DataPoolDataAvailableMeasuresDataPoolColumnConnectionNodesDataPoolColumn.Type, and is useful for accessing the field via an interface.
func (v *DataPoolDataAvailableMeasuresDataPoolColumnConnectionNodesDataPoolColumn) GetType() ColumnType {
	return v.DataPoolColumnData.Type
}

// GetIsNullable returns DataPoolDataAvailableMeasuresDataPoolColumnConnectionNodesDataPoolColumn.IsNullable, and is useful for accessing the field via an interface.
func (v *DataPoolDataAvailableMeasuresDataPoolColumnConnectionNodesDataPoolColumn) GetIsNullable() bool {
	return v.DataPoolColumnData.IsNullable
}

func (v *DataPoolDataAvailableMeasuresDataPoolColumnConnectionNodesDataPoolColumn) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataPoolDataAvailableMeasuresDataPoolColumnConnectionNodesDataPoolColumn
		graphql.NoUnmarshalJSON
	}
	firstPass.DataPoolDataAvailableMeasuresDataPoolColumnConnectionNodesDataPoolColumn = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataPoolColumnData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataPoolDataAvailableMeasuresDataPoolColumnConnectionNodesDataPoolColumn struct {
	ColumnName string `json:"columnName"`

	Type ColumnType `json:"type"`

	IsNullable bool `json:"isNullable"`
}

func (v *DataPoolDataAvailableMeasuresDataPoolColumnConnectionNodesDataPoolColumn) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataPoolDataAvailableMeasuresDataPoolColumnConnectionNodesDataPoolColumn) __premarshalJSON() (*__premarshalDataPoolDataAvailableMeasuresDataPoolColumnConnectionNodesDataPoolColumn, error) {
	var retval __premarshalDataPoolDataAvailableMeasuresDataPoolColumnConnectionNodesDataPoolColumn

	retval.ColumnName = v.DataPoolColumnData.ColumnName
	retval.Type = v.DataPoolColumnData.Type
	retval.IsNullable = v.DataPoolColumnData.IsNullable
	return &retval, nil
}

// DataPoolDataColumnsDataPoolColumnConnection includes the requested fields of the GraphQL type DataPoolColumnConnection.
// The GraphQL type's documentation follows.
//
// The Data Pool column connection object.
//
// Learn more about [pagination in GraphQL](https://www.propeldata.com/docs/api/pagination).
type DataPoolDataColumnsDataPoolColumnConnection struct {
	// The Data Pool column connection's nodes.
	Nodes []*DataPoolDataColumnsDataPoolColumnConnectionNodesDataPoolColumn `json:"nodes"`
}

// GetNodes returns DataPoolDataColumnsDataPoolColumnConnection.Nodes, and is useful for accessing the field via an interface.
func (v *DataPoolDataColumnsDataPoolColumnConnection) GetNodes() []*DataPoolDataColumnsDataPoolColumnConnectionNodesDataPoolColumn {
	return v.Nodes
}

// DataPoolDataColumnsDataPoolColumnConnectionNodesDataPoolColumn includes the requested fields of the GraphQL type DataPoolColumn.
type DataPoolDataColumnsDataPoolColumnConnectionNodesDataPoolColumn struct {
	DataPoolColumnData `json:"-"`
}

// GetColumnName returns DataPoolDataColumnsDataPoolColumnConnectionNodesDataPoolColumn.ColumnName, and is useful for accessing the field via an interface.
func (v *DataPoolDataColumnsDataPoolColumnConnectionNodesDataPoolColumn) GetColumnName() string {
	return v.DataPoolColumnData.ColumnName
}

// GetType returns DataPoolDataColumnsDataPoolColumnConnectionNodesDataPoolColumn.Type, and is useful for accessing the field via an interface.
func (v *DataPoolDataColumnsDataPoolColumnConnectionNodesDataPoolColumn) GetType() ColumnType {
	return v.DataPoolColumnData.Type
}

// GetIsNullable returns DataPoolDataColumnsDataPoolColumnConnectionNodesDataPoolColumn.IsNullable, and is useful for accessing the field via an interface.
func (v *DataPoolDataColumnsDataPoolColumnConnectionNodesDataPoolColumn) GetIsNullable() bool {
	return v.DataPoolColumnData.IsNullable
}

func (v *DataPoolDataColumnsDataPoolColumnConnectionNodesDataPoolColumn) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataPoolDataColumnsDataPoolColumnConnectionNodesDataPoolColumn
		graphql.NoUnmarshalJSON
	}
	firstPass.DataPoolDataColumnsDataPoolColumnConnectionNodesDataPoolColumn = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataPoolColumnData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataPoolDataColumnsDataPoolColumnConnectionNodesDataPoolColumn struct {
	ColumnName string `json:"columnName"`

	Type ColumnType `json:"type"`

	IsNullable bool `json:"isNullable"`
}

func (v *DataPoolDataColumnsDataPoolColumnConnectionNodesDataPoolColumn) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataPoolDataColumnsDataPoolColumnConnectionNodesDataPoolColumn) __premarshalJSON() (*__premarshalDataPoolDataColumnsDataPoolColumnConnectionNodesDataPoolColumn, error) {
	var retval __premarshalDataPoolDataColumnsDataPoolColumnConnectionNodesDataPoolColumn

	retval.ColumnName = v.DataPoolColumnData.ColumnName
	retval.Type = v.DataPoolColumnData.Type
	retval.IsNullable = v.DataPoolColumnData.IsNullable
	return &retval, nil
}

// DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnection includes the requested fields of the GraphQL type DataPoolAccessPolicyConnection.
// The GraphQL type's documentation follows.
//
// The Data Pool Access Policy connection object.
//
// Learn more about [pagination in GraphQL](https://www.propeldata.com/docs/api/pagination).
type DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnection struct {
	// The Data Pool Access Policy connection's nodes.
	Nodes []*DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnectionNodesDataPoolAccessPolicy `json:"nodes"`
}

// GetNodes returns DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnection.Nodes, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnection) GetNodes() []*DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnectionNodesDataPoolAccessPolicy {
	return v.Nodes
}

// DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnectionNodesDataPoolAccessPolicy includes the requested fields of the GraphQL type DataPoolAccessPolicy.
type DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnectionNodesDataPoolAccessPolicy struct {
	DataPoolAccessPolicyData `json:"-"`
}

// GetId returns DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnectionNodesDataPoolAccessPolicy.Id, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnectionNodesDataPoolAccessPolicy) GetId() string {
	return v.DataPoolAccessPolicyData.Id
}

// GetColumns returns DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnectionNodesDataPoolAccessPolicy.Columns, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnectionNodesDataPoolAccessPolicy) GetColumns() []string {
	return v.DataPoolAccessPolicyData.Columns
}

// GetRows returns DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnectionNodesDataPoolAccessPolicy.Rows, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnectionNodesDataPoolAccessPolicy) GetRows() []*DataPoolAccessPolicyDataRowsFilter {
	return v.DataPoolAccessPolicyData.Rows
}

// GetDataPool returns DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnectionNodesDataPoolAccessPolicy.DataPool, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnectionNodesDataPoolAccessPolicy) GetDataPool() *DataPoolAccessPolicyDataDataPool {
	return v.DataPoolAccessPolicyData.DataPool
}

// GetUniqueName returns DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnectionNodesDataPoolAccessPolicy.UniqueName, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnectionNodesDataPoolAccessPolicy) GetUniqueName() string {
	return v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.UniqueName
}

// GetDescription returns DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnectionNodesDataPoolAccessPolicy.Description, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnectionNodesDataPoolAccessPolicy) GetDescription() string {
	return v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.Description
}

// GetAccount returns DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnectionNodesDataPoolAccessPolicy.Account, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnectionNodesDataPoolAccessPolicy) GetAccount() *CommonDataAccount {
	return v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.Account
}

// GetEnvironment returns DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnectionNodesDataPoolAccessPolicy.Environment, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnectionNodesDataPoolAccessPolicy) GetEnvironment() *CommonDataEnvironment {
	return v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.Environment
}

// GetCreatedAt returns DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnectionNodesDataPoolAccessPolicy.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnectionNodesDataPoolAccessPolicy) GetCreatedAt() time.Time {
	return v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.CreatedAt
}

// GetModifiedAt returns DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnectionNodesDataPoolAccessPolicy.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnectionNodesDataPoolAccessPolicy) GetModifiedAt() time.Time {
	return v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.ModifiedAt
}

// GetCreatedBy returns DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnectionNodesDataPoolAccessPolicy.CreatedBy, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnectionNodesDataPoolAccessPolicy) GetCreatedBy() string {
	return v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.CreatedBy
}

// GetModifiedBy returns DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnectionNodesDataPoolAccessPolicy.ModifiedBy, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnectionNodesDataPoolAccessPolicy) GetModifiedBy() string {
	return v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.ModifiedBy
}

func (v *DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnectionNodesDataPoolAccessPolicy) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnectionNodesDataPoolAccessPolicy
		graphql.NoUnmarshalJSON
	}
	firstPass.DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnectionNodesDataPoolAccessPolicy = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataPoolAccessPolicyData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnectionNodesDataPoolAccessPolicy struct {
	Id string `json:"id"`

	Columns []string `json:"columns"`

	Rows []*DataPoolAccessPolicyDataRowsFilter `json:"rows"`

	DataPool *DataPoolAccessPolicyDataDataPool `json:"dataPool"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnectionNodesDataPoolAccessPolicy) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnectionNodesDataPoolAccessPolicy) __premarshalJSON() (*__premarshalDataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnectionNodesDataPoolAccessPolicy, error) {
	var retval __premarshalDataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnectionNodesDataPoolAccessPolicy

	retval.Id = v.DataPoolAccessPolicyData.Id
	retval.Columns = v.DataPoolAccessPolicyData.Columns
	retval.Rows = v.DataPoolAccessPolicyData.Rows
	retval.DataPool = v.DataPoolAccessPolicyData.DataPool
	retval.UniqueName = v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.UniqueName
	retval.Description = v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.Description
	retval.Account = v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.Account
	retval.Environment = v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.Environment
	retval.CreatedAt = v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.CreatedAt
	retval.ModifiedAt = v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.ModifiedAt
	retval.CreatedBy = v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.CreatedBy
	retval.ModifiedBy = v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.ModifiedBy
	return &retval, nil
}

// DataPoolDataDataSource includes the requested fields of the GraphQL type DataSource.
// The GraphQL type's documentation follows.
//
// The Data Source object.
//
// A Data Source is a connection to your data warehouse. It has the necessary connection details for Propel to access Snowflake or any other supported Data Source.
//
// [Learn more about Data Sources](https://www.propeldata.com/docs/data-sources).
type DataPoolDataDataSource struct {
	DataSourceData `json:"-"`
}

// GetId returns DataPoolDataDataSource.Id, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataSource) GetId() string { return v.DataSourceData.Id }

// GetType returns DataPoolDataDataSource.Type, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataSource) GetType() DataSourceType { return v.DataSourceData.Type }

// GetStatus returns DataPoolDataDataSource.Status, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataSource) GetStatus() DataSourceStatus { return v.DataSourceData.Status }

// GetError returns DataPoolDataDataSource.Error, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataSource) GetError() *DataSourceDataError { return v.DataSourceData.Error }

// GetDataPools returns DataPoolDataDataSource.DataPools, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataSource) GetDataPools() *DataSourceDataDataPoolsDataPoolConnection {
	return v.DataSourceData.DataPools
}

// GetConnectionSettings returns DataPoolDataDataSource.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataSource) GetConnectionSettings() DataSourceDataConnectionSettings {
	return v.DataSourceData.ConnectionSettings
}

// GetTables returns DataPoolDataDataSource.Tables, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataSource) GetTables() *DataSourceDataTablesTableConnection {
	return v.DataSourceData.Tables
}

// GetChecks returns DataPoolDataDataSource.Checks, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataSource) GetChecks() []*DataSourceDataChecksDataSourceCheck {
	return v.DataSourceData.Checks
}

// GetTableIntrospections returns DataPoolDataDataSource.TableIntrospections, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataSource) GetTableIntrospections() *DataSourceDataTableIntrospectionsTableIntrospectionConnection {
	return v.DataSourceData.TableIntrospections
}

// GetUniqueName returns DataPoolDataDataSource.UniqueName, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataSource) GetUniqueName() string {
	return v.DataSourceData.CommonDataDataSource.UniqueName
}

// GetDescription returns DataPoolDataDataSource.Description, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataSource) GetDescription() string {
	return v.DataSourceData.CommonDataDataSource.Description
}

// GetAccount returns DataPoolDataDataSource.Account, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataSource) GetAccount() *CommonDataAccount {
	return v.DataSourceData.CommonDataDataSource.Account
}

// GetEnvironment returns DataPoolDataDataSource.Environment, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataSource) GetEnvironment() *CommonDataEnvironment {
	return v.DataSourceData.CommonDataDataSource.Environment
}

// GetCreatedAt returns DataPoolDataDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataSource) GetCreatedAt() time.Time {
	return v.DataSourceData.CommonDataDataSource.CreatedAt
}

// GetModifiedAt returns DataPoolDataDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataSource) GetModifiedAt() time.Time {
	return v.DataSourceData.CommonDataDataSource.ModifiedAt
}

// GetCreatedBy returns DataPoolDataDataSource.CreatedBy, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataSource) GetCreatedBy() string {
	return v.DataSourceData.CommonDataDataSource.CreatedBy
}

// GetModifiedBy returns DataPoolDataDataSource.ModifiedBy, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataSource) GetModifiedBy() string {
	return v.DataSourceData.CommonDataDataSource.ModifiedBy
}

func (v *DataPoolDataDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataPoolDataDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.DataPoolDataDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataSourceData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataPoolDataDataSource struct {
	Id string `json:"id"`

	Type DataSourceType `json:"type"`

	Status DataSourceStatus `json:"status"`

	Error *DataSourceDataError `json:"error"`

	DataPools *DataSourceDataDataPoolsDataPoolConnection `json:"dataPools"`

	ConnectionSettings json.RawMessage `json:"connectionSettings"`

	Tables *DataSourceDataTablesTableConnection `json:"tables"`

	Checks []*DataSourceDataChecksDataSourceCheck `json:"checks"`

	TableIntrospections *DataSourceDataTableIntrospectionsTableIntrospectionConnection `json:"tableIntrospections"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *DataPoolDataDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataPoolDataDataSource) __premarshalJSON() (*__premarshalDataPoolDataDataSource, error) {
	var retval __premarshalDataPoolDataDataSource

	retval.Id = v.DataSourceData.Id
	retval.Type = v.DataSourceData.Type
	retval.Status = v.DataSourceData.Status
	retval.Error = v.DataSourceData.Error
	retval.DataPools = v.DataSourceData.DataPools
	{

		dst := &retval.ConnectionSettings
		src := v.DataSourceData.ConnectionSettings
		var err error
		*dst, err = __marshalDataSourceDataConnectionSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal DataPoolDataDataSource.DataSourceData.ConnectionSettings: %w", err)
		}
	}
	retval.Tables = v.DataSourceData.Tables
	retval.Checks = v.DataSourceData.Checks
	retval.TableIntrospections = v.DataSourceData.TableIntrospections
	retval.UniqueName = v.DataSourceData.CommonDataDataSource.UniqueName
	retval.Description = v.DataSourceData.CommonDataDataSource.Description
	retval.Account = v.DataSourceData.CommonDataDataSource.Account
	retval.Environment = v.DataSourceData.CommonDataDataSource.Environment
	retval.CreatedAt = v.DataSourceData.CommonDataDataSource.CreatedAt
	retval.ModifiedAt = v.DataSourceData.CommonDataDataSource.ModifiedAt
	retval.CreatedBy = v.DataSourceData.CommonDataDataSource.CreatedBy
	retval.ModifiedBy = v.DataSourceData.CommonDataDataSource.ModifiedBy
	return &retval, nil
}

// DataPoolDataError includes the requested fields of the GraphQL type Error.
// The GraphQL type's documentation follows.
//
// The error object.
type DataPoolDataError struct {
	// The error message.
	Message string `json:"message"`
}

// GetMessage returns DataPoolDataError.Message, and is useful for accessing the field via an interface.
func (v *DataPoolDataError) GetMessage() string { return v.Message }

// DataPoolDataPool includes the requested fields of the GraphQL type DataPool.
// The GraphQL type's documentation follows.
//
// The Data Pool object. Data Pools are Propel's high-speed data store and cache
//
// [Learn more about Data Pools](https://www.propeldata.com/docs/connect-your-data#key-concept-2-data-pools).
type DataPoolDataPool struct {
	DataPoolData `json:"-"`
}

// GetId returns DataPoolDataPool.Id, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetId() string { return v.DataPoolData.Id }

// GetDataSource returns DataPoolDataPool.DataSource, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetDataSource() *DataPoolDataDataSource { return v.DataPoolData.DataSource }

// GetStatus returns DataPoolDataPool.Status, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetStatus() DataPoolStatus { return v.DataPoolData.Status }

// GetError returns DataPoolDataPool.Error, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetError() *DataPoolDataError { return v.DataPoolData.Error }

// GetTable returns DataPoolDataPool.Table, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetTable() string { return v.DataPoolData.Table }

// GetTenant returns DataPoolDataPool.Tenant, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetTenant() *DataPoolDataTenant { return v.DataPoolData.Tenant }

// GetTimestamp returns DataPoolDataPool.Timestamp, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetTimestamp() *DataPoolDataTimestamp { return v.DataPoolData.Timestamp }

// GetColumns returns DataPoolDataPool.Columns, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetColumns() *DataPoolDataColumnsDataPoolColumnConnection {
	return v.DataPoolData.Columns
}

// GetUniqueId returns DataPoolDataPool.UniqueId, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetUniqueId() *DataPoolDataUniqueId { return v.DataPoolData.UniqueId }

// GetSyncing returns DataPoolDataPool.Syncing, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetSyncing() *DataPoolDataSyncingDataPoolSyncing {
	return v.DataPoolData.Syncing
}

// GetAvailableMeasures returns DataPoolDataPool.AvailableMeasures, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetAvailableMeasures() *DataPoolDataAvailableMeasuresDataPoolColumnConnection {
	return v.DataPoolData.AvailableMeasures
}

// GetSetupTasks returns DataPoolDataPool.SetupTasks, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetSetupTasks() []*DataPoolDataSetupTasksDataPoolSetupTask {
	return v.DataPoolData.SetupTasks
}

// GetSyncs returns DataPoolDataPool.Syncs, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetSyncs() *DataPoolDataSyncsSyncConnection { return v.DataPoolData.Syncs }

// GetDataPoolAccessPolicies returns DataPoolDataPool.DataPoolAccessPolicies, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetDataPoolAccessPolicies() *DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnection {
	return v.DataPoolData.DataPoolAccessPolicies
}

// GetAccessControlEnabled returns DataPoolDataPool.AccessControlEnabled, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetAccessControlEnabled() bool { return v.DataPoolData.AccessControlEnabled }

// GetUniqueName returns DataPoolDataPool.UniqueName, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetUniqueName() string {
	return v.DataPoolData.CommonDataDataPool.UniqueName
}

// GetDescription returns DataPoolDataPool.Description, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetDescription() string {
	return v.DataPoolData.CommonDataDataPool.Description
}

// GetAccount returns DataPoolDataPool.Account, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetAccount() *CommonDataAccount {
	return v.DataPoolData.CommonDataDataPool.Account
}

// GetEnvironment returns DataPoolDataPool.Environment, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetEnvironment() *CommonDataEnvironment {
	return v.DataPoolData.CommonDataDataPool.Environment
}

// GetCreatedAt returns DataPoolDataPool.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetCreatedAt() time.Time {
	return v.DataPoolData.CommonDataDataPool.CreatedAt
}

// GetModifiedAt returns DataPoolDataPool.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetModifiedAt() time.Time {
	return v.DataPoolData.CommonDataDataPool.ModifiedAt
}

// GetCreatedBy returns DataPoolDataPool.CreatedBy, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetCreatedBy() string { return v.DataPoolData.CommonDataDataPool.CreatedBy }

// GetModifiedBy returns DataPoolDataPool.ModifiedBy, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetModifiedBy() string {
	return v.DataPoolData.CommonDataDataPool.ModifiedBy
}

func (v *DataPoolDataPool) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataPoolDataPool
		graphql.NoUnmarshalJSON
	}
	firstPass.DataPoolDataPool = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataPoolData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataPoolDataPool struct {
	Id string `json:"id"`

	DataSource *DataPoolDataDataSource `json:"dataSource"`

	Status DataPoolStatus `json:"status"`

	Error *DataPoolDataError `json:"error"`

	Table string `json:"table"`

	Tenant *DataPoolDataTenant `json:"tenant"`

	Timestamp *DataPoolDataTimestamp `json:"timestamp"`

	Columns *DataPoolDataColumnsDataPoolColumnConnection `json:"columns"`

	UniqueId *DataPoolDataUniqueId `json:"uniqueId"`

	Syncing *DataPoolDataSyncingDataPoolSyncing `json:"syncing"`

	AvailableMeasures *DataPoolDataAvailableMeasuresDataPoolColumnConnection `json:"availableMeasures"`

	SetupTasks []*DataPoolDataSetupTasksDataPoolSetupTask `json:"setupTasks"`

	Syncs *DataPoolDataSyncsSyncConnection `json:"syncs"`

	DataPoolAccessPolicies *DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnection `json:"dataPoolAccessPolicies"`

	AccessControlEnabled bool `json:"accessControlEnabled"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *DataPoolDataPool) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataPoolDataPool) __premarshalJSON() (*__premarshalDataPoolDataPool, error) {
	var retval __premarshalDataPoolDataPool

	retval.Id = v.DataPoolData.Id
	retval.DataSource = v.DataPoolData.DataSource
	retval.Status = v.DataPoolData.Status
	retval.Error = v.DataPoolData.Error
	retval.Table = v.DataPoolData.Table
	retval.Tenant = v.DataPoolData.Tenant
	retval.Timestamp = v.DataPoolData.Timestamp
	retval.Columns = v.DataPoolData.Columns
	retval.UniqueId = v.DataPoolData.UniqueId
	retval.Syncing = v.DataPoolData.Syncing
	retval.AvailableMeasures = v.DataPoolData.AvailableMeasures
	retval.SetupTasks = v.DataPoolData.SetupTasks
	retval.Syncs = v.DataPoolData.Syncs
	retval.DataPoolAccessPolicies = v.DataPoolData.DataPoolAccessPolicies
	retval.AccessControlEnabled = v.DataPoolData.AccessControlEnabled
	retval.UniqueName = v.DataPoolData.CommonDataDataPool.UniqueName
	retval.Description = v.DataPoolData.CommonDataDataPool.Description
	retval.Account = v.DataPoolData.CommonDataDataPool.Account
	retval.Environment = v.DataPoolData.CommonDataDataPool.Environment
	retval.CreatedAt = v.DataPoolData.CommonDataDataPool.CreatedAt
	retval.ModifiedAt = v.DataPoolData.CommonDataDataPool.ModifiedAt
	retval.CreatedBy = v.DataPoolData.CommonDataDataPool.CreatedBy
	retval.ModifiedBy = v.DataPoolData.CommonDataDataPool.ModifiedBy
	return &retval, nil
}

// DataPoolDataSetupTasksDataPoolSetupTask includes the requested fields of the GraphQL type DataPoolSetupTask.
// The GraphQL type's documentation follows.
//
// The Data Pool Setup Task object.
//
// Data Pool Setup Tasks are executed when setting up your Data Pool. They ensure Propel will be able to sync records from your Data Source to your Data Pool.
//
// The exact Setup Tasks to perform vary by Data Source. For example, Data Pools pointing to a Snowflake-backed Data Sources will have their own specific Setup Tasks.
type DataPoolDataSetupTasksDataPoolSetupTask struct {
	// The name of the Data Pool Setup Task to be performed.
	Name string `json:"name"`
	// A description of the Data Pool Setup Task to be performed.
	Description *string `json:"description"`
	// The status of the Data Pool Setup Task (all setup tasks begin as NOT_STARTED before transitioning to SUCCEEDED or FAILED).
	Status DataPoolSetupTaskStatus `json:"status"`
	// If the Data Pool Setup Task failed, this field includes a descriptive error message.
	Error *DataPoolDataSetupTasksDataPoolSetupTaskError `json:"error"`
	// The time at which the Data Pool Setup Task was completed.
	CompletedAt *time.Time `json:"completedAt"`
}

// GetName returns DataPoolDataSetupTasksDataPoolSetupTask.Name, and is useful for accessing the field via an interface.
func (v *DataPoolDataSetupTasksDataPoolSetupTask) GetName() string { return v.Name }

// GetDescription returns DataPoolDataSetupTasksDataPoolSetupTask.Description, and is useful for accessing the field via an interface.
func (v *DataPoolDataSetupTasksDataPoolSetupTask) GetDescription() *string { return v.Description }

// GetStatus returns DataPoolDataSetupTasksDataPoolSetupTask.Status, and is useful for accessing the field via an interface.
func (v *DataPoolDataSetupTasksDataPoolSetupTask) GetStatus() DataPoolSetupTaskStatus {
	return v.Status
}

// GetError returns DataPoolDataSetupTasksDataPoolSetupTask.Error, and is useful for accessing the field via an interface.
func (v *DataPoolDataSetupTasksDataPoolSetupTask) GetError() *DataPoolDataSetupTasksDataPoolSetupTaskError {
	return v.Error
}

// GetCompletedAt returns DataPoolDataSetupTasksDataPoolSetupTask.CompletedAt, and is useful for accessing the field via an interface.
func (v *DataPoolDataSetupTasksDataPoolSetupTask) GetCompletedAt() *time.Time { return v.CompletedAt }

// DataPoolDataSetupTasksDataPoolSetupTaskError includes the requested fields of the GraphQL type Error.
// The GraphQL type's documentation follows.
//
// The error object.
type DataPoolDataSetupTasksDataPoolSetupTaskError struct {
	// The error code.
	Code *int `json:"code"`
	// The error message.
	Message string `json:"message"`
}

// GetCode returns DataPoolDataSetupTasksDataPoolSetupTaskError.Code, and is useful for accessing the field via an interface.
func (v *DataPoolDataSetupTasksDataPoolSetupTaskError) GetCode() *int { return v.Code }

// GetMessage returns DataPoolDataSetupTasksDataPoolSetupTaskError.Message, and is useful for accessing the field via an interface.
func (v *DataPoolDataSetupTasksDataPoolSetupTaskError) GetMessage() string { return v.Message }

// DataPoolDataSyncingDataPoolSyncing includes the requested fields of the GraphQL type DataPoolSyncing.
// The GraphQL type's documentation follows.
//
// Settings related to Data Pool syncing.
type DataPoolDataSyncingDataPoolSyncing struct {
	DataPoolSyncingData `json:"-"`
}

// GetStatus returns DataPoolDataSyncingDataPoolSyncing.Status, and is useful for accessing the field via an interface.
func (v *DataPoolDataSyncingDataPoolSyncing) GetStatus() DataPoolSyncStatus {
	return v.DataPoolSyncingData.Status
}

// GetInterval returns DataPoolDataSyncingDataPoolSyncing.Interval, and is useful for accessing the field via an interface.
func (v *DataPoolDataSyncingDataPoolSyncing) GetInterval() *DataPoolSyncInterval {
	return v.DataPoolSyncingData.Interval
}

// GetLastSyncedAt returns DataPoolDataSyncingDataPoolSyncing.LastSyncedAt, and is useful for accessing the field via an interface.
func (v *DataPoolDataSyncingDataPoolSyncing) GetLastSyncedAt() *time.Time {
	return v.DataPoolSyncingData.LastSyncedAt
}

func (v *DataPoolDataSyncingDataPoolSyncing) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataPoolDataSyncingDataPoolSyncing
		graphql.NoUnmarshalJSON
	}
	firstPass.DataPoolDataSyncingDataPoolSyncing = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataPoolSyncingData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataPoolDataSyncingDataPoolSyncing struct {
	Status DataPoolSyncStatus `json:"status"`

	Interval *DataPoolSyncInterval `json:"interval"`

	LastSyncedAt *time.Time `json:"lastSyncedAt"`
}

func (v *DataPoolDataSyncingDataPoolSyncing) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataPoolDataSyncingDataPoolSyncing) __premarshalJSON() (*__premarshalDataPoolDataSyncingDataPoolSyncing, error) {
	var retval __premarshalDataPoolDataSyncingDataPoolSyncing

	retval.Status = v.DataPoolSyncingData.Status
	retval.Interval = v.DataPoolSyncingData.Interval
	retval.LastSyncedAt = v.DataPoolSyncingData.LastSyncedAt
	return &retval, nil
}

// DataPoolDataSyncsSyncConnection includes the requested fields of the GraphQL type SyncConnection.
// The GraphQL type's documentation follows.
//
// The Sync connection object.
//
// Learn more about [pagination in GraphQL](https://www.propeldata.com/docs/api/pagination).
type DataPoolDataSyncsSyncConnection struct {
	// The Sync connection's nodes.
	Nodes []*DataPoolDataSyncsSyncConnectionNodesSync `json:"nodes"`
}

// GetNodes returns DataPoolDataSyncsSyncConnection.Nodes, and is useful for accessing the field via an interface.
func (v *DataPoolDataSyncsSyncConnection) GetNodes() []*DataPoolDataSyncsSyncConnectionNodesSync {
	return v.Nodes
}

// DataPoolDataSyncsSyncConnectionNodesSync includes the requested fields of the GraphQL type Sync.
// The GraphQL type's documentation follows.
//
// The Sync object.
//
// This represents the process of syncing data from your Data Source (for example, a Snowflake data warehouse) to your Data Pool.
type DataPoolDataSyncsSyncConnectionNodesSync struct {
	SyncData `json:"-"`
}

// GetId returns DataPoolDataSyncsSyncConnectionNodesSync.Id, and is useful for accessing the field via an interface.
func (v *DataPoolDataSyncsSyncConnectionNodesSync) GetId() string { return v.SyncData.Id }

// GetStatus returns DataPoolDataSyncsSyncConnectionNodesSync.Status, and is useful for accessing the field via an interface.
func (v *DataPoolDataSyncsSyncConnectionNodesSync) GetStatus() SyncStatus { return v.SyncData.Status }

// GetNewRecords returns DataPoolDataSyncsSyncConnectionNodesSync.NewRecords, and is useful for accessing the field via an interface.
func (v *DataPoolDataSyncsSyncConnectionNodesSync) GetNewRecords() *string {
	return v.SyncData.NewRecords
}

// GetUpdatedRecords returns DataPoolDataSyncsSyncConnectionNodesSync.UpdatedRecords, and is useful for accessing the field via an interface.
func (v *DataPoolDataSyncsSyncConnectionNodesSync) GetUpdatedRecords() *string {
	return v.SyncData.UpdatedRecords
}

// GetDeletedRecords returns DataPoolDataSyncsSyncConnectionNodesSync.DeletedRecords, and is useful for accessing the field via an interface.
func (v *DataPoolDataSyncsSyncConnectionNodesSync) GetDeletedRecords() *string {
	return v.SyncData.DeletedRecords
}

// GetInvalidRecords returns DataPoolDataSyncsSyncConnectionNodesSync.InvalidRecords, and is useful for accessing the field via an interface.
func (v *DataPoolDataSyncsSyncConnectionNodesSync) GetInvalidRecords() *string {
	return v.SyncData.InvalidRecords
}

// GetStartedAt returns DataPoolDataSyncsSyncConnectionNodesSync.StartedAt, and is useful for accessing the field via an interface.
func (v *DataPoolDataSyncsSyncConnectionNodesSync) GetStartedAt() *time.Time {
	return v.SyncData.StartedAt
}

// GetSucceededAt returns DataPoolDataSyncsSyncConnectionNodesSync.SucceededAt, and is useful for accessing the field via an interface.
func (v *DataPoolDataSyncsSyncConnectionNodesSync) GetSucceededAt() *time.Time {
	return v.SyncData.SucceededAt
}

// GetFailedAt returns DataPoolDataSyncsSyncConnectionNodesSync.FailedAt, and is useful for accessing the field via an interface.
func (v *DataPoolDataSyncsSyncConnectionNodesSync) GetFailedAt() *time.Time {
	return v.SyncData.FailedAt
}

// GetError returns DataPoolDataSyncsSyncConnectionNodesSync.Error, and is useful for accessing the field via an interface.
func (v *DataPoolDataSyncsSyncConnectionNodesSync) GetError() *SyncDataError { return v.SyncData.Error }

// GetCreatedAt returns DataPoolDataSyncsSyncConnectionNodesSync.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataPoolDataSyncsSyncConnectionNodesSync) GetCreatedAt() time.Time {
	return v.SyncData.CreatedAt
}

// GetCreatedBy returns DataPoolDataSyncsSyncConnectionNodesSync.CreatedBy, and is useful for accessing the field via an interface.
func (v *DataPoolDataSyncsSyncConnectionNodesSync) GetCreatedBy() string { return v.SyncData.CreatedBy }

// GetModifiedAt returns DataPoolDataSyncsSyncConnectionNodesSync.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataPoolDataSyncsSyncConnectionNodesSync) GetModifiedAt() time.Time {
	return v.SyncData.ModifiedAt
}

// GetModifiedBy returns DataPoolDataSyncsSyncConnectionNodesSync.ModifiedBy, and is useful for accessing the field via an interface.
func (v *DataPoolDataSyncsSyncConnectionNodesSync) GetModifiedBy() string {
	return v.SyncData.ModifiedBy
}

func (v *DataPoolDataSyncsSyncConnectionNodesSync) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataPoolDataSyncsSyncConnectionNodesSync
		graphql.NoUnmarshalJSON
	}
	firstPass.DataPoolDataSyncsSyncConnectionNodesSync = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.SyncData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataPoolDataSyncsSyncConnectionNodesSync struct {
	Id string `json:"id"`

	Status SyncStatus `json:"status"`

	NewRecords *string `json:"newRecords"`

	UpdatedRecords *string `json:"updatedRecords"`

	DeletedRecords *string `json:"deletedRecords"`

	InvalidRecords *string `json:"invalidRecords"`

	StartedAt *time.Time `json:"startedAt"`

	SucceededAt *time.Time `json:"succeededAt"`

	FailedAt *time.Time `json:"failedAt"`

	Error *SyncDataError `json:"error"`

	CreatedAt time.Time `json:"createdAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedAt time.Time `json:"modifiedAt"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *DataPoolDataSyncsSyncConnectionNodesSync) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataPoolDataSyncsSyncConnectionNodesSync) __premarshalJSON() (*__premarshalDataPoolDataSyncsSyncConnectionNodesSync, error) {
	var retval __premarshalDataPoolDataSyncsSyncConnectionNodesSync

	retval.Id = v.SyncData.Id
	retval.Status = v.SyncData.Status
	retval.NewRecords = v.SyncData.NewRecords
	retval.UpdatedRecords = v.SyncData.UpdatedRecords
	retval.DeletedRecords = v.SyncData.DeletedRecords
	retval.InvalidRecords = v.SyncData.InvalidRecords
	retval.StartedAt = v.SyncData.StartedAt
	retval.SucceededAt = v.SyncData.SucceededAt
	retval.FailedAt = v.SyncData.FailedAt
	retval.Error = v.SyncData.Error
	retval.CreatedAt = v.SyncData.CreatedAt
	retval.CreatedBy = v.SyncData.CreatedBy
	retval.ModifiedAt = v.SyncData.ModifiedAt
	retval.ModifiedBy = v.SyncData.ModifiedBy
	return &retval, nil
}

// DataPoolDataTenant includes the requested fields of the GraphQL type Tenant.
// The GraphQL type's documentation follows.
//
// A Data Pool's tenant ID column. The tenant ID column is used to control access to your data with access policies.
type DataPoolDataTenant struct {
	TenantData `json:"-"`
}

// GetColumnName returns DataPoolDataTenant.ColumnName, and is useful for accessing the field via an interface.
func (v *DataPoolDataTenant) GetColumnName() string { return v.TenantData.ColumnName }

// GetType returns DataPoolDataTenant.Type, and is useful for accessing the field via an interface.
func (v *DataPoolDataTenant) GetType() string { return v.TenantData.Type }

func (v *DataPoolDataTenant) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataPoolDataTenant
		graphql.NoUnmarshalJSON
	}
	firstPass.DataPoolDataTenant = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TenantData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataPoolDataTenant struct {
	ColumnName string `json:"columnName"`

	Type string `json:"type"`
}

func (v *DataPoolDataTenant) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataPoolDataTenant) __premarshalJSON() (*__premarshalDataPoolDataTenant, error) {
	var retval __premarshalDataPoolDataTenant

	retval.ColumnName = v.TenantData.ColumnName
	retval.Type = v.TenantData.Type
	return &retval, nil
}

// DataPoolDataTimestamp includes the requested fields of the GraphQL type Timestamp.
// The GraphQL type's documentation follows.
//
// A Data Pool's primary timestamp column. Propel uses the primary timestamp to order and partition your data in Data Pools. It will serve as the time dimension for your Metrics.
type DataPoolDataTimestamp struct {
	TimestampData `json:"-"`
}

// GetColumnName returns DataPoolDataTimestamp.ColumnName, and is useful for accessing the field via an interface.
func (v *DataPoolDataTimestamp) GetColumnName() string { return v.TimestampData.ColumnName }

// GetType returns DataPoolDataTimestamp.Type, and is useful for accessing the field via an interface.
func (v *DataPoolDataTimestamp) GetType() string { return v.TimestampData.Type }

func (v *DataPoolDataTimestamp) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataPoolDataTimestamp
		graphql.NoUnmarshalJSON
	}
	firstPass.DataPoolDataTimestamp = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TimestampData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataPoolDataTimestamp struct {
	ColumnName string `json:"columnName"`

	Type string `json:"type"`
}

func (v *DataPoolDataTimestamp) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataPoolDataTimestamp) __premarshalJSON() (*__premarshalDataPoolDataTimestamp, error) {
	var retval __premarshalDataPoolDataTimestamp

	retval.ColumnName = v.TimestampData.ColumnName
	retval.Type = v.TimestampData.Type
	return &retval, nil
}

// DataPoolDataUniqueId includes the requested fields of the GraphQL type UniqueId.
// The GraphQL type's documentation follows.
//
// A Data Pool's unique ID column. Propel uses the primary timestamp and a unique ID to compose a primary key for determining whether records should be inserted, deleted, or updated within the Data Pool.
type DataPoolDataUniqueId struct {
	// The name of the column that represents the unique ID.
	ColumnName string `json:"columnName"`
}

// GetColumnName returns DataPoolDataUniqueId.ColumnName, and is useful for accessing the field via an interface.
func (v *DataPoolDataUniqueId) GetColumnName() string { return v.ColumnName }

type DataPoolInput struct {
	// The ID of the Data Pool.
	Id *string `json:"id"`
	// The name of the Data Pool.
	Name *string `json:"name"`
}

// GetId returns DataPoolInput.Id, and is useful for accessing the field via an interface.
func (v *DataPoolInput) GetId() *string { return v.Id }

// GetName returns DataPoolInput.Name, and is useful for accessing the field via an interface.
func (v *DataPoolInput) GetName() *string { return v.Name }

// DataPoolResponse is returned by DataPool on success.
type DataPoolResponse struct {
	// This query returns the Data Pool specified by the given ID.
	//
	// A Data Pool is a cached table hydrated from your data warehouse optimized for high-concurrency and low-latency queries.
	DataPool *DataPoolDataPool `json:"dataPool"`
}

// GetDataPool returns DataPoolResponse.DataPool, and is useful for accessing the field via an interface.
func (v *DataPoolResponse) GetDataPool() *DataPoolDataPool { return v.DataPool }

// The status of a Data Pool Setup Task.
type DataPoolSetupTaskStatus string

const (
	// The Data Pool Setup Task has not been started yet.
	DataPoolSetupTaskStatusNotStarted DataPoolSetupTaskStatus = "NOT_STARTED"
	// The Data Pool Setup Task has completed successfully.
	DataPoolSetupTaskStatusSucceeded DataPoolSetupTaskStatus = "SUCCEEDED"
	// The Data Pool Setup Task has failed.
	DataPoolSetupTaskStatusFailed DataPoolSetupTaskStatus = "FAILED"
)

// The status of a Data Pool.
type DataPoolStatus string

const (
	// The Data Pool has been created and will be set up soon.
	DataPoolStatusCreated DataPoolStatus = "CREATED"
	// Propel is attempting to set up the Data Pool.
	DataPoolStatusPending DataPoolStatus = "PENDING"
	// The Data Pool is set up and serving data. Check its Syncs to monitor data ingestion.
	DataPoolStatusLive DataPoolStatus = "LIVE"
	// The Data Pool setup failed. Check its Setup Tasks before re-attempting setup.
	DataPoolStatusSetupFailed DataPoolStatus = "SETUP_FAILED"
	DataPoolStatusConnecting  DataPoolStatus = "CONNECTING"
	DataPoolStatusConnected   DataPoolStatus = "CONNECTED"
	DataPoolStatusBroken      DataPoolStatus = "BROKEN"
	DataPoolStatusPausing     DataPoolStatus = "PAUSING"
	DataPoolStatusPaused      DataPoolStatus = "PAUSED"
	// Propel is deleting the Data Pool and all of its associated data.
	DataPoolStatusDeleting DataPoolStatus = "DELETING"
)

// The available Data Pool sync intervals. Specify unit of time between attempts to sync data from your data warehouse.
//
// Note that the syncing interval is approximate. For example, setting the syncing interval to `EVERY_1_HOUR` does not mean that syncing will occur exactly on the hour. Instead, the syncing interval starts relative to when the Data Pool goes `LIVE`, and Propel will attempt to sync approximately every hour. Additionally, if you pause or resume syncing, this too can shift the syncing interval around.
type DataPoolSyncInterval string

const (
	DataPoolSyncIntervalEvery1Minute   DataPoolSyncInterval = "EVERY_1_MINUTE"
	DataPoolSyncIntervalEvery5Minutes  DataPoolSyncInterval = "EVERY_5_MINUTES"
	DataPoolSyncIntervalEvery15Minutes DataPoolSyncInterval = "EVERY_15_MINUTES"
	DataPoolSyncIntervalEvery30Minutes DataPoolSyncInterval = "EVERY_30_MINUTES"
	DataPoolSyncIntervalEvery1Hour     DataPoolSyncInterval = "EVERY_1_HOUR"
	DataPoolSyncIntervalEvery4Hours    DataPoolSyncInterval = "EVERY_4_HOURS"
	DataPoolSyncIntervalEvery12Hours   DataPoolSyncInterval = "EVERY_12_HOURS"
	DataPoolSyncIntervalEvery24Hours   DataPoolSyncInterval = "EVERY_24_HOURS"
)

// The Data Pool Sync Status. It indicates whether a Data Pool is syncing data or not.
type DataPoolSyncStatus string

const (
	// Syncing is enabled for the Data Pool.
	DataPoolSyncStatusEnabled DataPoolSyncStatus = "ENABLED"
	// Propel is disabling syncing for the Data Pool.
	DataPoolSyncStatusDisabling DataPoolSyncStatus = "DISABLING"
	// Syncing is disabled for the Data Pool.
	DataPoolSyncStatusDisabled DataPoolSyncStatus = "DISABLED"
)

// DataPoolSyncingData includes the GraphQL fields of DataPoolSyncing requested by the fragment DataPoolSyncingData.
// The GraphQL type's documentation follows.
//
// Settings related to Data Pool syncing.
type DataPoolSyncingData struct {
	// Indicates whether syncing is enabled or disabled.
	Status DataPoolSyncStatus `json:"status"`
	// The syncing interval.
	//
	// Note that the syncing interval is approximate. For example, setting the syncing interval to `EVERY_1_HOUR`
	// does not mean that syncing will occur exactly on the hour. Instead, the syncing interval starts relative to
	// when the Data Pool goes `LIVE`, and Propel will attempt to sync approximately every hour. Additionally,
	// if you pause or resume syncing, this too can shift the syncing interval around.
	Interval *DataPoolSyncInterval `json:"interval"`
	// The date and time of the most recent Sync in UTC.
	LastSyncedAt *time.Time `json:"lastSyncedAt"`
}

// GetStatus returns DataPoolSyncingData.Status, and is useful for accessing the field via an interface.
func (v *DataPoolSyncingData) GetStatus() DataPoolSyncStatus { return v.Status }

// GetInterval returns DataPoolSyncingData.Interval, and is useful for accessing the field via an interface.
func (v *DataPoolSyncingData) GetInterval() *DataPoolSyncInterval { return v.Interval }

// GetLastSyncedAt returns DataPoolSyncingData.LastSyncedAt, and is useful for accessing the field via an interface.
func (v *DataPoolSyncingData) GetLastSyncedAt() *time.Time { return v.LastSyncedAt }

// The fields for modifying the Data Pool syncing.
type DataPoolSyncingInput struct {
	Interval DataPoolSyncInterval `json:"interval"`
}

// GetInterval returns DataPoolSyncingInput.Interval, and is useful for accessing the field via an interface.
func (v *DataPoolSyncingInput) GetInterval() DataPoolSyncInterval { return v.Interval }

// DataPoolsDataPoolsDataPoolConnection includes the requested fields of the GraphQL type DataPoolConnection.
// The GraphQL type's documentation follows.
//
// The Data Pool connection object.
//
// Learn more about [pagination in GraphQL](https://www.propeldata.com/docs/api/pagination).
type DataPoolsDataPoolsDataPoolConnection struct {
	// The Data Pool connection's page info.
	PageInfo *DataPoolsDataPoolsDataPoolConnectionPageInfo `json:"pageInfo"`
	// The Data Pool connection's edges.
	Edges []*DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdge `json:"edges"`
}

// GetPageInfo returns DataPoolsDataPoolsDataPoolConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnection) GetPageInfo() *DataPoolsDataPoolsDataPoolConnectionPageInfo {
	return v.PageInfo
}

// GetEdges returns DataPoolsDataPoolsDataPoolConnection.Edges, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnection) GetEdges() []*DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdge {
	return v.Edges
}

// DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdge includes the requested fields of the GraphQL type DataPoolEdge.
// The GraphQL type's documentation follows.
//
// The Data Pool edge object.
//
// Learn more about [pagination in GraphQL](https://www.propeldata.com/docs/api/pagination).
type DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdge struct {
	// The edge's node.
	Node *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool `json:"node"`
}

// GetNode returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdge.Node, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdge) GetNode() *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool {
	return v.Node
}

// DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool includes the requested fields of the GraphQL type DataPool.
// The GraphQL type's documentation follows.
//
// The Data Pool object. Data Pools are Propel's high-speed data store and cache
//
// [Learn more about Data Pools](https://www.propeldata.com/docs/connect-your-data#key-concept-2-data-pools).
type DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool struct {
	DataPoolData `json:"-"`
}

// GetId returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.Id, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetId() string {
	return v.DataPoolData.Id
}

// GetDataSource returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.DataSource, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetDataSource() *DataPoolDataDataSource {
	return v.DataPoolData.DataSource
}

// GetStatus returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.Status, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetStatus() DataPoolStatus {
	return v.DataPoolData.Status
}

// GetError returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.Error, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetError() *DataPoolDataError {
	return v.DataPoolData.Error
}

// GetTable returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.Table, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetTable() string {
	return v.DataPoolData.Table
}

// GetTenant returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.Tenant, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetTenant() *DataPoolDataTenant {
	return v.DataPoolData.Tenant
}

// GetTimestamp returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.Timestamp, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetTimestamp() *DataPoolDataTimestamp {
	return v.DataPoolData.Timestamp
}

// GetColumns returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.Columns, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetColumns() *DataPoolDataColumnsDataPoolColumnConnection {
	return v.DataPoolData.Columns
}

// GetUniqueId returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.UniqueId, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetUniqueId() *DataPoolDataUniqueId {
	return v.DataPoolData.UniqueId
}

// GetSyncing returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.Syncing, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetSyncing() *DataPoolDataSyncingDataPoolSyncing {
	return v.DataPoolData.Syncing
}

// GetAvailableMeasures returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.AvailableMeasures, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetAvailableMeasures() *DataPoolDataAvailableMeasuresDataPoolColumnConnection {
	return v.DataPoolData.AvailableMeasures
}

// GetSetupTasks returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.SetupTasks, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetSetupTasks() []*DataPoolDataSetupTasksDataPoolSetupTask {
	return v.DataPoolData.SetupTasks
}

// GetSyncs returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.Syncs, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetSyncs() *DataPoolDataSyncsSyncConnection {
	return v.DataPoolData.Syncs
}

// GetDataPoolAccessPolicies returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.DataPoolAccessPolicies, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetDataPoolAccessPolicies() *DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnection {
	return v.DataPoolData.DataPoolAccessPolicies
}

// GetAccessControlEnabled returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.AccessControlEnabled, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetAccessControlEnabled() bool {
	return v.DataPoolData.AccessControlEnabled
}

// GetUniqueName returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.UniqueName, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetUniqueName() string {
	return v.DataPoolData.CommonDataDataPool.UniqueName
}

// GetDescription returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.Description, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetDescription() string {
	return v.DataPoolData.CommonDataDataPool.Description
}

// GetAccount returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.Account, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetAccount() *CommonDataAccount {
	return v.DataPoolData.CommonDataDataPool.Account
}

// GetEnvironment returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.Environment, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetEnvironment() *CommonDataEnvironment {
	return v.DataPoolData.CommonDataDataPool.Environment
}

// GetCreatedAt returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetCreatedAt() time.Time {
	return v.DataPoolData.CommonDataDataPool.CreatedAt
}

// GetModifiedAt returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetModifiedAt() time.Time {
	return v.DataPoolData.CommonDataDataPool.ModifiedAt
}

// GetCreatedBy returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.CreatedBy, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetCreatedBy() string {
	return v.DataPoolData.CommonDataDataPool.CreatedBy
}

// GetModifiedBy returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.ModifiedBy, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetModifiedBy() string {
	return v.DataPoolData.CommonDataDataPool.ModifiedBy
}

func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool
		graphql.NoUnmarshalJSON
	}
	firstPass.DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataPoolData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool struct {
	Id string `json:"id"`

	DataSource *DataPoolDataDataSource `json:"dataSource"`

	Status DataPoolStatus `json:"status"`

	Error *DataPoolDataError `json:"error"`

	Table string `json:"table"`

	Tenant *DataPoolDataTenant `json:"tenant"`

	Timestamp *DataPoolDataTimestamp `json:"timestamp"`

	Columns *DataPoolDataColumnsDataPoolColumnConnection `json:"columns"`

	UniqueId *DataPoolDataUniqueId `json:"uniqueId"`

	Syncing *DataPoolDataSyncingDataPoolSyncing `json:"syncing"`

	AvailableMeasures *DataPoolDataAvailableMeasuresDataPoolColumnConnection `json:"availableMeasures"`

	SetupTasks []*DataPoolDataSetupTasksDataPoolSetupTask `json:"setupTasks"`

	Syncs *DataPoolDataSyncsSyncConnection `json:"syncs"`

	DataPoolAccessPolicies *DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnection `json:"dataPoolAccessPolicies"`

	AccessControlEnabled bool `json:"accessControlEnabled"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) __premarshalJSON() (*__premarshalDataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool, error) {
	var retval __premarshalDataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool

	retval.Id = v.DataPoolData.Id
	retval.DataSource = v.DataPoolData.DataSource
	retval.Status = v.DataPoolData.Status
	retval.Error = v.DataPoolData.Error
	retval.Table = v.DataPoolData.Table
	retval.Tenant = v.DataPoolData.Tenant
	retval.Timestamp = v.DataPoolData.Timestamp
	retval.Columns = v.DataPoolData.Columns
	retval.UniqueId = v.DataPoolData.UniqueId
	retval.Syncing = v.DataPoolData.Syncing
	retval.AvailableMeasures = v.DataPoolData.AvailableMeasures
	retval.SetupTasks = v.DataPoolData.SetupTasks
	retval.Syncs = v.DataPoolData.Syncs
	retval.DataPoolAccessPolicies = v.DataPoolData.DataPoolAccessPolicies
	retval.AccessControlEnabled = v.DataPoolData.AccessControlEnabled
	retval.UniqueName = v.DataPoolData.CommonDataDataPool.UniqueName
	retval.Description = v.DataPoolData.CommonDataDataPool.Description
	retval.Account = v.DataPoolData.CommonDataDataPool.Account
	retval.Environment = v.DataPoolData.CommonDataDataPool.Environment
	retval.CreatedAt = v.DataPoolData.CommonDataDataPool.CreatedAt
	retval.ModifiedAt = v.DataPoolData.CommonDataDataPool.ModifiedAt
	retval.CreatedBy = v.DataPoolData.CommonDataDataPool.CreatedBy
	retval.ModifiedBy = v.DataPoolData.CommonDataDataPool.ModifiedBy
	return &retval, nil
}

// DataPoolsDataPoolsDataPoolConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// The page info object used for pagination.
type DataPoolsDataPoolsDataPoolConnectionPageInfo struct {
	PageInfoData `json:"-"`
}

// GetStartCursor returns DataPoolsDataPoolsDataPoolConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionPageInfo) GetStartCursor() *string {
	return v.PageInfoData.StartCursor
}

// GetEndCursor returns DataPoolsDataPoolsDataPoolConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionPageInfo) GetEndCursor() *string {
	return v.PageInfoData.EndCursor
}

// GetHasNextPage returns DataPoolsDataPoolsDataPoolConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionPageInfo) GetHasNextPage() bool {
	return v.PageInfoData.HasNextPage
}

// GetHasPreviousPage returns DataPoolsDataPoolsDataPoolConnectionPageInfo.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionPageInfo) GetHasPreviousPage() bool {
	return v.PageInfoData.HasPreviousPage
}

func (v *DataPoolsDataPoolsDataPoolConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataPoolsDataPoolsDataPoolConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.DataPoolsDataPoolsDataPoolConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PageInfoData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataPoolsDataPoolsDataPoolConnectionPageInfo struct {
	StartCursor *string `json:"startCursor"`

	EndCursor *string `json:"endCursor"`

	HasNextPage bool `json:"hasNextPage"`

	HasPreviousPage bool `json:"hasPreviousPage"`
}

func (v *DataPoolsDataPoolsDataPoolConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataPoolsDataPoolsDataPoolConnectionPageInfo) __premarshalJSON() (*__premarshalDataPoolsDataPoolsDataPoolConnectionPageInfo, error) {
	var retval __premarshalDataPoolsDataPoolsDataPoolConnectionPageInfo

	retval.StartCursor = v.PageInfoData.StartCursor
	retval.EndCursor = v.PageInfoData.EndCursor
	retval.HasNextPage = v.PageInfoData.HasNextPage
	retval.HasPreviousPage = v.PageInfoData.HasPreviousPage
	return &retval, nil
}

// DataPoolsResponse is returned by DataPools on success.
type DataPoolsResponse struct {
	// This query returns the Data Pools within the Environment.
	//
	// A Data Pool is a cached table hydrated from your data warehouse optimized for high-concurrency and low-latency queries. Environments are independent and isolated Propel workspaces for development, staging (testing), and production workloads.
	//
	// The `dataPools` query uses [cursor-based pagination](/docs/api/pagination) typical of GraphQL APIs. You can use the pairs of parameters `first` and `after` or `last` and `before` to page forward or backward through the results, respectively.
	//
	// For forward pagination, the `first` parameter defines the number of results to return, and the `after` parameter defines the cursor to continue from. You should pass the cursor for the _last_ result of the current page to `after`.
	//
	// For backward pagination, the `last` parameter defines the number of results to return, and the `before` parameter defines the cursor to continue from. You should pass the cursor for the _first_ result of the current page to `before`.
	DataPools *DataPoolsDataPoolsDataPoolConnection `json:"dataPools"`
}

// GetDataPools returns DataPoolsResponse.DataPools, and is useful for accessing the field via an interface.
func (v *DataPoolsResponse) GetDataPools() *DataPoolsDataPoolsDataPoolConnection { return v.DataPools }

// DataSourceByNameDataSource includes the requested fields of the GraphQL type DataSource.
// The GraphQL type's documentation follows.
//
// The Data Source object.
//
// A Data Source is a connection to your data warehouse. It has the necessary connection details for Propel to access Snowflake or any other supported Data Source.
//
// [Learn more about Data Sources](https://www.propeldata.com/docs/data-sources).
type DataSourceByNameDataSource struct {
	DataSourceData `json:"-"`
}

// GetId returns DataSourceByNameDataSource.Id, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetId() string { return v.DataSourceData.Id }

// GetType returns DataSourceByNameDataSource.Type, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetType() DataSourceType { return v.DataSourceData.Type }

// GetStatus returns DataSourceByNameDataSource.Status, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetStatus() DataSourceStatus { return v.DataSourceData.Status }

// GetError returns DataSourceByNameDataSource.Error, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetError() *DataSourceDataError { return v.DataSourceData.Error }

// GetDataPools returns DataSourceByNameDataSource.DataPools, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetDataPools() *DataSourceDataDataPoolsDataPoolConnection {
	return v.DataSourceData.DataPools
}

// GetConnectionSettings returns DataSourceByNameDataSource.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetConnectionSettings() DataSourceDataConnectionSettings {
	return v.DataSourceData.ConnectionSettings
}

// GetTables returns DataSourceByNameDataSource.Tables, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetTables() *DataSourceDataTablesTableConnection {
	return v.DataSourceData.Tables
}

// GetChecks returns DataSourceByNameDataSource.Checks, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetChecks() []*DataSourceDataChecksDataSourceCheck {
	return v.DataSourceData.Checks
}

// GetTableIntrospections returns DataSourceByNameDataSource.TableIntrospections, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetTableIntrospections() *DataSourceDataTableIntrospectionsTableIntrospectionConnection {
	return v.DataSourceData.TableIntrospections
}

// GetUniqueName returns DataSourceByNameDataSource.UniqueName, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetUniqueName() string {
	return v.DataSourceData.CommonDataDataSource.UniqueName
}

// GetDescription returns DataSourceByNameDataSource.Description, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetDescription() string {
	return v.DataSourceData.CommonDataDataSource.Description
}

// GetAccount returns DataSourceByNameDataSource.Account, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetAccount() *CommonDataAccount {
	return v.DataSourceData.CommonDataDataSource.Account
}

// GetEnvironment returns DataSourceByNameDataSource.Environment, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetEnvironment() *CommonDataEnvironment {
	return v.DataSourceData.CommonDataDataSource.Environment
}

// GetCreatedAt returns DataSourceByNameDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetCreatedAt() time.Time {
	return v.DataSourceData.CommonDataDataSource.CreatedAt
}

// GetModifiedAt returns DataSourceByNameDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetModifiedAt() time.Time {
	return v.DataSourceData.CommonDataDataSource.ModifiedAt
}

// GetCreatedBy returns DataSourceByNameDataSource.CreatedBy, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetCreatedBy() string {
	return v.DataSourceData.CommonDataDataSource.CreatedBy
}

// GetModifiedBy returns DataSourceByNameDataSource.ModifiedBy, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetModifiedBy() string {
	return v.DataSourceData.CommonDataDataSource.ModifiedBy
}

func (v *DataSourceByNameDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourceByNameDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourceByNameDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataSourceData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataSourceByNameDataSource struct {
	Id string `json:"id"`

	Type DataSourceType `json:"type"`

	Status DataSourceStatus `json:"status"`

	Error *DataSourceDataError `json:"error"`

	DataPools *DataSourceDataDataPoolsDataPoolConnection `json:"dataPools"`

	ConnectionSettings json.RawMessage `json:"connectionSettings"`

	Tables *DataSourceDataTablesTableConnection `json:"tables"`

	Checks []*DataSourceDataChecksDataSourceCheck `json:"checks"`

	TableIntrospections *DataSourceDataTableIntrospectionsTableIntrospectionConnection `json:"tableIntrospections"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *DataSourceByNameDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourceByNameDataSource) __premarshalJSON() (*__premarshalDataSourceByNameDataSource, error) {
	var retval __premarshalDataSourceByNameDataSource

	retval.Id = v.DataSourceData.Id
	retval.Type = v.DataSourceData.Type
	retval.Status = v.DataSourceData.Status
	retval.Error = v.DataSourceData.Error
	retval.DataPools = v.DataSourceData.DataPools
	{

		dst := &retval.ConnectionSettings
		src := v.DataSourceData.ConnectionSettings
		var err error
		*dst, err = __marshalDataSourceDataConnectionSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal DataSourceByNameDataSource.DataSourceData.ConnectionSettings: %w", err)
		}
	}
	retval.Tables = v.DataSourceData.Tables
	retval.Checks = v.DataSourceData.Checks
	retval.TableIntrospections = v.DataSourceData.TableIntrospections
	retval.UniqueName = v.DataSourceData.CommonDataDataSource.UniqueName
	retval.Description = v.DataSourceData.CommonDataDataSource.Description
	retval.Account = v.DataSourceData.CommonDataDataSource.Account
	retval.Environment = v.DataSourceData.CommonDataDataSource.Environment
	retval.CreatedAt = v.DataSourceData.CommonDataDataSource.CreatedAt
	retval.ModifiedAt = v.DataSourceData.CommonDataDataSource.ModifiedAt
	retval.CreatedBy = v.DataSourceData.CommonDataDataSource.CreatedBy
	retval.ModifiedBy = v.DataSourceData.CommonDataDataSource.ModifiedBy
	return &retval, nil
}

// DataSourceByNameResponse is returned by DataSourceByName on success.
type DataSourceByNameResponse struct {
	// This query returns the Data Source specified by the given unique name.
	//
	// A Data Source is a connection to your data warehouse. It has the necessary connection details for Propel to access Snowflake or any other supported Data Source.
	DataSource *DataSourceByNameDataSource `json:"dataSource"`
}

// GetDataSource returns DataSourceByNameResponse.DataSource, and is useful for accessing the field via an interface.
func (v *DataSourceByNameResponse) GetDataSource() *DataSourceByNameDataSource { return v.DataSource }

// The status of a Data Source Check.
type DataSourceCheckStatus string

const (
	// The Check has not started.
	DataSourceCheckStatusNotStarted DataSourceCheckStatus = "NOT_STARTED"
	// The Check succeeded.
	DataSourceCheckStatusSucceeded DataSourceCheckStatus = "SUCCEEDED"
	// The Check failed.
	DataSourceCheckStatusFailed DataSourceCheckStatus = "FAILED"
)

// DataSourceData includes the GraphQL fields of DataSource requested by the fragment DataSourceData.
// The GraphQL type's documentation follows.
//
// The Data Source object.
//
// A Data Source is a connection to your data warehouse. It has the necessary connection details for Propel to access Snowflake or any other supported Data Source.
//
// [Learn more about Data Sources](https://www.propeldata.com/docs/data-sources).
type DataSourceData struct {
	// The Data Source's unique identifier.
	Id                   string `json:"id"`
	CommonDataDataSource `json:"-"`
	// The Data Source's type.
	Type DataSourceType `json:"type"`
	// The Data Source's status.
	Status DataSourceStatus     `json:"status"`
	Error  *DataSourceDataError `json:"error"`
	// If you list Data Pools via the `dataPools` field on a Data Source, you will get Data Pools for the Data Source.
	//
	// The `dataPools` field uses [cursor-based pagination](/docs/api/pagination) typical of GraphQL APIs. You can use the pairs of parameters `first` and `after` or `last` and `before` to page forward or backward through the results, respectively.
	//
	// For forward pagination, the `first` parameter defines the number of results to return, and the `after` parameter defines the cursor to continue from. You should pass the cursor for the _last_ result of the current page to `after`.
	//
	// For backward pagination, the `last` parameter defines the number of results to return, and the `before` parameter defines the cursor to continue from. You should pass the cursor for the _first_ result of the current page to `before`.
	DataPools *DataSourceDataDataPoolsDataPoolConnection `json:"dataPools"`
	// The Data Source's connection settings.
	ConnectionSettings DataSourceDataConnectionSettings `json:"-"`
	// The tables contained within the Data Source, according to the most recent table introspection.
	Tables *DataSourceDataTablesTableConnection `json:"tables"`
	// A list of checks performed on the Data Source during its most recent connection attempt.
	Checks []*DataSourceDataChecksDataSourceCheck `json:"checks"`
	// A list of table introspections performed for the Data Source. You can see how tables and columns changed over time by paging through this list.
	TableIntrospections *DataSourceDataTableIntrospectionsTableIntrospectionConnection `json:"tableIntrospections"`
}

// GetId returns DataSourceData.Id, and is useful for accessing the field via an interface.
func (v *DataSourceData) GetId() string { return v.Id }

// GetType returns DataSourceData.Type, and is useful for accessing the field via an interface.
func (v *DataSourceData) GetType() DataSourceType { return v.Type }

// GetStatus returns DataSourceData.Status, and is useful for accessing the field via an interface.
func (v *DataSourceData) GetStatus() DataSourceStatus { return v.Status }

// GetError returns DataSourceData.Error, and is useful for accessing the field via an interface.
func (v *DataSourceData) GetError() *DataSourceDataError { return v.Error }

// GetDataPools returns DataSourceData.DataPools, and is useful for accessing the field via an interface.
func (v *DataSourceData) GetDataPools() *DataSourceDataDataPoolsDataPoolConnection {
	return v.DataPools
}

// GetConnectionSettings returns DataSourceData.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *DataSourceData) GetConnectionSettings() DataSourceDataConnectionSettings {
	return v.ConnectionSettings
}

// GetTables returns DataSourceData.Tables, and is useful for accessing the field via an interface.
func (v *DataSourceData) GetTables() *DataSourceDataTablesTableConnection { return v.Tables }

// GetChecks returns DataSourceData.Checks, and is useful for accessing the field via an interface.
func (v *DataSourceData) GetChecks() []*DataSourceDataChecksDataSourceCheck { return v.Checks }

// GetTableIntrospections returns DataSourceData.TableIntrospections, and is useful for accessing the field via an interface.
func (v *DataSourceData) GetTableIntrospections() *DataSourceDataTableIntrospectionsTableIntrospectionConnection {
	return v.TableIntrospections
}

// GetUniqueName returns DataSourceData.UniqueName, and is useful for accessing the field via an interface.
func (v *DataSourceData) GetUniqueName() string { return v.CommonDataDataSource.UniqueName }

// GetDescription returns DataSourceData.Description, and is useful for accessing the field via an interface.
func (v *DataSourceData) GetDescription() string { return v.CommonDataDataSource.Description }

// GetAccount returns DataSourceData.Account, and is useful for accessing the field via an interface.
func (v *DataSourceData) GetAccount() *CommonDataAccount { return v.CommonDataDataSource.Account }

// GetEnvironment returns DataSourceData.Environment, and is useful for accessing the field via an interface.
func (v *DataSourceData) GetEnvironment() *CommonDataEnvironment {
	return v.CommonDataDataSource.Environment
}

// GetCreatedAt returns DataSourceData.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataSourceData) GetCreatedAt() time.Time { return v.CommonDataDataSource.CreatedAt }

// GetModifiedAt returns DataSourceData.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataSourceData) GetModifiedAt() time.Time { return v.CommonDataDataSource.ModifiedAt }

// GetCreatedBy returns DataSourceData.CreatedBy, and is useful for accessing the field via an interface.
func (v *DataSourceData) GetCreatedBy() string { return v.CommonDataDataSource.CreatedBy }

// GetModifiedBy returns DataSourceData.ModifiedBy, and is useful for accessing the field via an interface.
func (v *DataSourceData) GetModifiedBy() string { return v.CommonDataDataSource.ModifiedBy }

func (v *DataSourceData) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourceData
		ConnectionSettings json.RawMessage `json:"connectionSettings"`
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourceData = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CommonDataDataSource)
	if err != nil {
		return err
	}

	{
		dst := &v.ConnectionSettings
		src := firstPass.ConnectionSettings
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalDataSourceDataConnectionSettings(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal DataSourceData.ConnectionSettings: %w", err)
			}
		}
	}
	return nil
}

type __premarshalDataSourceData struct {
	Id string `json:"id"`

	Type DataSourceType `json:"type"`

	Status DataSourceStatus `json:"status"`

	Error *DataSourceDataError `json:"error"`

	DataPools *DataSourceDataDataPoolsDataPoolConnection `json:"dataPools"`

	ConnectionSettings json.RawMessage `json:"connectionSettings"`

	Tables *DataSourceDataTablesTableConnection `json:"tables"`

	Checks []*DataSourceDataChecksDataSourceCheck `json:"checks"`

	TableIntrospections *DataSourceDataTableIntrospectionsTableIntrospectionConnection `json:"tableIntrospections"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *DataSourceData) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourceData) __premarshalJSON() (*__premarshalDataSourceData, error) {
	var retval __premarshalDataSourceData

	retval.Id = v.Id
	retval.Type = v.Type
	retval.Status = v.Status
	retval.Error = v.Error
	retval.DataPools = v.DataPools
	{

		dst := &retval.ConnectionSettings
		src := v.ConnectionSettings
		var err error
		*dst, err = __marshalDataSourceDataConnectionSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal DataSourceData.ConnectionSettings: %w", err)
		}
	}
	retval.Tables = v.Tables
	retval.Checks = v.Checks
	retval.TableIntrospections = v.TableIntrospections
	retval.UniqueName = v.CommonDataDataSource.UniqueName
	retval.Description = v.CommonDataDataSource.Description
	retval.Account = v.CommonDataDataSource.Account
	retval.Environment = v.CommonDataDataSource.Environment
	retval.CreatedAt = v.CommonDataDataSource.CreatedAt
	retval.ModifiedAt = v.CommonDataDataSource.ModifiedAt
	retval.CreatedBy = v.CommonDataDataSource.CreatedBy
	retval.ModifiedBy = v.CommonDataDataSource.ModifiedBy
	return &retval, nil
}

// DataSourceDataChecksDataSourceCheck includes the requested fields of the GraphQL type DataSourceCheck.
// The GraphQL type's documentation follows.
//
// The Data Source Check object.
//
// Data Source Checks are executed when setting up your Data Source. They check that Propel will be able to receive data and setup Data Pools.
//
// The exact Checks to perform vary by Data Source. For example, Snowflake-backed Data Sources will have their own specific Checks.
type DataSourceDataChecksDataSourceCheck struct {
	// The name of the Data Source Check to be performed.
	Name string `json:"name"`
	// A description of the Data Source Check to be performed.
	Description *string `json:"description"`
	// The status of the Data Source Check (all checks begin as NOT_STARTED before transitioning to SUCCEEDED or FAILED).
	Status DataSourceCheckStatus `json:"status"`
	// If the Data Source Check failed, this field includes a descriptive error message.
	Error *DataSourceDataChecksDataSourceCheckError `json:"error"`
	// The time at which the Data Source Check was performed.
	CheckedAt *time.Time `json:"checkedAt"`
}

// GetName returns DataSourceDataChecksDataSourceCheck.Name, and is useful for accessing the field via an interface.
func (v *DataSourceDataChecksDataSourceCheck) GetName() string { return v.Name }

// GetDescription returns DataSourceDataChecksDataSourceCheck.Description, and is useful for accessing the field via an interface.
func (v *DataSourceDataChecksDataSourceCheck) GetDescription() *string { return v.Description }

// GetStatus returns DataSourceDataChecksDataSourceCheck.Status, and is useful for accessing the field via an interface.
func (v *DataSourceDataChecksDataSourceCheck) GetStatus() DataSourceCheckStatus { return v.Status }

// GetError returns DataSourceDataChecksDataSourceCheck.Error, and is useful for accessing the field via an interface.
func (v *DataSourceDataChecksDataSourceCheck) GetError() *DataSourceDataChecksDataSourceCheckError {
	return v.Error
}

// GetCheckedAt returns DataSourceDataChecksDataSourceCheck.CheckedAt, and is useful for accessing the field via an interface.
func (v *DataSourceDataChecksDataSourceCheck) GetCheckedAt() *time.Time { return v.CheckedAt }

// DataSourceDataChecksDataSourceCheckError includes the requested fields of the GraphQL type Error.
// The GraphQL type's documentation follows.
//
// The error object.
type DataSourceDataChecksDataSourceCheckError struct {
	// The error code.
	Code *int `json:"code"`
	// The error message.
	Message string `json:"message"`
}

// GetCode returns DataSourceDataChecksDataSourceCheckError.Code, and is useful for accessing the field via an interface.
func (v *DataSourceDataChecksDataSourceCheckError) GetCode() *int { return v.Code }

// GetMessage returns DataSourceDataChecksDataSourceCheckError.Message, and is useful for accessing the field via an interface.
func (v *DataSourceDataChecksDataSourceCheckError) GetMessage() string { return v.Message }

// DataSourceDataConnectionSettings includes the requested fields of the GraphQL interface ConnectionSettings.
//
// DataSourceDataConnectionSettings is implemented by the following types:
// DataSourceDataConnectionSettingsHttpConnectionSettings
// DataSourceDataConnectionSettingsInternalConnectionSettings
// DataSourceDataConnectionSettingsKafkaConnectionSettings
// DataSourceDataConnectionSettingsS3ConnectionSettings
// DataSourceDataConnectionSettingsSnowflakeConnectionSettings
// DataSourceDataConnectionSettingsWebhookConnectionSettings
type DataSourceDataConnectionSettings interface {
	implementsGraphQLInterfaceDataSourceDataConnectionSettings()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *DataSourceDataConnectionSettingsHttpConnectionSettings) implementsGraphQLInterfaceDataSourceDataConnectionSettings() {
}
func (v *DataSourceDataConnectionSettingsInternalConnectionSettings) implementsGraphQLInterfaceDataSourceDataConnectionSettings() {
}
func (v *DataSourceDataConnectionSettingsKafkaConnectionSettings) implementsGraphQLInterfaceDataSourceDataConnectionSettings() {
}
func (v *DataSourceDataConnectionSettingsS3ConnectionSettings) implementsGraphQLInterfaceDataSourceDataConnectionSettings() {
}
func (v *DataSourceDataConnectionSettingsSnowflakeConnectionSettings) implementsGraphQLInterfaceDataSourceDataConnectionSettings() {
}
func (v *DataSourceDataConnectionSettingsWebhookConnectionSettings) implementsGraphQLInterfaceDataSourceDataConnectionSettings() {
}

func __unmarshalDataSourceDataConnectionSettings(b []byte, v *DataSourceDataConnectionSettings) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "HttpConnectionSettings":
		*v = new(DataSourceDataConnectionSettingsHttpConnectionSettings)
		return json.Unmarshal(b, *v)
	case "InternalConnectionSettings":
		*v = new(DataSourceDataConnectionSettingsInternalConnectionSettings)
		return json.Unmarshal(b, *v)
	case "KafkaConnectionSettings":
		*v = new(DataSourceDataConnectionSettingsKafkaConnectionSettings)
		return json.Unmarshal(b, *v)
	case "S3ConnectionSettings":
		*v = new(DataSourceDataConnectionSettingsS3ConnectionSettings)
		return json.Unmarshal(b, *v)
	case "SnowflakeConnectionSettings":
		*v = new(DataSourceDataConnectionSettingsSnowflakeConnectionSettings)
		return json.Unmarshal(b, *v)
	case "WebhookConnectionSettings":
		*v = new(DataSourceDataConnectionSettingsWebhookConnectionSettings)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing ConnectionSettings.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for DataSourceDataConnectionSettings: "%v"`, tn.TypeName)
	}
}

func __marshalDataSourceDataConnectionSettings(v *DataSourceDataConnectionSettings) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *DataSourceDataConnectionSettingsHttpConnectionSettings:
		typename = "HttpConnectionSettings"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourceDataConnectionSettingsHttpConnectionSettings
		}{typename, v}
		return json.Marshal(result)
	case *DataSourceDataConnectionSettingsInternalConnectionSettings:
		typename = "InternalConnectionSettings"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourceDataConnectionSettingsInternalConnectionSettings
		}{typename, v}
		return json.Marshal(result)
	case *DataSourceDataConnectionSettingsKafkaConnectionSettings:
		typename = "KafkaConnectionSettings"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourceDataConnectionSettingsKafkaConnectionSettings
		}{typename, v}
		return json.Marshal(result)
	case *DataSourceDataConnectionSettingsS3ConnectionSettings:
		typename = "S3ConnectionSettings"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourceDataConnectionSettingsS3ConnectionSettings
		}{typename, v}
		return json.Marshal(result)
	case *DataSourceDataConnectionSettingsSnowflakeConnectionSettings:
		typename = "SnowflakeConnectionSettings"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourceDataConnectionSettingsSnowflakeConnectionSettings
		}{typename, v}
		return json.Marshal(result)
	case *DataSourceDataConnectionSettingsWebhookConnectionSettings:
		typename = "WebhookConnectionSettings"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourceDataConnectionSettingsWebhookConnectionSettings
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for DataSourceDataConnectionSettings: "%T"`, v)
	}
}

// DataSourceDataConnectionSettingsHttpConnectionSettings includes the requested fields of the GraphQL type HttpConnectionSettings.
// The GraphQL type's documentation follows.
//
// The HTTP Data Source connection settings.
type DataSourceDataConnectionSettingsHttpConnectionSettings struct {
	Typename *string `json:"__typename"`
	// The HTTP Basic authentication settings for uploading new data.
	//
	// If this parameter is not provided, anyone with the URL to your tables will be able to upload data. While it's OK to test without HTTP Basic authentication, we recommend enabling it.
	BasicAuth *DataSourceDataConnectionSettingsHttpConnectionSettingsBasicAuthHttpBasicAuthSettings `json:"basicAuth"`
	// The HTTP Data Source's tables.
	Tables []*DataSourceDataConnectionSettingsHttpConnectionSettingsTablesHttpDataSourceTable `json:"tables"`
}

// GetTypename returns DataSourceDataConnectionSettingsHttpConnectionSettings.Typename, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsHttpConnectionSettings) GetTypename() *string {
	return v.Typename
}

// GetBasicAuth returns DataSourceDataConnectionSettingsHttpConnectionSettings.BasicAuth, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsHttpConnectionSettings) GetBasicAuth() *DataSourceDataConnectionSettingsHttpConnectionSettingsBasicAuthHttpBasicAuthSettings {
	return v.BasicAuth
}

// GetTables returns DataSourceDataConnectionSettingsHttpConnectionSettings.Tables, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsHttpConnectionSettings) GetTables() []*DataSourceDataConnectionSettingsHttpConnectionSettingsTablesHttpDataSourceTable {
	return v.Tables
}

// DataSourceDataConnectionSettingsHttpConnectionSettingsBasicAuthHttpBasicAuthSettings includes the requested fields of the GraphQL type HttpBasicAuthSettings.
// The GraphQL type's documentation follows.
//
// The HTTP Basic authentication settings.
type DataSourceDataConnectionSettingsHttpConnectionSettingsBasicAuthHttpBasicAuthSettings struct {
	// Username for HTTP Basic authentication that must be included in the Authorization header when uploading new data.
	Username string `json:"username"`
	// Password for HTTP Basic authentication that must be included in the Authorization header when uploading new data.
	Password string `json:"password"`
}

// GetUsername returns DataSourceDataConnectionSettingsHttpConnectionSettingsBasicAuthHttpBasicAuthSettings.Username, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsHttpConnectionSettingsBasicAuthHttpBasicAuthSettings) GetUsername() string {
	return v.Username
}

// GetPassword returns DataSourceDataConnectionSettingsHttpConnectionSettingsBasicAuthHttpBasicAuthSettings.Password, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsHttpConnectionSettingsBasicAuthHttpBasicAuthSettings) GetPassword() string {
	return v.Password
}

// DataSourceDataConnectionSettingsHttpConnectionSettingsTablesHttpDataSourceTable includes the requested fields of the GraphQL type HttpDataSourceTable.
// The GraphQL type's documentation follows.
//
// An HTTP Data Source's table.
type DataSourceDataConnectionSettingsHttpConnectionSettingsTablesHttpDataSourceTable struct {
	// The ID of the table
	Id string `json:"id"`
	// The name of the table
	Name string `json:"name"`
	// All the columns present in the table
	Columns []*DataSourceDataConnectionSettingsHttpConnectionSettingsTablesHttpDataSourceTableColumnsHttpDataSourceColumn `json:"columns"`
}

// GetId returns DataSourceDataConnectionSettingsHttpConnectionSettingsTablesHttpDataSourceTable.Id, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsHttpConnectionSettingsTablesHttpDataSourceTable) GetId() string {
	return v.Id
}

// GetName returns DataSourceDataConnectionSettingsHttpConnectionSettingsTablesHttpDataSourceTable.Name, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsHttpConnectionSettingsTablesHttpDataSourceTable) GetName() string {
	return v.Name
}

// GetColumns returns DataSourceDataConnectionSettingsHttpConnectionSettingsTablesHttpDataSourceTable.Columns, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsHttpConnectionSettingsTablesHttpDataSourceTable) GetColumns() []*DataSourceDataConnectionSettingsHttpConnectionSettingsTablesHttpDataSourceTableColumnsHttpDataSourceColumn {
	return v.Columns
}

// DataSourceDataConnectionSettingsHttpConnectionSettingsTablesHttpDataSourceTableColumnsHttpDataSourceColumn includes the requested fields of the GraphQL type HttpDataSourceColumn.
// The GraphQL type's documentation follows.
//
// A column in an HTTP Data Source's table.
type DataSourceDataConnectionSettingsHttpConnectionSettingsTablesHttpDataSourceTableColumnsHttpDataSourceColumn struct {
	// The column name. It has to be unique within a Table.
	Name string `json:"name"`
	// The column type.
	Type ColumnType `json:"type"`
	// Whether the column's type is nullable or not.
	Nullable bool `json:"nullable"`
}

// GetName returns DataSourceDataConnectionSettingsHttpConnectionSettingsTablesHttpDataSourceTableColumnsHttpDataSourceColumn.Name, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsHttpConnectionSettingsTablesHttpDataSourceTableColumnsHttpDataSourceColumn) GetName() string {
	return v.Name
}

// GetType returns DataSourceDataConnectionSettingsHttpConnectionSettingsTablesHttpDataSourceTableColumnsHttpDataSourceColumn.Type, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsHttpConnectionSettingsTablesHttpDataSourceTableColumnsHttpDataSourceColumn) GetType() ColumnType {
	return v.Type
}

// GetNullable returns DataSourceDataConnectionSettingsHttpConnectionSettingsTablesHttpDataSourceTableColumnsHttpDataSourceColumn.Nullable, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsHttpConnectionSettingsTablesHttpDataSourceTableColumnsHttpDataSourceColumn) GetNullable() bool {
	return v.Nullable
}

// DataSourceDataConnectionSettingsInternalConnectionSettings includes the requested fields of the GraphQL type InternalConnectionSettings.
type DataSourceDataConnectionSettingsInternalConnectionSettings struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourceDataConnectionSettingsInternalConnectionSettings.Typename, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsInternalConnectionSettings) GetTypename() *string {
	return v.Typename
}

// DataSourceDataConnectionSettingsKafkaConnectionSettings includes the requested fields of the GraphQL type KafkaConnectionSettings.
// The GraphQL type's documentation follows.
//
// The Kafka Data Source connection settings.
type DataSourceDataConnectionSettingsKafkaConnectionSettings struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourceDataConnectionSettingsKafkaConnectionSettings.Typename, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsKafkaConnectionSettings) GetTypename() *string {
	return v.Typename
}

// DataSourceDataConnectionSettingsS3ConnectionSettings includes the requested fields of the GraphQL type S3ConnectionSettings.
// The GraphQL type's documentation follows.
//
// The connection settings for an S3 Data Source. These include the S3 bucket name, the AWS access key ID, and the tables (along with their paths). We do not allow fetching the AWS secret access key after it has been set.
type DataSourceDataConnectionSettingsS3ConnectionSettings struct {
	Typename *string `json:"__typename"`
	// The name of the S3 bucket.
	Bucket string `json:"bucket"`
	// The AWS access key ID for an IAM user with sufficient access to the S3 bucket.
	AwsAccessKeyId string `json:"awsAccessKeyId"`
	// The S3 Data Source's tables.
	Tables []*DataSourceDataConnectionSettingsS3ConnectionSettingsTablesS3DataSourceTable `json:"tables"`
}

// GetTypename returns DataSourceDataConnectionSettingsS3ConnectionSettings.Typename, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsS3ConnectionSettings) GetTypename() *string {
	return v.Typename
}

// GetBucket returns DataSourceDataConnectionSettingsS3ConnectionSettings.Bucket, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsS3ConnectionSettings) GetBucket() string { return v.Bucket }

// GetAwsAccessKeyId returns DataSourceDataConnectionSettingsS3ConnectionSettings.AwsAccessKeyId, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsS3ConnectionSettings) GetAwsAccessKeyId() string {
	return v.AwsAccessKeyId
}

// GetTables returns DataSourceDataConnectionSettingsS3ConnectionSettings.Tables, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsS3ConnectionSettings) GetTables() []*DataSourceDataConnectionSettingsS3ConnectionSettingsTablesS3DataSourceTable {
	return v.Tables
}

// DataSourceDataConnectionSettingsS3ConnectionSettingsTablesS3DataSourceTable includes the requested fields of the GraphQL type S3DataSourceTable.
// The GraphQL type's documentation follows.
//
// An S3 Data Source's table.
type DataSourceDataConnectionSettingsS3ConnectionSettingsTablesS3DataSourceTable struct {
	// The ID of the table
	Id string `json:"id"`
	// The name of the table
	Name string `json:"name"`
	// The path to the table's files in S3.
	Path *string `json:"path"`
	// All the columns present in the table
	Columns []*DataSourceDataConnectionSettingsS3ConnectionSettingsTablesS3DataSourceTableColumnsS3DataSourceColumn `json:"columns"`
}

// GetId returns DataSourceDataConnectionSettingsS3ConnectionSettingsTablesS3DataSourceTable.Id, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsS3ConnectionSettingsTablesS3DataSourceTable) GetId() string {
	return v.Id
}

// GetName returns DataSourceDataConnectionSettingsS3ConnectionSettingsTablesS3DataSourceTable.Name, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsS3ConnectionSettingsTablesS3DataSourceTable) GetName() string {
	return v.Name
}

// GetPath returns DataSourceDataConnectionSettingsS3ConnectionSettingsTablesS3DataSourceTable.Path, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsS3ConnectionSettingsTablesS3DataSourceTable) GetPath() *string {
	return v.Path
}

// GetColumns returns DataSourceDataConnectionSettingsS3ConnectionSettingsTablesS3DataSourceTable.Columns, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsS3ConnectionSettingsTablesS3DataSourceTable) GetColumns() []*DataSourceDataConnectionSettingsS3ConnectionSettingsTablesS3DataSourceTableColumnsS3DataSourceColumn {
	return v.Columns
}

// DataSourceDataConnectionSettingsS3ConnectionSettingsTablesS3DataSourceTableColumnsS3DataSourceColumn includes the requested fields of the GraphQL type S3DataSourceColumn.
// The GraphQL type's documentation follows.
//
// A column in an S3 Data Source's table.
type DataSourceDataConnectionSettingsS3ConnectionSettingsTablesS3DataSourceTableColumnsS3DataSourceColumn struct {
	// The column name.
	Name string `json:"name"`
	// The column type.
	Type ColumnType `json:"type"`
	// Whether the column's type is nullable or not.
	Nullable bool `json:"nullable"`
}

// GetName returns DataSourceDataConnectionSettingsS3ConnectionSettingsTablesS3DataSourceTableColumnsS3DataSourceColumn.Name, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsS3ConnectionSettingsTablesS3DataSourceTableColumnsS3DataSourceColumn) GetName() string {
	return v.Name
}

// GetType returns DataSourceDataConnectionSettingsS3ConnectionSettingsTablesS3DataSourceTableColumnsS3DataSourceColumn.Type, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsS3ConnectionSettingsTablesS3DataSourceTableColumnsS3DataSourceColumn) GetType() ColumnType {
	return v.Type
}

// GetNullable returns DataSourceDataConnectionSettingsS3ConnectionSettingsTablesS3DataSourceTableColumnsS3DataSourceColumn.Nullable, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsS3ConnectionSettingsTablesS3DataSourceTableColumnsS3DataSourceColumn) GetNullable() bool {
	return v.Nullable
}

// DataSourceDataConnectionSettingsSnowflakeConnectionSettings includes the requested fields of the GraphQL type SnowflakeConnectionSettings.
// The GraphQL type's documentation follows.
//
// The Snowflake Data Source connection settings.
type DataSourceDataConnectionSettingsSnowflakeConnectionSettings struct {
	Typename *string `json:"__typename"`
	// The Snowflake account. This is the part before the "snowflakecomputing.com" part of your Snowflake URL.
	Account string `json:"account"`
	// The Snowflake database name.
	Database string `json:"database"`
	// The Snowflake warehouse name. It should be "PROPELLING" if you used the default name in the setup script.
	Warehouse string `json:"warehouse"`
	// The Snowflake schema.
	Schema string `json:"schema"`
	// The Snowflake username. It should be "PROPEL" if you used the default name in the setup script.
	Username string `json:"username"`
	// The Snowflake role. It should be "PROPELLER" if you used the default name in the setup script.
	Role string `json:"role"`
}

// GetTypename returns DataSourceDataConnectionSettingsSnowflakeConnectionSettings.Typename, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsSnowflakeConnectionSettings) GetTypename() *string {
	return v.Typename
}

// GetAccount returns DataSourceDataConnectionSettingsSnowflakeConnectionSettings.Account, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsSnowflakeConnectionSettings) GetAccount() string {
	return v.Account
}

// GetDatabase returns DataSourceDataConnectionSettingsSnowflakeConnectionSettings.Database, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsSnowflakeConnectionSettings) GetDatabase() string {
	return v.Database
}

// GetWarehouse returns DataSourceDataConnectionSettingsSnowflakeConnectionSettings.Warehouse, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsSnowflakeConnectionSettings) GetWarehouse() string {
	return v.Warehouse
}

// GetSchema returns DataSourceDataConnectionSettingsSnowflakeConnectionSettings.Schema, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsSnowflakeConnectionSettings) GetSchema() string {
	return v.Schema
}

// GetUsername returns DataSourceDataConnectionSettingsSnowflakeConnectionSettings.Username, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsSnowflakeConnectionSettings) GetUsername() string {
	return v.Username
}

// GetRole returns DataSourceDataConnectionSettingsSnowflakeConnectionSettings.Role, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsSnowflakeConnectionSettings) GetRole() string { return v.Role }

// DataSourceDataConnectionSettingsWebhookConnectionSettings includes the requested fields of the GraphQL type WebhookConnectionSettings.
// The GraphQL type's documentation follows.
//
// The Webhook Data Source connection settings.
type DataSourceDataConnectionSettingsWebhookConnectionSettings struct {
	Typename *string `json:"__typename"`
	// The HTTP basic authentication settings for the Webhook Data Source URL. If this parameter is not provided, anyone with the webhook URL will be able to send events. While it's OK to test without HTTP Basic authentication, we recommend enabling it.
	BasicAuth *DataSourceDataConnectionSettingsWebhookConnectionSettingsBasicAuthHttpBasicAuthSettings `json:"basicAuth"`
	// The additional columns for the Webhook Data Source table.
	Columns []*DataSourceDataConnectionSettingsWebhookConnectionSettingsColumnsWebhookDataSourceColumn `json:"columns"`
	// The tenant ID column, if any.
	Tenant *string `json:"tenant"`
	// The primary timestamp column, if any.
	Timestamp *string `json:"timestamp"`
	// The unique ID column, if any. Propel uses the primary timestamp and a unique ID to compose a primary key for determining whether records should be inserted, deleted, or updated.
	UniqueId *string `json:"uniqueId"`
	// The Webhook URL for posting JSON events
	WebhookUrl string `json:"webhookUrl"`
}

// GetTypename returns DataSourceDataConnectionSettingsWebhookConnectionSettings.Typename, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsWebhookConnectionSettings) GetTypename() *string {
	return v.Typename
}

// GetBasicAuth returns DataSourceDataConnectionSettingsWebhookConnectionSettings.BasicAuth, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsWebhookConnectionSettings) GetBasicAuth() *DataSourceDataConnectionSettingsWebhookConnectionSettingsBasicAuthHttpBasicAuthSettings {
	return v.BasicAuth
}

// GetColumns returns DataSourceDataConnectionSettingsWebhookConnectionSettings.Columns, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsWebhookConnectionSettings) GetColumns() []*DataSourceDataConnectionSettingsWebhookConnectionSettingsColumnsWebhookDataSourceColumn {
	return v.Columns
}

// GetTenant returns DataSourceDataConnectionSettingsWebhookConnectionSettings.Tenant, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsWebhookConnectionSettings) GetTenant() *string {
	return v.Tenant
}

// GetTimestamp returns DataSourceDataConnectionSettingsWebhookConnectionSettings.Timestamp, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsWebhookConnectionSettings) GetTimestamp() *string {
	return v.Timestamp
}

// GetUniqueId returns DataSourceDataConnectionSettingsWebhookConnectionSettings.UniqueId, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsWebhookConnectionSettings) GetUniqueId() *string {
	return v.UniqueId
}

// GetWebhookUrl returns DataSourceDataConnectionSettingsWebhookConnectionSettings.WebhookUrl, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsWebhookConnectionSettings) GetWebhookUrl() string {
	return v.WebhookUrl
}

// DataSourceDataConnectionSettingsWebhookConnectionSettingsBasicAuthHttpBasicAuthSettings includes the requested fields of the GraphQL type HttpBasicAuthSettings.
// The GraphQL type's documentation follows.
//
// The HTTP Basic authentication settings.
type DataSourceDataConnectionSettingsWebhookConnectionSettingsBasicAuthHttpBasicAuthSettings struct {
	// Username for HTTP Basic authentication that must be included in the Authorization header when uploading new data.
	Username string `json:"username"`
	// Password for HTTP Basic authentication that must be included in the Authorization header when uploading new data.
	Password string `json:"password"`
}

// GetUsername returns DataSourceDataConnectionSettingsWebhookConnectionSettingsBasicAuthHttpBasicAuthSettings.Username, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsWebhookConnectionSettingsBasicAuthHttpBasicAuthSettings) GetUsername() string {
	return v.Username
}

// GetPassword returns DataSourceDataConnectionSettingsWebhookConnectionSettingsBasicAuthHttpBasicAuthSettings.Password, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsWebhookConnectionSettingsBasicAuthHttpBasicAuthSettings) GetPassword() string {
	return v.Password
}

// DataSourceDataConnectionSettingsWebhookConnectionSettingsColumnsWebhookDataSourceColumn includes the requested fields of the GraphQL type WebhookDataSourceColumn.
// The GraphQL type's documentation follows.
//
// A column in the Webhook Data Source's table.
type DataSourceDataConnectionSettingsWebhookConnectionSettingsColumnsWebhookDataSourceColumn struct {
	// The column name.
	Name string `json:"name"`
	// The column type.
	Type ColumnType `json:"type"`
	// The JSON property that the column will be derived from. For example, if you POST a JSON event like this:
	// ```json
	// { "greeting": { "message": "hello, world" } }
	// ```
	// Then you can use the JSON property "greeting.message" to extract "hello, world" to a column.
	JsonProperty string `json:"jsonProperty"`
	// Whether the column's type is nullable or not.
	Nullable bool `json:"nullable"`
}

// GetName returns DataSourceDataConnectionSettingsWebhookConnectionSettingsColumnsWebhookDataSourceColumn.Name, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsWebhookConnectionSettingsColumnsWebhookDataSourceColumn) GetName() string {
	return v.Name
}

// GetType returns DataSourceDataConnectionSettingsWebhookConnectionSettingsColumnsWebhookDataSourceColumn.Type, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsWebhookConnectionSettingsColumnsWebhookDataSourceColumn) GetType() ColumnType {
	return v.Type
}

// GetJsonProperty returns DataSourceDataConnectionSettingsWebhookConnectionSettingsColumnsWebhookDataSourceColumn.JsonProperty, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsWebhookConnectionSettingsColumnsWebhookDataSourceColumn) GetJsonProperty() string {
	return v.JsonProperty
}

// GetNullable returns DataSourceDataConnectionSettingsWebhookConnectionSettingsColumnsWebhookDataSourceColumn.Nullable, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsWebhookConnectionSettingsColumnsWebhookDataSourceColumn) GetNullable() bool {
	return v.Nullable
}

// DataSourceDataDataPoolsDataPoolConnection includes the requested fields of the GraphQL type DataPoolConnection.
// The GraphQL type's documentation follows.
//
// The Data Pool connection object.
//
// Learn more about [pagination in GraphQL](https://www.propeldata.com/docs/api/pagination).
type DataSourceDataDataPoolsDataPoolConnection struct {
	// The Data Pool connection's nodes.
	Nodes []*DataSourceDataDataPoolsDataPoolConnectionNodesDataPool `json:"nodes"`
}

// GetNodes returns DataSourceDataDataPoolsDataPoolConnection.Nodes, and is useful for accessing the field via an interface.
func (v *DataSourceDataDataPoolsDataPoolConnection) GetNodes() []*DataSourceDataDataPoolsDataPoolConnectionNodesDataPool {
	return v.Nodes
}

// DataSourceDataDataPoolsDataPoolConnectionNodesDataPool includes the requested fields of the GraphQL type DataPool.
// The GraphQL type's documentation follows.
//
// The Data Pool object. Data Pools are Propel's high-speed data store and cache
//
// [Learn more about Data Pools](https://www.propeldata.com/docs/connect-your-data#key-concept-2-data-pools).
type DataSourceDataDataPoolsDataPoolConnectionNodesDataPool struct {
	// The Data Pool's unique identifier.
	Id string `json:"id"`
	// Whether the Data Pool has access control enabled or not.
	//
	// If the Data Pool has access control enabled, Applications must be assigned Data Pool Access
	// Policies in order to query the Data Pool and its Metrics.
	AccessControlEnabled bool `json:"accessControlEnabled"`
}

// GetId returns DataSourceDataDataPoolsDataPoolConnectionNodesDataPool.Id, and is useful for accessing the field via an interface.
func (v *DataSourceDataDataPoolsDataPoolConnectionNodesDataPool) GetId() string { return v.Id }

// GetAccessControlEnabled returns DataSourceDataDataPoolsDataPoolConnectionNodesDataPool.AccessControlEnabled, and is useful for accessing the field via an interface.
func (v *DataSourceDataDataPoolsDataPoolConnectionNodesDataPool) GetAccessControlEnabled() bool {
	return v.AccessControlEnabled
}

// DataSourceDataError includes the requested fields of the GraphQL type Error.
// The GraphQL type's documentation follows.
//
// The error object.
type DataSourceDataError struct {
	// The error message.
	Message string `json:"message"`
}

// GetMessage returns DataSourceDataError.Message, and is useful for accessing the field via an interface.
func (v *DataSourceDataError) GetMessage() string { return v.Message }

// DataSourceDataSource includes the requested fields of the GraphQL type DataSource.
// The GraphQL type's documentation follows.
//
// The Data Source object.
//
// A Data Source is a connection to your data warehouse. It has the necessary connection details for Propel to access Snowflake or any other supported Data Source.
//
// [Learn more about Data Sources](https://www.propeldata.com/docs/data-sources).
type DataSourceDataSource struct {
	DataSourceData `json:"-"`
}

// GetId returns DataSourceDataSource.Id, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetId() string { return v.DataSourceData.Id }

// GetType returns DataSourceDataSource.Type, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetType() DataSourceType { return v.DataSourceData.Type }

// GetStatus returns DataSourceDataSource.Status, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetStatus() DataSourceStatus { return v.DataSourceData.Status }

// GetError returns DataSourceDataSource.Error, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetError() *DataSourceDataError { return v.DataSourceData.Error }

// GetDataPools returns DataSourceDataSource.DataPools, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetDataPools() *DataSourceDataDataPoolsDataPoolConnection {
	return v.DataSourceData.DataPools
}

// GetConnectionSettings returns DataSourceDataSource.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetConnectionSettings() DataSourceDataConnectionSettings {
	return v.DataSourceData.ConnectionSettings
}

// GetTables returns DataSourceDataSource.Tables, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetTables() *DataSourceDataTablesTableConnection {
	return v.DataSourceData.Tables
}

// GetChecks returns DataSourceDataSource.Checks, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetChecks() []*DataSourceDataChecksDataSourceCheck {
	return v.DataSourceData.Checks
}

// GetTableIntrospections returns DataSourceDataSource.TableIntrospections, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetTableIntrospections() *DataSourceDataTableIntrospectionsTableIntrospectionConnection {
	return v.DataSourceData.TableIntrospections
}

// GetUniqueName returns DataSourceDataSource.UniqueName, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetUniqueName() string {
	return v.DataSourceData.CommonDataDataSource.UniqueName
}

// GetDescription returns DataSourceDataSource.Description, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetDescription() string {
	return v.DataSourceData.CommonDataDataSource.Description
}

// GetAccount returns DataSourceDataSource.Account, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetAccount() *CommonDataAccount {
	return v.DataSourceData.CommonDataDataSource.Account
}

// GetEnvironment returns DataSourceDataSource.Environment, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetEnvironment() *CommonDataEnvironment {
	return v.DataSourceData.CommonDataDataSource.Environment
}

// GetCreatedAt returns DataSourceDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetCreatedAt() time.Time {
	return v.DataSourceData.CommonDataDataSource.CreatedAt
}

// GetModifiedAt returns DataSourceDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetModifiedAt() time.Time {
	return v.DataSourceData.CommonDataDataSource.ModifiedAt
}

// GetCreatedBy returns DataSourceDataSource.CreatedBy, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetCreatedBy() string {
	return v.DataSourceData.CommonDataDataSource.CreatedBy
}

// GetModifiedBy returns DataSourceDataSource.ModifiedBy, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetModifiedBy() string {
	return v.DataSourceData.CommonDataDataSource.ModifiedBy
}

func (v *DataSourceDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourceDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourceDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataSourceData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataSourceDataSource struct {
	Id string `json:"id"`

	Type DataSourceType `json:"type"`

	Status DataSourceStatus `json:"status"`

	Error *DataSourceDataError `json:"error"`

	DataPools *DataSourceDataDataPoolsDataPoolConnection `json:"dataPools"`

	ConnectionSettings json.RawMessage `json:"connectionSettings"`

	Tables *DataSourceDataTablesTableConnection `json:"tables"`

	Checks []*DataSourceDataChecksDataSourceCheck `json:"checks"`

	TableIntrospections *DataSourceDataTableIntrospectionsTableIntrospectionConnection `json:"tableIntrospections"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *DataSourceDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourceDataSource) __premarshalJSON() (*__premarshalDataSourceDataSource, error) {
	var retval __premarshalDataSourceDataSource

	retval.Id = v.DataSourceData.Id
	retval.Type = v.DataSourceData.Type
	retval.Status = v.DataSourceData.Status
	retval.Error = v.DataSourceData.Error
	retval.DataPools = v.DataSourceData.DataPools
	{

		dst := &retval.ConnectionSettings
		src := v.DataSourceData.ConnectionSettings
		var err error
		*dst, err = __marshalDataSourceDataConnectionSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal DataSourceDataSource.DataSourceData.ConnectionSettings: %w", err)
		}
	}
	retval.Tables = v.DataSourceData.Tables
	retval.Checks = v.DataSourceData.Checks
	retval.TableIntrospections = v.DataSourceData.TableIntrospections
	retval.UniqueName = v.DataSourceData.CommonDataDataSource.UniqueName
	retval.Description = v.DataSourceData.CommonDataDataSource.Description
	retval.Account = v.DataSourceData.CommonDataDataSource.Account
	retval.Environment = v.DataSourceData.CommonDataDataSource.Environment
	retval.CreatedAt = v.DataSourceData.CommonDataDataSource.CreatedAt
	retval.ModifiedAt = v.DataSourceData.CommonDataDataSource.ModifiedAt
	retval.CreatedBy = v.DataSourceData.CommonDataDataSource.CreatedBy
	retval.ModifiedBy = v.DataSourceData.CommonDataDataSource.ModifiedBy
	return &retval, nil
}

// DataSourceDataTableIntrospectionsTableIntrospectionConnection includes the requested fields of the GraphQL type TableIntrospectionConnection.
// The GraphQL type's documentation follows.
//
// The table introspection connection object.
//
// Learn more about [pagination in GraphQL](https://www.propeldata.com/docs/api/pagination).
type DataSourceDataTableIntrospectionsTableIntrospectionConnection struct {
	// The table introspection connection's nodes.
	Nodes []*DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection `json:"nodes"`
}

// GetNodes returns DataSourceDataTableIntrospectionsTableIntrospectionConnection.Nodes, and is useful for accessing the field via an interface.
func (v *DataSourceDataTableIntrospectionsTableIntrospectionConnection) GetNodes() []*DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection {
	return v.Nodes
}

// DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection includes the requested fields of the GraphQL type TableIntrospection.
// The GraphQL type's documentation follows.
//
// The table introspection object.
//
// When setting up a Data Source, Propel may need to introspect tables in order to determine what tables and columns are available to create Data Pools from. The table introspection represents the lifecycle of this operation (whether it's in-progress, succeeded, or failed) and the resulting tables and columns. These will be captured as table and column objects, respectively.
type DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection struct {
	TableIntrospectionData `json:"-"`
}

// GetDataSource returns DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection.DataSource, and is useful for accessing the field via an interface.
func (v *DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) GetDataSource() *TableIntrospectionDataDataSource {
	return v.TableIntrospectionData.DataSource
}

// GetStatus returns DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection.Status, and is useful for accessing the field via an interface.
func (v *DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) GetStatus() TableIntrospectionStatus {
	return v.TableIntrospectionData.Status
}

// GetCreatedAt returns DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) GetCreatedAt() time.Time {
	return v.TableIntrospectionData.CreatedAt
}

// GetCreatedBy returns DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection.CreatedBy, and is useful for accessing the field via an interface.
func (v *DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) GetCreatedBy() string {
	return v.TableIntrospectionData.CreatedBy
}

// GetModifiedAt returns DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) GetModifiedAt() time.Time {
	return v.TableIntrospectionData.ModifiedAt
}

// GetModifiedBy returns DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection.ModifiedBy, and is useful for accessing the field via an interface.
func (v *DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) GetModifiedBy() string {
	return v.TableIntrospectionData.ModifiedBy
}

// GetNumTables returns DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection.NumTables, and is useful for accessing the field via an interface.
func (v *DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) GetNumTables() *int {
	return v.TableIntrospectionData.NumTables
}

func (v *DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TableIntrospectionData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection struct {
	DataSource *TableIntrospectionDataDataSource `json:"dataSource"`

	Status TableIntrospectionStatus `json:"status"`

	CreatedAt time.Time `json:"createdAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedAt time.Time `json:"modifiedAt"`

	ModifiedBy string `json:"modifiedBy"`

	NumTables *int `json:"numTables"`
}

func (v *DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) __premarshalJSON() (*__premarshalDataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection, error) {
	var retval __premarshalDataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection

	retval.DataSource = v.TableIntrospectionData.DataSource
	retval.Status = v.TableIntrospectionData.Status
	retval.CreatedAt = v.TableIntrospectionData.CreatedAt
	retval.CreatedBy = v.TableIntrospectionData.CreatedBy
	retval.ModifiedAt = v.TableIntrospectionData.ModifiedAt
	retval.ModifiedBy = v.TableIntrospectionData.ModifiedBy
	retval.NumTables = v.TableIntrospectionData.NumTables
	return &retval, nil
}

// DataSourceDataTablesTableConnection includes the requested fields of the GraphQL type TableConnection.
// The GraphQL type's documentation follows.
//
// The table connection object.
//
// Learn more about [pagination in GraphQL](https://www.propeldata.com/docs/api/pagination).
type DataSourceDataTablesTableConnection struct {
	// The table connection's nodes.
	Nodes []*DataSourceDataTablesTableConnectionNodesTable `json:"nodes"`
}

// GetNodes returns DataSourceDataTablesTableConnection.Nodes, and is useful for accessing the field via an interface.
func (v *DataSourceDataTablesTableConnection) GetNodes() []*DataSourceDataTablesTableConnectionNodesTable {
	return v.Nodes
}

// DataSourceDataTablesTableConnectionNodesTable includes the requested fields of the GraphQL type Table.
// The GraphQL type's documentation follows.
//
// The table object.
//
// Once a table introspection succeeds, it creates a new table object for every table it introspected.
type DataSourceDataTablesTableConnectionNodesTable struct {
	// The table's ID.
	Id string `json:"id"`
	// The table's name.
	Name string `json:"name"`
	// The table's columns.
	Columns *DataSourceDataTablesTableConnectionNodesTableColumnsColumnConnection `json:"columns"`
}

// GetId returns DataSourceDataTablesTableConnectionNodesTable.Id, and is useful for accessing the field via an interface.
func (v *DataSourceDataTablesTableConnectionNodesTable) GetId() string { return v.Id }

// GetName returns DataSourceDataTablesTableConnectionNodesTable.Name, and is useful for accessing the field via an interface.
func (v *DataSourceDataTablesTableConnectionNodesTable) GetName() string { return v.Name }

// GetColumns returns DataSourceDataTablesTableConnectionNodesTable.Columns, and is useful for accessing the field via an interface.
func (v *DataSourceDataTablesTableConnectionNodesTable) GetColumns() *DataSourceDataTablesTableConnectionNodesTableColumnsColumnConnection {
	return v.Columns
}

// DataSourceDataTablesTableConnectionNodesTableColumnsColumnConnection includes the requested fields of the GraphQL type ColumnConnection.
// The GraphQL type's documentation follows.
//
// The column connection object.
//
// Learn more about [pagination in GraphQL](https://www.propeldata.com/docs/api/pagination).
type DataSourceDataTablesTableConnectionNodesTableColumnsColumnConnection struct {
	// The column connection's nodes.
	Nodes []*DataSourceDataTablesTableConnectionNodesTableColumnsColumnConnectionNodesColumn `json:"nodes"`
}

// GetNodes returns DataSourceDataTablesTableConnectionNodesTableColumnsColumnConnection.Nodes, and is useful for accessing the field via an interface.
func (v *DataSourceDataTablesTableConnectionNodesTableColumnsColumnConnection) GetNodes() []*DataSourceDataTablesTableConnectionNodesTableColumnsColumnConnectionNodesColumn {
	return v.Nodes
}

// DataSourceDataTablesTableConnectionNodesTableColumnsColumnConnectionNodesColumn includes the requested fields of the GraphQL type Column.
// The GraphQL type's documentation follows.
//
// The column object.
//
// Once a table introspection succeeds, it creates a new table object for every table it introspected. Within each table object, it also creates a column object for every column it introspected.
type DataSourceDataTablesTableConnectionNodesTableColumnsColumnConnectionNodesColumn struct {
	ColumnData `json:"-"`
}

// GetName returns DataSourceDataTablesTableConnectionNodesTableColumnsColumnConnectionNodesColumn.Name, and is useful for accessing the field via an interface.
func (v *DataSourceDataTablesTableConnectionNodesTableColumnsColumnConnectionNodesColumn) GetName() string {
	return v.ColumnData.Name
}

// GetType returns DataSourceDataTablesTableConnectionNodesTableColumnsColumnConnectionNodesColumn.Type, and is useful for accessing the field via an interface.
func (v *DataSourceDataTablesTableConnectionNodesTableColumnsColumnConnectionNodesColumn) GetType() string {
	return v.ColumnData.Type
}

// GetIsNullable returns DataSourceDataTablesTableConnectionNodesTableColumnsColumnConnectionNodesColumn.IsNullable, and is useful for accessing the field via an interface.
func (v *DataSourceDataTablesTableConnectionNodesTableColumnsColumnConnectionNodesColumn) GetIsNullable() *bool {
	return v.ColumnData.IsNullable
}

func (v *DataSourceDataTablesTableConnectionNodesTableColumnsColumnConnectionNodesColumn) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourceDataTablesTableConnectionNodesTableColumnsColumnConnectionNodesColumn
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourceDataTablesTableConnectionNodesTableColumnsColumnConnectionNodesColumn = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ColumnData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataSourceDataTablesTableConnectionNodesTableColumnsColumnConnectionNodesColumn struct {
	Name string `json:"name"`

	Type string `json:"type"`

	IsNullable *bool `json:"isNullable"`
}

func (v *DataSourceDataTablesTableConnectionNodesTableColumnsColumnConnectionNodesColumn) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourceDataTablesTableConnectionNodesTableColumnsColumnConnectionNodesColumn) __premarshalJSON() (*__premarshalDataSourceDataTablesTableConnectionNodesTableColumnsColumnConnectionNodesColumn, error) {
	var retval __premarshalDataSourceDataTablesTableConnectionNodesTableColumnsColumnConnectionNodesColumn

	retval.Name = v.ColumnData.Name
	retval.Type = v.ColumnData.Type
	retval.IsNullable = v.ColumnData.IsNullable
	return &retval, nil
}

// DataSourceResponse is returned by DataSource on success.
type DataSourceResponse struct {
	// This query returns the Data Source specified by the given ID.
	//
	// A Data Source is a connection to your data warehouse. It has the necessary connection details for Propel to access Snowflake or any other supported Data Source.
	DataSource *DataSourceDataSource `json:"dataSource"`
}

// GetDataSource returns DataSourceResponse.DataSource, and is useful for accessing the field via an interface.
func (v *DataSourceResponse) GetDataSource() *DataSourceDataSource { return v.DataSource }

// The status of a Data Source.
type DataSourceStatus string

const (
	// The Data Source has been created, but it is not connected yet.
	DataSourceStatusCreated DataSourceStatus = "CREATED"
	// Propel is attempting to connect the Data Source.
	DataSourceStatusConnecting DataSourceStatus = "CONNECTING"
	// The Data Source is connected.
	DataSourceStatusConnected DataSourceStatus = "CONNECTED"
	// The Data Source failed to connect.
	DataSourceStatusBroken DataSourceStatus = "BROKEN"
	// Propel is deleting the Data Source.
	DataSourceStatusDeleting DataSourceStatus = "DELETING"
)

// The types of Data Sources.
type DataSourceType string

const (
	// Indicates a Webhook Data Source.
	DataSourceTypeWebhook DataSourceType = "WEBHOOK"
	// Indicates an S3 Data Source.
	DataSourceTypeS3 DataSourceType = "S3"
	// Indicates a Redshift Data Source.
	DataSourceTypeRedshift DataSourceType = "Redshift"
	// Indicates a Kafka Data Source.
	DataSourceTypeKafka DataSourceType = "KAFKA"
	// Indicates an Http Data Source.
	DataSourceTypeHttp DataSourceType = "Http"
	// Indicates a ClickHouse Data Source.
	DataSourceTypeClickhouse DataSourceType = "CLICKHOUSE"
	// Indicates a BigQuery Data Source.
	DataSourceTypeBigquery DataSourceType = "BIGQUERY"
	// Indicates a Snowflake Data Source.
	DataSourceTypeSnowflake DataSourceType = "Snowflake"
	// Indicates an internal Data Source.
	DataSourceTypeInternal DataSourceType = "INTERNAL"
)

// DataSourcesDataSourcesDataSourceConnection includes the requested fields of the GraphQL type DataSourceConnection.
// The GraphQL type's documentation follows.
//
// The Data Source connection object.
//
// Learn more about [pagination in GraphQL](https://www.propeldata.com/docs/api/pagination).
type DataSourcesDataSourcesDataSourceConnection struct {
	// The Data Source connection's page info.
	PageInfo *DataSourcesDataSourcesDataSourceConnectionPageInfo `json:"pageInfo"`
	// The Data Source connection's edges.
	Edges []*DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdge `json:"edges"`
}

// GetPageInfo returns DataSourcesDataSourcesDataSourceConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnection) GetPageInfo() *DataSourcesDataSourcesDataSourceConnectionPageInfo {
	return v.PageInfo
}

// GetEdges returns DataSourcesDataSourcesDataSourceConnection.Edges, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnection) GetEdges() []*DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdge {
	return v.Edges
}

// DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdge includes the requested fields of the GraphQL type DataSourceEdge.
// The GraphQL type's documentation follows.
//
// The Data Source edge object.
//
// Learn more about [pagination in GraphQL](https://www.propeldata.com/docs/api/pagination).
type DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdge struct {
	// The edge's node.
	Node *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource `json:"node"`
}

// GetNode returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdge.Node, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdge) GetNode() *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource {
	return v.Node
}

// DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource includes the requested fields of the GraphQL type DataSource.
// The GraphQL type's documentation follows.
//
// The Data Source object.
//
// A Data Source is a connection to your data warehouse. It has the necessary connection details for Propel to access Snowflake or any other supported Data Source.
//
// [Learn more about Data Sources](https://www.propeldata.com/docs/data-sources).
type DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource struct {
	DataSourceData `json:"-"`
}

// GetId returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.Id, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetId() string {
	return v.DataSourceData.Id
}

// GetType returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.Type, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetType() DataSourceType {
	return v.DataSourceData.Type
}

// GetStatus returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.Status, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetStatus() DataSourceStatus {
	return v.DataSourceData.Status
}

// GetError returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.Error, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetError() *DataSourceDataError {
	return v.DataSourceData.Error
}

// GetDataPools returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.DataPools, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetDataPools() *DataSourceDataDataPoolsDataPoolConnection {
	return v.DataSourceData.DataPools
}

// GetConnectionSettings returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetConnectionSettings() DataSourceDataConnectionSettings {
	return v.DataSourceData.ConnectionSettings
}

// GetTables returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.Tables, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetTables() *DataSourceDataTablesTableConnection {
	return v.DataSourceData.Tables
}

// GetChecks returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.Checks, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetChecks() []*DataSourceDataChecksDataSourceCheck {
	return v.DataSourceData.Checks
}

// GetTableIntrospections returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.TableIntrospections, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetTableIntrospections() *DataSourceDataTableIntrospectionsTableIntrospectionConnection {
	return v.DataSourceData.TableIntrospections
}

// GetUniqueName returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.UniqueName, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetUniqueName() string {
	return v.DataSourceData.CommonDataDataSource.UniqueName
}

// GetDescription returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.Description, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetDescription() string {
	return v.DataSourceData.CommonDataDataSource.Description
}

// GetAccount returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.Account, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetAccount() *CommonDataAccount {
	return v.DataSourceData.CommonDataDataSource.Account
}

// GetEnvironment returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.Environment, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetEnvironment() *CommonDataEnvironment {
	return v.DataSourceData.CommonDataDataSource.Environment
}

// GetCreatedAt returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetCreatedAt() time.Time {
	return v.DataSourceData.CommonDataDataSource.CreatedAt
}

// GetModifiedAt returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetModifiedAt() time.Time {
	return v.DataSourceData.CommonDataDataSource.ModifiedAt
}

// GetCreatedBy returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.CreatedBy, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetCreatedBy() string {
	return v.DataSourceData.CommonDataDataSource.CreatedBy
}

// GetModifiedBy returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.ModifiedBy, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetModifiedBy() string {
	return v.DataSourceData.CommonDataDataSource.ModifiedBy
}

func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataSourceData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource struct {
	Id string `json:"id"`

	Type DataSourceType `json:"type"`

	Status DataSourceStatus `json:"status"`

	Error *DataSourceDataError `json:"error"`

	DataPools *DataSourceDataDataPoolsDataPoolConnection `json:"dataPools"`

	ConnectionSettings json.RawMessage `json:"connectionSettings"`

	Tables *DataSourceDataTablesTableConnection `json:"tables"`

	Checks []*DataSourceDataChecksDataSourceCheck `json:"checks"`

	TableIntrospections *DataSourceDataTableIntrospectionsTableIntrospectionConnection `json:"tableIntrospections"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) __premarshalJSON() (*__premarshalDataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource, error) {
	var retval __premarshalDataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource

	retval.Id = v.DataSourceData.Id
	retval.Type = v.DataSourceData.Type
	retval.Status = v.DataSourceData.Status
	retval.Error = v.DataSourceData.Error
	retval.DataPools = v.DataSourceData.DataPools
	{

		dst := &retval.ConnectionSettings
		src := v.DataSourceData.ConnectionSettings
		var err error
		*dst, err = __marshalDataSourceDataConnectionSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.DataSourceData.ConnectionSettings: %w", err)
		}
	}
	retval.Tables = v.DataSourceData.Tables
	retval.Checks = v.DataSourceData.Checks
	retval.TableIntrospections = v.DataSourceData.TableIntrospections
	retval.UniqueName = v.DataSourceData.CommonDataDataSource.UniqueName
	retval.Description = v.DataSourceData.CommonDataDataSource.Description
	retval.Account = v.DataSourceData.CommonDataDataSource.Account
	retval.Environment = v.DataSourceData.CommonDataDataSource.Environment
	retval.CreatedAt = v.DataSourceData.CommonDataDataSource.CreatedAt
	retval.ModifiedAt = v.DataSourceData.CommonDataDataSource.ModifiedAt
	retval.CreatedBy = v.DataSourceData.CommonDataDataSource.CreatedBy
	retval.ModifiedBy = v.DataSourceData.CommonDataDataSource.ModifiedBy
	return &retval, nil
}

// DataSourcesDataSourcesDataSourceConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// The page info object used for pagination.
type DataSourcesDataSourcesDataSourceConnectionPageInfo struct {
	PageInfoData `json:"-"`
}

// GetStartCursor returns DataSourcesDataSourcesDataSourceConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionPageInfo) GetStartCursor() *string {
	return v.PageInfoData.StartCursor
}

// GetEndCursor returns DataSourcesDataSourcesDataSourceConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionPageInfo) GetEndCursor() *string {
	return v.PageInfoData.EndCursor
}

// GetHasNextPage returns DataSourcesDataSourcesDataSourceConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionPageInfo) GetHasNextPage() bool {
	return v.PageInfoData.HasNextPage
}

// GetHasPreviousPage returns DataSourcesDataSourcesDataSourceConnectionPageInfo.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionPageInfo) GetHasPreviousPage() bool {
	return v.PageInfoData.HasPreviousPage
}

func (v *DataSourcesDataSourcesDataSourceConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourcesDataSourcesDataSourceConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourcesDataSourcesDataSourceConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PageInfoData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataSourcesDataSourcesDataSourceConnectionPageInfo struct {
	StartCursor *string `json:"startCursor"`

	EndCursor *string `json:"endCursor"`

	HasNextPage bool `json:"hasNextPage"`

	HasPreviousPage bool `json:"hasPreviousPage"`
}

func (v *DataSourcesDataSourcesDataSourceConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourcesDataSourcesDataSourceConnectionPageInfo) __premarshalJSON() (*__premarshalDataSourcesDataSourcesDataSourceConnectionPageInfo, error) {
	var retval __premarshalDataSourcesDataSourcesDataSourceConnectionPageInfo

	retval.StartCursor = v.PageInfoData.StartCursor
	retval.EndCursor = v.PageInfoData.EndCursor
	retval.HasNextPage = v.PageInfoData.HasNextPage
	retval.HasPreviousPage = v.PageInfoData.HasPreviousPage
	return &retval, nil
}

// DataSourcesResponse is returned by DataSources on success.
type DataSourcesResponse struct {
	// This query returns the Data Sources within the Environment.
	//
	// A Data Source is a connection to your data warehouse. It has the necessary connection details for Propel to access Snowflake or any other supported Data Source. Environments are independent and isolated Propel workspaces for development, staging (testing), and production workloads.
	//
	// The `dataSources` query uses [cursor-based pagination](/docs/api/pagination) typical of GraphQL APIs. You can use the pairs of parameters `first` and `after` or `last` and `before` to page forward or backward through the results, respectively.
	//
	// For forward pagination, the `first` parameter defines the number of results to return, and the `after` parameter defines the cursor to continue from. You should pass the cursor for the _last_ result of the current page to `after`.
	//
	// For backward pagination, the `last` parameter defines the number of results to return, and the `before` parameter defines the cursor to continue from. You should pass the cursor for the _first_ result of the current page to `before`.
	DataSources *DataSourcesDataSourcesDataSourceConnection `json:"dataSources"`
}

// GetDataSources returns DataSourcesResponse.DataSources, and is useful for accessing the field via an interface.
func (v *DataSourcesResponse) GetDataSources() *DataSourcesDataSourcesDataSourceConnection {
	return v.DataSources
}

// DeleteDataPoolAccessPolicyResponse is returned by DeleteDataPoolAccessPolicy on success.
type DeleteDataPoolAccessPolicyResponse struct {
	// Deletes a Data Pool Access Policy by ID and returns its ID if the Data Pool Access Policy was deleted successfully.
	//
	// [Learn more about Data Pool Access Policy](https://www.propeldata.com/docs/control-access).
	DeleteDataPoolAccessPolicy *string `json:"deleteDataPoolAccessPolicy"`
}

// GetDeleteDataPoolAccessPolicy returns DeleteDataPoolAccessPolicyResponse.DeleteDataPoolAccessPolicy, and is useful for accessing the field via an interface.
func (v *DeleteDataPoolAccessPolicyResponse) GetDeleteDataPoolAccessPolicy() *string {
	return v.DeleteDataPoolAccessPolicy
}

// DeleteDataPoolByNameResponse is returned by DeleteDataPoolByName on success.
type DeleteDataPoolByNameResponse struct {
	// Deletes a Data Pool by unique name and returns its ID if the Data Pool was deleted successfully.
	DeleteDataPoolByName *string `json:"deleteDataPoolByName"`
}

// GetDeleteDataPoolByName returns DeleteDataPoolByNameResponse.DeleteDataPoolByName, and is useful for accessing the field via an interface.
func (v *DeleteDataPoolByNameResponse) GetDeleteDataPoolByName() *string {
	return v.DeleteDataPoolByName
}

// DeleteDataPoolResponse is returned by DeleteDataPool on success.
type DeleteDataPoolResponse struct {
	// Deletes a Data Pool by ID and returns its ID if the Data Pool was deleted successfully.
	DeleteDataPool *string `json:"deleteDataPool"`
}

// GetDeleteDataPool returns DeleteDataPoolResponse.DeleteDataPool, and is useful for accessing the field via an interface.
func (v *DeleteDataPoolResponse) GetDeleteDataPool() *string { return v.DeleteDataPool }

// DeleteDataSourceByNameResponse is returned by DeleteDataSourceByName on success.
type DeleteDataSourceByNameResponse struct {
	// Deletes a Data Source by unique name and returns its ID if the Data Source was deleted successfully.
	DeleteDataSourceByName *string `json:"deleteDataSourceByName"`
}

// GetDeleteDataSourceByName returns DeleteDataSourceByNameResponse.DeleteDataSourceByName, and is useful for accessing the field via an interface.
func (v *DeleteDataSourceByNameResponse) GetDeleteDataSourceByName() *string {
	return v.DeleteDataSourceByName
}

// DeleteDataSourceResponse is returned by DeleteDataSource on success.
type DeleteDataSourceResponse struct {
	// Deletes a Data Source by ID and returns its ID if the Data Source was deleted successfully.
	DeleteDataSource *string `json:"deleteDataSource"`
}

// GetDeleteDataSource returns DeleteDataSourceResponse.DeleteDataSource, and is useful for accessing the field via an interface.
func (v *DeleteDataSourceResponse) GetDeleteDataSource() *string { return v.DeleteDataSource }

// DeleteMaterializedViewResponse is returned by DeleteMaterializedView on success.
type DeleteMaterializedViewResponse struct {
	// Deletes a Materialized View and returns its ID if the Materialized View was deleted successfully.
	// Note that deleting a Materialized View does not delete its target Data Pool. If you want to delete its target
	// Data Pool, you must use the `deleteDataPool` mutation.
	DeleteMaterializedView *string `json:"deleteMaterializedView"`
}

// GetDeleteMaterializedView returns DeleteMaterializedViewResponse.DeleteMaterializedView, and is useful for accessing the field via an interface.
func (v *DeleteMaterializedViewResponse) GetDeleteMaterializedView() *string {
	return v.DeleteMaterializedView
}

// DeleteMetricByNameResponse is returned by DeleteMetricByName on success.
type DeleteMetricByNameResponse struct {
	// Deletes a Metric by unique name and returns its ID if the Metric was deleted successfully.
	DeleteMetricByName *string `json:"deleteMetricByName"`
}

// GetDeleteMetricByName returns DeleteMetricByNameResponse.DeleteMetricByName, and is useful for accessing the field via an interface.
func (v *DeleteMetricByNameResponse) GetDeleteMetricByName() *string { return v.DeleteMetricByName }

// DeleteMetricResponse is returned by DeleteMetric on success.
type DeleteMetricResponse struct {
	// Deletes a Metric by ID and returns its ID if the Metric was deleted successfully.
	DeleteMetric *string `json:"deleteMetric"`
}

// GetDeleteMetric returns DeleteMetricResponse.DeleteMetric, and is useful for accessing the field via an interface.
func (v *DeleteMetricResponse) GetDeleteMetric() *string { return v.DeleteMetric }

// DeletePolicyResponse is returned by DeletePolicy on success.
type DeletePolicyResponse struct {
	// Deletes a Policy. The associated Application will no longer have access to the Metric's data.
	DeletePolicy *string `json:"deletePolicy"`
}

// GetDeletePolicy returns DeletePolicyResponse.DeletePolicy, and is useful for accessing the field via an interface.
func (v *DeletePolicyResponse) GetDeletePolicy() *string { return v.DeletePolicy }

// DimensionData includes the GraphQL fields of Dimension requested by the fragment DimensionData.
// The GraphQL type's documentation follows.
//
// The Dimension object that represents a column in a table.
type DimensionData struct {
	// The column name it represents.
	ColumnName string `json:"columnName"`
	// The column data type.
	Type string `json:"type"`
	// Whether the column is nullable.
	IsNullable *bool `json:"isNullable"`
	// Whether the column is a unique key.
	IsUniqueKey *bool `json:"isUniqueKey"`
}

// GetColumnName returns DimensionData.ColumnName, and is useful for accessing the field via an interface.
func (v *DimensionData) GetColumnName() string { return v.ColumnName }

// GetType returns DimensionData.Type, and is useful for accessing the field via an interface.
func (v *DimensionData) GetType() string { return v.Type }

// GetIsNullable returns DimensionData.IsNullable, and is useful for accessing the field via an interface.
func (v *DimensionData) GetIsNullable() *bool { return v.IsNullable }

// GetIsUniqueKey returns DimensionData.IsUniqueKey, and is useful for accessing the field via an interface.
func (v *DimensionData) GetIsUniqueKey() *bool { return v.IsUniqueKey }

// The fields for creating or modifying a Dimension.
type DimensionInput struct {
	// The name of the column to create the Dimension from.
	ColumnName string `json:"columnName"`
}

// GetColumnName returns DimensionInput.ColumnName, and is useful for accessing the field via an interface.
func (v *DimensionInput) GetColumnName() string { return v.ColumnName }

// FilterData includes the GraphQL fields of Filter requested by the fragment FilterData.
// The GraphQL type's documentation follows.
//
// The fields of a filter.
//
// You can construct more complex filters using `and` and `or`. For example, to construct a filter equivalent to
//
// ```
// (value > 0 AND value <= 100) OR status = "confirmed"
// ```
//
// you could write
//
// ```
// {
// "column": "value",
// "operator": "GREATER_THAN",
// "value": "0",
// "and": [{
// "column": "value",
// "operator": "LESS_THAN_OR_EQUAL_TO",
// "value": "0"
// }],
// "or": [{
// "column": "status",
// "operator": "EQUALS",
// "value": "confirmed"
// }]
// }
// ```
//
// Note that `and` takes precedence over `or`.
type FilterData struct {
	// The name of the column to filter on.
	Column string `json:"column"`
	// The operation to perform when comparing the column and filter values.
	Operator FilterOperator `json:"operator"`
	// The value to compare the column to.
	Value *string `json:"value"`
	// Additional filters to AND with this one. AND takes precedence over OR.
	And []*FilterDataAndFilter `json:"and"`
	// Additional filters to OR with this one. AND takes precedence over OR.
	Or []*FilterDataOrFilter `json:"or"`
}

// GetColumn returns FilterData.Column, and is useful for accessing the field via an interface.
func (v *FilterData) GetColumn() string { return v.Column }

// GetOperator returns FilterData.Operator, and is useful for accessing the field via an interface.
func (v *FilterData) GetOperator() FilterOperator { return v.Operator }

// GetValue returns FilterData.Value, and is useful for accessing the field via an interface.
func (v *FilterData) GetValue() *string { return v.Value }

// GetAnd returns FilterData.And, and is useful for accessing the field via an interface.
func (v *FilterData) GetAnd() []*FilterDataAndFilter { return v.And }

// GetOr returns FilterData.Or, and is useful for accessing the field via an interface.
func (v *FilterData) GetOr() []*FilterDataOrFilter { return v.Or }

// FilterDataAndFilter includes the requested fields of the GraphQL type Filter.
// The GraphQL type's documentation follows.
//
// The fields of a filter.
//
// You can construct more complex filters using `and` and `or`. For example, to construct a filter equivalent to
//
// ```
// (value > 0 AND value <= 100) OR status = "confirmed"
// ```
//
// you could write
//
// ```
// {
// "column": "value",
// "operator": "GREATER_THAN",
// "value": "0",
// "and": [{
// "column": "value",
// "operator": "LESS_THAN_OR_EQUAL_TO",
// "value": "0"
// }],
// "or": [{
// "column": "status",
// "operator": "EQUALS",
// "value": "confirmed"
// }]
// }
// ```
//
// Note that `and` takes precedence over `or`.
type FilterDataAndFilter struct {
	// The name of the column to filter on.
	Column string `json:"column"`
	// The operation to perform when comparing the column and filter values.
	Operator FilterOperator `json:"operator"`
	// The value to compare the column to.
	Value *string `json:"value"`
}

// GetColumn returns FilterDataAndFilter.Column, and is useful for accessing the field via an interface.
func (v *FilterDataAndFilter) GetColumn() string { return v.Column }

// GetOperator returns FilterDataAndFilter.Operator, and is useful for accessing the field via an interface.
func (v *FilterDataAndFilter) GetOperator() FilterOperator { return v.Operator }

// GetValue returns FilterDataAndFilter.Value, and is useful for accessing the field via an interface.
func (v *FilterDataAndFilter) GetValue() *string { return v.Value }

// FilterDataOrFilter includes the requested fields of the GraphQL type Filter.
// The GraphQL type's documentation follows.
//
// The fields of a filter.
//
// You can construct more complex filters using `and` and `or`. For example, to construct a filter equivalent to
//
// ```
// (value > 0 AND value <= 100) OR status = "confirmed"
// ```
//
// you could write
//
// ```
// {
// "column": "value",
// "operator": "GREATER_THAN",
// "value": "0",
// "and": [{
// "column": "value",
// "operator": "LESS_THAN_OR_EQUAL_TO",
// "value": "0"
// }],
// "or": [{
// "column": "status",
// "operator": "EQUALS",
// "value": "confirmed"
// }]
// }
// ```
//
// Note that `and` takes precedence over `or`.
type FilterDataOrFilter struct {
	// The name of the column to filter on.
	Column string `json:"column"`
	// The operation to perform when comparing the column and filter values.
	Operator FilterOperator `json:"operator"`
	// The value to compare the column to.
	Value *string `json:"value"`
}

// GetColumn returns FilterDataOrFilter.Column, and is useful for accessing the field via an interface.
func (v *FilterDataOrFilter) GetColumn() string { return v.Column }

// GetOperator returns FilterDataOrFilter.Operator, and is useful for accessing the field via an interface.
func (v *FilterDataOrFilter) GetOperator() FilterOperator { return v.Operator }

// GetValue returns FilterDataOrFilter.Value, and is useful for accessing the field via an interface.
func (v *FilterDataOrFilter) GetValue() *string { return v.Value }

// The fields of a filter.
//
// You can construct more complex filters using `and` and `or`. For example, to construct a filter equivalent to
//
// ```
// (value > 0 AND value <= 100) OR status = "confirmed"
// ```
//
// you could write
//
// ```
// {
// "column": "value",
// "operator": "GREATER_THAN",
// "value": "0",
// "and": [{
// "column": "value",
// "operator": "LESS_THAN_OR_EQUAL_TO",
// "value": "0"
// }],
// "or": [{
// "column": "status",
// "operator": "EQUALS",
// "value": "confirmed"
// }]
// }
// ```
//
// Note that `and` takes precedence over `or`.
type FilterInput struct {
	// The name of the column to filter on.
	Column string `json:"column"`
	// The operation to perform when comparing the column and filter values.
	Operator FilterOperator `json:"operator"`
	// The value to compare the column to.
	Value *string `json:"value"`
	// Additional filters to AND with this one. AND takes precedence over OR.
	And []*FilterInput `json:"and,omitempty"`
	// Additional filters to OR with this one. AND takes precedence over OR.
	Or []*FilterInput `json:"or,omitempty"`
}

// GetColumn returns FilterInput.Column, and is useful for accessing the field via an interface.
func (v *FilterInput) GetColumn() string { return v.Column }

// GetOperator returns FilterInput.Operator, and is useful for accessing the field via an interface.
func (v *FilterInput) GetOperator() FilterOperator { return v.Operator }

// GetValue returns FilterInput.Value, and is useful for accessing the field via an interface.
func (v *FilterInput) GetValue() *string { return v.Value }

// GetAnd returns FilterInput.And, and is useful for accessing the field via an interface.
func (v *FilterInput) GetAnd() []*FilterInput { return v.And }

// GetOr returns FilterInput.Or, and is useful for accessing the field via an interface.
func (v *FilterInput) GetOr() []*FilterInput { return v.Or }

// The available Filter operators.
type FilterOperator string

const (
	// Selects values that are equal to the specified value.
	FilterOperatorEquals FilterOperator = "EQUALS"
	// Selects values that are not equal to the specified value.
	FilterOperatorNotEquals FilterOperator = "NOT_EQUALS"
	// Selects values that are greater than the specified value.
	FilterOperatorGreaterThan FilterOperator = "GREATER_THAN"
	// Selects values that are greater or equal to the specified value.
	FilterOperatorGreaterThanOrEqualTo FilterOperator = "GREATER_THAN_OR_EQUAL_TO"
	// Selects values that are less than the specified value.
	FilterOperatorLessThan FilterOperator = "LESS_THAN"
	// Selects values that are less or equal to the specified value.
	FilterOperatorLessThanOrEqualTo FilterOperator = "LESS_THAN_OR_EQUAL_TO"
	// Selects values that are null. This operator does not accept a value.
	FilterOperatorIsNull FilterOperator = "IS_NULL"
	// Selects values that are not null. This operator does not accept a value.
	FilterOperatorIsNotNull FilterOperator = "IS_NOT_NULL"
	// Selects values that match the specified pattern.
	FilterOperatorLike FilterOperator = "LIKE"
	// "Selects values that do not match the specified pattern.
	FilterOperatorNotLike FilterOperator = "NOT_LIKE"
)

// GqlError includes the GraphQL fields of Error requested by the fragment GqlError.
// The GraphQL type's documentation follows.
//
// The error object.
type GqlError struct {
	// The error code.
	Code *int `json:"code"`
	// The error message.
	Message string `json:"message"`
}

// GetCode returns GqlError.Code, and is useful for accessing the field via an interface.
func (v *GqlError) GetCode() *int { return v.Code }

// GetMessage returns GqlError.Message, and is useful for accessing the field via an interface.
func (v *GqlError) GetMessage() string { return v.Message }

// The fields for specifying an HTTP Data Source's Basic authentication settings.
type HttpBasicAuthInput struct {
	// The username for HTTP Basic authentication that must be included in the Authorization header when uploading new data.
	Username string `json:"username"`
	// The password for HTTP Basic authentication that must be included in the Authorization header when uploading new data.
	Password string `json:"password"`
}

// GetUsername returns HttpBasicAuthInput.Username, and is useful for accessing the field via an interface.
func (v *HttpBasicAuthInput) GetUsername() string { return v.Username }

// GetPassword returns HttpBasicAuthInput.Password, and is useful for accessing the field via an interface.
func (v *HttpBasicAuthInput) GetPassword() string { return v.Password }

// The HTTP Data Source connection settings.
type HttpConnectionSettingsInput struct {
	// The HTTP Basic authentication settings for uploading new data.
	//
	// If this parameter is not provided, anyone with the URL to your tables will be able to upload data. While it's OK to test without HTTP Basic authentication, we recommend enabling it.
	BasicAuth *HttpBasicAuthInput `json:"basicAuth,omitempty"`
	// The HTTP Data Source's tables.
	Tables []*HttpDataSourceTableInput `json:"tables,omitempty"`
}

// GetBasicAuth returns HttpConnectionSettingsInput.BasicAuth, and is useful for accessing the field via an interface.
func (v *HttpConnectionSettingsInput) GetBasicAuth() *HttpBasicAuthInput { return v.BasicAuth }

// GetTables returns HttpConnectionSettingsInput.Tables, and is useful for accessing the field via an interface.
func (v *HttpConnectionSettingsInput) GetTables() []*HttpDataSourceTableInput { return v.Tables }

// The fields for specifying a column in an HTTP Data Source's table.
type HttpDataSourceColumnInput struct {
	// The column name. It has to be unique within a Table.
	Name string `json:"name"`
	// The column type.
	Type ColumnType `json:"type"`
	// The ClickHouse type to use when `type` is set to `CLICKHOUSE`.
	ClickHouseType *string `json:"clickHouseType"`
	// Whether the column's type is nullable or not.
	Nullable bool `json:"nullable"`
}

// GetName returns HttpDataSourceColumnInput.Name, and is useful for accessing the field via an interface.
func (v *HttpDataSourceColumnInput) GetName() string { return v.Name }

// GetType returns HttpDataSourceColumnInput.Type, and is useful for accessing the field via an interface.
func (v *HttpDataSourceColumnInput) GetType() ColumnType { return v.Type }

// GetClickHouseType returns HttpDataSourceColumnInput.ClickHouseType, and is useful for accessing the field via an interface.
func (v *HttpDataSourceColumnInput) GetClickHouseType() *string { return v.ClickHouseType }

// GetNullable returns HttpDataSourceColumnInput.Nullable, and is useful for accessing the field via an interface.
func (v *HttpDataSourceColumnInput) GetNullable() bool { return v.Nullable }

// The fields for specifying an HTTP Data Source's table.
type HttpDataSourceTableInput struct {
	// The name of the table
	Name string `json:"name"`
	// All the columns present in the table
	Columns []*HttpDataSourceColumnInput `json:"columns,omitempty"`
}

// GetName returns HttpDataSourceTableInput.Name, and is useful for accessing the field via an interface.
func (v *HttpDataSourceTableInput) GetName() string { return v.Name }

// GetColumns returns HttpDataSourceTableInput.Columns, and is useful for accessing the field via an interface.
func (v *HttpDataSourceTableInput) GetColumns() []*HttpDataSourceColumnInput { return v.Columns }

// The ID or unique name input.
//
// If both ID and unique name are provided, the ID will take precedence.
type IdOrUniqueName struct {
	// The unique identifier of the object.
	Id *string `json:"id"`
	// The unique name of the object.
	UniqueName *string `json:"uniqueName"`
}

// GetId returns IdOrUniqueName.Id, and is useful for accessing the field via an interface.
func (v *IdOrUniqueName) GetId() *string { return v.Id }

// GetUniqueName returns IdOrUniqueName.UniqueName, and is useful for accessing the field via an interface.
func (v *IdOrUniqueName) GetUniqueName() *string { return v.UniqueName }

type JobStatus string

const (
	// The Job was created, but is not yet being executed.
	JobStatusCreated JobStatus = "CREATED"
	// The Job is executing.
	JobStatusInProgress JobStatus = "IN_PROGRESS"
	// The Job succeeded.
	JobStatusSucceeded JobStatus = "SUCCEEDED"
	// The Job failed. Check the error message.
	JobStatusFailed JobStatus = "FAILED"
)

// MaterializedViewData includes the GraphQL fields of MaterializedView requested by the fragment MaterializedViewData.
type MaterializedViewData struct {
	// The Materialized View's unique identifier.
	Id                         string `json:"id"`
	CommonDataMaterializedView `json:"-"`
	// The SQL that the Materialized View executes.
	Sql string `json:"sql"`
	// The Materialized View's destination (AKA "target") Data Pool.
	Destination *MaterializedViewDataDestinationDataPool `json:"destination"`
	// The Materialized View's source Data Pool.
	Source *MaterializedViewDataSourceDataPool `json:"source"`
	// Other Data Pools queried by the Materialized View.
	Others []*MaterializedViewDataOthersDataPool `json:"others"`
}

// GetId returns MaterializedViewData.Id, and is useful for accessing the field via an interface.
func (v *MaterializedViewData) GetId() string { return v.Id }

// GetSql returns MaterializedViewData.Sql, and is useful for accessing the field via an interface.
func (v *MaterializedViewData) GetSql() string { return v.Sql }

// GetDestination returns MaterializedViewData.Destination, and is useful for accessing the field via an interface.
func (v *MaterializedViewData) GetDestination() *MaterializedViewDataDestinationDataPool {
	return v.Destination
}

// GetSource returns MaterializedViewData.Source, and is useful for accessing the field via an interface.
func (v *MaterializedViewData) GetSource() *MaterializedViewDataSourceDataPool { return v.Source }

// GetOthers returns MaterializedViewData.Others, and is useful for accessing the field via an interface.
func (v *MaterializedViewData) GetOthers() []*MaterializedViewDataOthersDataPool { return v.Others }

// GetUniqueName returns MaterializedViewData.UniqueName, and is useful for accessing the field via an interface.
func (v *MaterializedViewData) GetUniqueName() string { return v.CommonDataMaterializedView.UniqueName }

// GetDescription returns MaterializedViewData.Description, and is useful for accessing the field via an interface.
func (v *MaterializedViewData) GetDescription() string {
	return v.CommonDataMaterializedView.Description
}

// GetAccount returns MaterializedViewData.Account, and is useful for accessing the field via an interface.
func (v *MaterializedViewData) GetAccount() *CommonDataAccount {
	return v.CommonDataMaterializedView.Account
}

// GetEnvironment returns MaterializedViewData.Environment, and is useful for accessing the field via an interface.
func (v *MaterializedViewData) GetEnvironment() *CommonDataEnvironment {
	return v.CommonDataMaterializedView.Environment
}

// GetCreatedAt returns MaterializedViewData.CreatedAt, and is useful for accessing the field via an interface.
func (v *MaterializedViewData) GetCreatedAt() time.Time {
	return v.CommonDataMaterializedView.CreatedAt
}

// GetModifiedAt returns MaterializedViewData.ModifiedAt, and is useful for accessing the field via an interface.
func (v *MaterializedViewData) GetModifiedAt() time.Time {
	return v.CommonDataMaterializedView.ModifiedAt
}

// GetCreatedBy returns MaterializedViewData.CreatedBy, and is useful for accessing the field via an interface.
func (v *MaterializedViewData) GetCreatedBy() string { return v.CommonDataMaterializedView.CreatedBy }

// GetModifiedBy returns MaterializedViewData.ModifiedBy, and is useful for accessing the field via an interface.
func (v *MaterializedViewData) GetModifiedBy() string { return v.CommonDataMaterializedView.ModifiedBy }

func (v *MaterializedViewData) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MaterializedViewData
		graphql.NoUnmarshalJSON
	}
	firstPass.MaterializedViewData = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CommonDataMaterializedView)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMaterializedViewData struct {
	Id string `json:"id"`

	Sql string `json:"sql"`

	Destination *MaterializedViewDataDestinationDataPool `json:"destination"`

	Source *MaterializedViewDataSourceDataPool `json:"source"`

	Others []*MaterializedViewDataOthersDataPool `json:"others"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *MaterializedViewData) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MaterializedViewData) __premarshalJSON() (*__premarshalMaterializedViewData, error) {
	var retval __premarshalMaterializedViewData

	retval.Id = v.Id
	retval.Sql = v.Sql
	retval.Destination = v.Destination
	retval.Source = v.Source
	retval.Others = v.Others
	retval.UniqueName = v.CommonDataMaterializedView.UniqueName
	retval.Description = v.CommonDataMaterializedView.Description
	retval.Account = v.CommonDataMaterializedView.Account
	retval.Environment = v.CommonDataMaterializedView.Environment
	retval.CreatedAt = v.CommonDataMaterializedView.CreatedAt
	retval.ModifiedAt = v.CommonDataMaterializedView.ModifiedAt
	retval.CreatedBy = v.CommonDataMaterializedView.CreatedBy
	retval.ModifiedBy = v.CommonDataMaterializedView.ModifiedBy
	return &retval, nil
}

// MaterializedViewDataDestinationDataPool includes the requested fields of the GraphQL type DataPool.
// The GraphQL type's documentation follows.
//
// The Data Pool object. Data Pools are Propel's high-speed data store and cache
//
// [Learn more about Data Pools](https://www.propeldata.com/docs/connect-your-data#key-concept-2-data-pools).
type MaterializedViewDataDestinationDataPool struct {
	// The Data Pool's unique identifier.
	Id string `json:"id"`
}

// GetId returns MaterializedViewDataDestinationDataPool.Id, and is useful for accessing the field via an interface.
func (v *MaterializedViewDataDestinationDataPool) GetId() string { return v.Id }

// MaterializedViewDataOthersDataPool includes the requested fields of the GraphQL type DataPool.
// The GraphQL type's documentation follows.
//
// The Data Pool object. Data Pools are Propel's high-speed data store and cache
//
// [Learn more about Data Pools](https://www.propeldata.com/docs/connect-your-data#key-concept-2-data-pools).
type MaterializedViewDataOthersDataPool struct {
	// The Data Pool's unique identifier.
	Id string `json:"id"`
}

// GetId returns MaterializedViewDataOthersDataPool.Id, and is useful for accessing the field via an interface.
func (v *MaterializedViewDataOthersDataPool) GetId() string { return v.Id }

// MaterializedViewDataSourceDataPool includes the requested fields of the GraphQL type DataPool.
// The GraphQL type's documentation follows.
//
// The Data Pool object. Data Pools are Propel's high-speed data store and cache
//
// [Learn more about Data Pools](https://www.propeldata.com/docs/connect-your-data#key-concept-2-data-pools).
type MaterializedViewDataSourceDataPool struct {
	// The Data Pool's unique identifier.
	Id string `json:"id"`
}

// GetId returns MaterializedViewDataSourceDataPool.Id, and is useful for accessing the field via an interface.
func (v *MaterializedViewDataSourceDataPool) GetId() string { return v.Id }

// MaterializedViewMaterializedView includes the requested fields of the GraphQL type MaterializedView.
type MaterializedViewMaterializedView struct {
	MaterializedViewData `json:"-"`
}

// GetId returns MaterializedViewMaterializedView.Id, and is useful for accessing the field via an interface.
func (v *MaterializedViewMaterializedView) GetId() string { return v.MaterializedViewData.Id }

// GetSql returns MaterializedViewMaterializedView.Sql, and is useful for accessing the field via an interface.
func (v *MaterializedViewMaterializedView) GetSql() string { return v.MaterializedViewData.Sql }

// GetDestination returns MaterializedViewMaterializedView.Destination, and is useful for accessing the field via an interface.
func (v *MaterializedViewMaterializedView) GetDestination() *MaterializedViewDataDestinationDataPool {
	return v.MaterializedViewData.Destination
}

// GetSource returns MaterializedViewMaterializedView.Source, and is useful for accessing the field via an interface.
func (v *MaterializedViewMaterializedView) GetSource() *MaterializedViewDataSourceDataPool {
	return v.MaterializedViewData.Source
}

// GetOthers returns MaterializedViewMaterializedView.Others, and is useful for accessing the field via an interface.
func (v *MaterializedViewMaterializedView) GetOthers() []*MaterializedViewDataOthersDataPool {
	return v.MaterializedViewData.Others
}

// GetUniqueName returns MaterializedViewMaterializedView.UniqueName, and is useful for accessing the field via an interface.
func (v *MaterializedViewMaterializedView) GetUniqueName() string {
	return v.MaterializedViewData.CommonDataMaterializedView.UniqueName
}

// GetDescription returns MaterializedViewMaterializedView.Description, and is useful for accessing the field via an interface.
func (v *MaterializedViewMaterializedView) GetDescription() string {
	return v.MaterializedViewData.CommonDataMaterializedView.Description
}

// GetAccount returns MaterializedViewMaterializedView.Account, and is useful for accessing the field via an interface.
func (v *MaterializedViewMaterializedView) GetAccount() *CommonDataAccount {
	return v.MaterializedViewData.CommonDataMaterializedView.Account
}

// GetEnvironment returns MaterializedViewMaterializedView.Environment, and is useful for accessing the field via an interface.
func (v *MaterializedViewMaterializedView) GetEnvironment() *CommonDataEnvironment {
	return v.MaterializedViewData.CommonDataMaterializedView.Environment
}

// GetCreatedAt returns MaterializedViewMaterializedView.CreatedAt, and is useful for accessing the field via an interface.
func (v *MaterializedViewMaterializedView) GetCreatedAt() time.Time {
	return v.MaterializedViewData.CommonDataMaterializedView.CreatedAt
}

// GetModifiedAt returns MaterializedViewMaterializedView.ModifiedAt, and is useful for accessing the field via an interface.
func (v *MaterializedViewMaterializedView) GetModifiedAt() time.Time {
	return v.MaterializedViewData.CommonDataMaterializedView.ModifiedAt
}

// GetCreatedBy returns MaterializedViewMaterializedView.CreatedBy, and is useful for accessing the field via an interface.
func (v *MaterializedViewMaterializedView) GetCreatedBy() string {
	return v.MaterializedViewData.CommonDataMaterializedView.CreatedBy
}

// GetModifiedBy returns MaterializedViewMaterializedView.ModifiedBy, and is useful for accessing the field via an interface.
func (v *MaterializedViewMaterializedView) GetModifiedBy() string {
	return v.MaterializedViewData.CommonDataMaterializedView.ModifiedBy
}

func (v *MaterializedViewMaterializedView) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MaterializedViewMaterializedView
		graphql.NoUnmarshalJSON
	}
	firstPass.MaterializedViewMaterializedView = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MaterializedViewData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMaterializedViewMaterializedView struct {
	Id string `json:"id"`

	Sql string `json:"sql"`

	Destination *MaterializedViewDataDestinationDataPool `json:"destination"`

	Source *MaterializedViewDataSourceDataPool `json:"source"`

	Others []*MaterializedViewDataOthersDataPool `json:"others"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *MaterializedViewMaterializedView) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MaterializedViewMaterializedView) __premarshalJSON() (*__premarshalMaterializedViewMaterializedView, error) {
	var retval __premarshalMaterializedViewMaterializedView

	retval.Id = v.MaterializedViewData.Id
	retval.Sql = v.MaterializedViewData.Sql
	retval.Destination = v.MaterializedViewData.Destination
	retval.Source = v.MaterializedViewData.Source
	retval.Others = v.MaterializedViewData.Others
	retval.UniqueName = v.MaterializedViewData.CommonDataMaterializedView.UniqueName
	retval.Description = v.MaterializedViewData.CommonDataMaterializedView.Description
	retval.Account = v.MaterializedViewData.CommonDataMaterializedView.Account
	retval.Environment = v.MaterializedViewData.CommonDataMaterializedView.Environment
	retval.CreatedAt = v.MaterializedViewData.CommonDataMaterializedView.CreatedAt
	retval.ModifiedAt = v.MaterializedViewData.CommonDataMaterializedView.ModifiedAt
	retval.CreatedBy = v.MaterializedViewData.CommonDataMaterializedView.CreatedBy
	retval.ModifiedBy = v.MaterializedViewData.CommonDataMaterializedView.ModifiedBy
	return &retval, nil
}

// MaterializedViewResponse is returned by MaterializedView on success.
type MaterializedViewResponse struct {
	// This query returns the Materialized View specified by the given ID.
	MaterializedView *MaterializedViewMaterializedView `json:"materializedView"`
}

// GetMaterializedView returns MaterializedViewResponse.MaterializedView, and is useful for accessing the field via an interface.
func (v *MaterializedViewResponse) GetMaterializedView() *MaterializedViewMaterializedView {
	return v.MaterializedView
}

// Parameters for the MergeTree table engine.
type MergeTreeTableEngineInput struct {
	// The type is always `MERGE_TREE`.
	Type *TableEngineType `json:"type"`
}

// GetType returns MergeTreeTableEngineInput.Type, and is useful for accessing the field via an interface.
func (v *MergeTreeTableEngineInput) GetType() *TableEngineType { return v.Type }

// MetricByNameMetric includes the requested fields of the GraphQL type Metric.
// The GraphQL type's documentation follows.
//
// The Metric object.
//
// A Metric is a business indicator measured over time.
//
// [Learn more about Metrics](/docs/key-concepts#metric).
type MetricByNameMetric struct {
	MetricData `json:"-"`
}

// GetId returns MetricByNameMetric.Id, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetId() string { return v.MetricData.Id }

// GetType returns MetricByNameMetric.Type, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetType() MetricType { return v.MetricData.Type }

// GetAccessControlEnabled returns MetricByNameMetric.AccessControlEnabled, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetAccessControlEnabled() bool { return v.MetricData.AccessControlEnabled }

// GetDataPool returns MetricByNameMetric.DataPool, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetDataPool() *MetricDataDataPool { return v.MetricData.DataPool }

// GetDimensions returns MetricByNameMetric.Dimensions, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetDimensions() []*MetricDataDimensionsDimension {
	return v.MetricData.Dimensions
}

// GetTimestamp returns MetricByNameMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetTimestamp() *MetricDataTimestampDimension {
	return v.MetricData.Timestamp
}

// GetMeasure returns MetricByNameMetric.Measure, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetMeasure() *MetricDataMeasureDimension { return v.MetricData.Measure }

// GetSettings returns MetricByNameMetric.Settings, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetSettings() MetricDataSettingsMetricSettings {
	return v.MetricData.Settings
}

// GetUniqueName returns MetricByNameMetric.UniqueName, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetUniqueName() string { return v.MetricData.CommonDataMetric.UniqueName }

// GetDescription returns MetricByNameMetric.Description, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetDescription() string {
	return v.MetricData.CommonDataMetric.Description
}

// GetAccount returns MetricByNameMetric.Account, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetAccount() *CommonDataAccount {
	return v.MetricData.CommonDataMetric.Account
}

// GetEnvironment returns MetricByNameMetric.Environment, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetEnvironment() *CommonDataEnvironment {
	return v.MetricData.CommonDataMetric.Environment
}

// GetCreatedAt returns MetricByNameMetric.CreatedAt, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetCreatedAt() time.Time { return v.MetricData.CommonDataMetric.CreatedAt }

// GetModifiedAt returns MetricByNameMetric.ModifiedAt, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetModifiedAt() time.Time {
	return v.MetricData.CommonDataMetric.ModifiedAt
}

// GetCreatedBy returns MetricByNameMetric.CreatedBy, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetCreatedBy() string { return v.MetricData.CommonDataMetric.CreatedBy }

// GetModifiedBy returns MetricByNameMetric.ModifiedBy, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetModifiedBy() string { return v.MetricData.CommonDataMetric.ModifiedBy }

func (v *MetricByNameMetric) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricByNameMetric
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricByNameMetric = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MetricData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricByNameMetric struct {
	Id string `json:"id"`

	Type MetricType `json:"type"`

	AccessControlEnabled bool `json:"accessControlEnabled"`

	DataPool *MetricDataDataPool `json:"dataPool"`

	Dimensions []*MetricDataDimensionsDimension `json:"dimensions"`

	Timestamp *MetricDataTimestampDimension `json:"timestamp"`

	Measure *MetricDataMeasureDimension `json:"measure"`

	Settings json.RawMessage `json:"settings"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *MetricByNameMetric) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricByNameMetric) __premarshalJSON() (*__premarshalMetricByNameMetric, error) {
	var retval __premarshalMetricByNameMetric

	retval.Id = v.MetricData.Id
	retval.Type = v.MetricData.Type
	retval.AccessControlEnabled = v.MetricData.AccessControlEnabled
	retval.DataPool = v.MetricData.DataPool
	retval.Dimensions = v.MetricData.Dimensions
	retval.Timestamp = v.MetricData.Timestamp
	retval.Measure = v.MetricData.Measure
	{

		dst := &retval.Settings
		src := v.MetricData.Settings
		var err error
		*dst, err = __marshalMetricDataSettingsMetricSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal MetricByNameMetric.MetricData.Settings: %w", err)
		}
	}
	retval.UniqueName = v.MetricData.CommonDataMetric.UniqueName
	retval.Description = v.MetricData.CommonDataMetric.Description
	retval.Account = v.MetricData.CommonDataMetric.Account
	retval.Environment = v.MetricData.CommonDataMetric.Environment
	retval.CreatedAt = v.MetricData.CommonDataMetric.CreatedAt
	retval.ModifiedAt = v.MetricData.CommonDataMetric.ModifiedAt
	retval.CreatedBy = v.MetricData.CommonDataMetric.CreatedBy
	retval.ModifiedBy = v.MetricData.CommonDataMetric.ModifiedBy
	return &retval, nil
}

// MetricByNameResponse is returned by MetricByName on success.
type MetricByNameResponse struct {
	// This query returns the Metric specified by the given unique name.
	//
	// A Metric is a business indicator measured over time.
	Metric *MetricByNameMetric `json:"metric"`
}

// GetMetric returns MetricByNameResponse.Metric, and is useful for accessing the field via an interface.
func (v *MetricByNameResponse) GetMetric() *MetricByNameMetric { return v.Metric }

// MetricData includes the GraphQL fields of Metric requested by the fragment MetricData.
// The GraphQL type's documentation follows.
//
// The Metric object.
//
// A Metric is a business indicator measured over time.
//
// [Learn more about Metrics](/docs/key-concepts#metric).
type MetricData struct {
	CommonDataMetric `json:"-"`
	// The Metric's unique identifier.
	Id string `json:"id"`
	// The Metric's type. The different Metric types determine how the values are calculated.
	Type MetricType `json:"type"`
	// Whether or not access control is enabled for the Metric.
	AccessControlEnabled bool `json:"accessControlEnabled"`
	// The Data Pool that powers this Metric.
	DataPool *MetricDataDataPool `json:"dataPool"`
	// The Metric's Dimensions. These Dimensions are available to Query Filters.
	Dimensions []*MetricDataDimensionsDimension `json:"dimensions"`
	// The Metric's timestamp, if any. This is the same as its Data Pool's timestamp, if any.
	Timestamp *MetricDataTimestampDimension `json:"timestamp"`
	// The Metric's measure. Access this from the Metric's `settings` object instead.
	Measure *MetricDataMeasureDimension `json:"measure"`
	// The settings for the Metric. The settings are specific to the Metric's type.
	Settings MetricDataSettingsMetricSettings `json:"-"`
}

// GetId returns MetricData.Id, and is useful for accessing the field via an interface.
func (v *MetricData) GetId() string { return v.Id }

// GetType returns MetricData.Type, and is useful for accessing the field via an interface.
func (v *MetricData) GetType() MetricType { return v.Type }

// GetAccessControlEnabled returns MetricData.AccessControlEnabled, and is useful for accessing the field via an interface.
func (v *MetricData) GetAccessControlEnabled() bool { return v.AccessControlEnabled }

// GetDataPool returns MetricData.DataPool, and is useful for accessing the field via an interface.
func (v *MetricData) GetDataPool() *MetricDataDataPool { return v.DataPool }

// GetDimensions returns MetricData.Dimensions, and is useful for accessing the field via an interface.
func (v *MetricData) GetDimensions() []*MetricDataDimensionsDimension { return v.Dimensions }

// GetTimestamp returns MetricData.Timestamp, and is useful for accessing the field via an interface.
func (v *MetricData) GetTimestamp() *MetricDataTimestampDimension { return v.Timestamp }

// GetMeasure returns MetricData.Measure, and is useful for accessing the field via an interface.
func (v *MetricData) GetMeasure() *MetricDataMeasureDimension { return v.Measure }

// GetSettings returns MetricData.Settings, and is useful for accessing the field via an interface.
func (v *MetricData) GetSettings() MetricDataSettingsMetricSettings { return v.Settings }

// GetUniqueName returns MetricData.UniqueName, and is useful for accessing the field via an interface.
func (v *MetricData) GetUniqueName() string { return v.CommonDataMetric.UniqueName }

// GetDescription returns MetricData.Description, and is useful for accessing the field via an interface.
func (v *MetricData) GetDescription() string { return v.CommonDataMetric.Description }

// GetAccount returns MetricData.Account, and is useful for accessing the field via an interface.
func (v *MetricData) GetAccount() *CommonDataAccount { return v.CommonDataMetric.Account }

// GetEnvironment returns MetricData.Environment, and is useful for accessing the field via an interface.
func (v *MetricData) GetEnvironment() *CommonDataEnvironment { return v.CommonDataMetric.Environment }

// GetCreatedAt returns MetricData.CreatedAt, and is useful for accessing the field via an interface.
func (v *MetricData) GetCreatedAt() time.Time { return v.CommonDataMetric.CreatedAt }

// GetModifiedAt returns MetricData.ModifiedAt, and is useful for accessing the field via an interface.
func (v *MetricData) GetModifiedAt() time.Time { return v.CommonDataMetric.ModifiedAt }

// GetCreatedBy returns MetricData.CreatedBy, and is useful for accessing the field via an interface.
func (v *MetricData) GetCreatedBy() string { return v.CommonDataMetric.CreatedBy }

// GetModifiedBy returns MetricData.ModifiedBy, and is useful for accessing the field via an interface.
func (v *MetricData) GetModifiedBy() string { return v.CommonDataMetric.ModifiedBy }

func (v *MetricData) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricData
		Settings json.RawMessage `json:"settings"`
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricData = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CommonDataMetric)
	if err != nil {
		return err
	}

	{
		dst := &v.Settings
		src := firstPass.Settings
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalMetricDataSettingsMetricSettings(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal MetricData.Settings: %w", err)
			}
		}
	}
	return nil
}

type __premarshalMetricData struct {
	Id string `json:"id"`

	Type MetricType `json:"type"`

	AccessControlEnabled bool `json:"accessControlEnabled"`

	DataPool *MetricDataDataPool `json:"dataPool"`

	Dimensions []*MetricDataDimensionsDimension `json:"dimensions"`

	Timestamp *MetricDataTimestampDimension `json:"timestamp"`

	Measure *MetricDataMeasureDimension `json:"measure"`

	Settings json.RawMessage `json:"settings"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *MetricData) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricData) __premarshalJSON() (*__premarshalMetricData, error) {
	var retval __premarshalMetricData

	retval.Id = v.Id
	retval.Type = v.Type
	retval.AccessControlEnabled = v.AccessControlEnabled
	retval.DataPool = v.DataPool
	retval.Dimensions = v.Dimensions
	retval.Timestamp = v.Timestamp
	retval.Measure = v.Measure
	{

		dst := &retval.Settings
		src := v.Settings
		var err error
		*dst, err = __marshalMetricDataSettingsMetricSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal MetricData.Settings: %w", err)
		}
	}
	retval.UniqueName = v.CommonDataMetric.UniqueName
	retval.Description = v.CommonDataMetric.Description
	retval.Account = v.CommonDataMetric.Account
	retval.Environment = v.CommonDataMetric.Environment
	retval.CreatedAt = v.CommonDataMetric.CreatedAt
	retval.ModifiedAt = v.CommonDataMetric.ModifiedAt
	retval.CreatedBy = v.CommonDataMetric.CreatedBy
	retval.ModifiedBy = v.CommonDataMetric.ModifiedBy
	return &retval, nil
}

// MetricDataDataPool includes the requested fields of the GraphQL type DataPool.
// The GraphQL type's documentation follows.
//
// The Data Pool object. Data Pools are Propel's high-speed data store and cache
//
// [Learn more about Data Pools](https://www.propeldata.com/docs/connect-your-data#key-concept-2-data-pools).
type MetricDataDataPool struct {
	DataPoolData `json:"-"`
}

// GetId returns MetricDataDataPool.Id, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetId() string { return v.DataPoolData.Id }

// GetDataSource returns MetricDataDataPool.DataSource, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetDataSource() *DataPoolDataDataSource {
	return v.DataPoolData.DataSource
}

// GetStatus returns MetricDataDataPool.Status, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetStatus() DataPoolStatus { return v.DataPoolData.Status }

// GetError returns MetricDataDataPool.Error, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetError() *DataPoolDataError { return v.DataPoolData.Error }

// GetTable returns MetricDataDataPool.Table, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetTable() string { return v.DataPoolData.Table }

// GetTenant returns MetricDataDataPool.Tenant, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetTenant() *DataPoolDataTenant { return v.DataPoolData.Tenant }

// GetTimestamp returns MetricDataDataPool.Timestamp, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetTimestamp() *DataPoolDataTimestamp { return v.DataPoolData.Timestamp }

// GetColumns returns MetricDataDataPool.Columns, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetColumns() *DataPoolDataColumnsDataPoolColumnConnection {
	return v.DataPoolData.Columns
}

// GetUniqueId returns MetricDataDataPool.UniqueId, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetUniqueId() *DataPoolDataUniqueId { return v.DataPoolData.UniqueId }

// GetSyncing returns MetricDataDataPool.Syncing, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetSyncing() *DataPoolDataSyncingDataPoolSyncing {
	return v.DataPoolData.Syncing
}

// GetAvailableMeasures returns MetricDataDataPool.AvailableMeasures, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetAvailableMeasures() *DataPoolDataAvailableMeasuresDataPoolColumnConnection {
	return v.DataPoolData.AvailableMeasures
}

// GetSetupTasks returns MetricDataDataPool.SetupTasks, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetSetupTasks() []*DataPoolDataSetupTasksDataPoolSetupTask {
	return v.DataPoolData.SetupTasks
}

// GetSyncs returns MetricDataDataPool.Syncs, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetSyncs() *DataPoolDataSyncsSyncConnection { return v.DataPoolData.Syncs }

// GetDataPoolAccessPolicies returns MetricDataDataPool.DataPoolAccessPolicies, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetDataPoolAccessPolicies() *DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnection {
	return v.DataPoolData.DataPoolAccessPolicies
}

// GetAccessControlEnabled returns MetricDataDataPool.AccessControlEnabled, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetAccessControlEnabled() bool {
	return v.DataPoolData.AccessControlEnabled
}

// GetUniqueName returns MetricDataDataPool.UniqueName, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetUniqueName() string {
	return v.DataPoolData.CommonDataDataPool.UniqueName
}

// GetDescription returns MetricDataDataPool.Description, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetDescription() string {
	return v.DataPoolData.CommonDataDataPool.Description
}

// GetAccount returns MetricDataDataPool.Account, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetAccount() *CommonDataAccount {
	return v.DataPoolData.CommonDataDataPool.Account
}

// GetEnvironment returns MetricDataDataPool.Environment, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetEnvironment() *CommonDataEnvironment {
	return v.DataPoolData.CommonDataDataPool.Environment
}

// GetCreatedAt returns MetricDataDataPool.CreatedAt, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetCreatedAt() time.Time {
	return v.DataPoolData.CommonDataDataPool.CreatedAt
}

// GetModifiedAt returns MetricDataDataPool.ModifiedAt, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetModifiedAt() time.Time {
	return v.DataPoolData.CommonDataDataPool.ModifiedAt
}

// GetCreatedBy returns MetricDataDataPool.CreatedBy, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetCreatedBy() string {
	return v.DataPoolData.CommonDataDataPool.CreatedBy
}

// GetModifiedBy returns MetricDataDataPool.ModifiedBy, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetModifiedBy() string {
	return v.DataPoolData.CommonDataDataPool.ModifiedBy
}

func (v *MetricDataDataPool) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricDataDataPool
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricDataDataPool = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataPoolData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricDataDataPool struct {
	Id string `json:"id"`

	DataSource *DataPoolDataDataSource `json:"dataSource"`

	Status DataPoolStatus `json:"status"`

	Error *DataPoolDataError `json:"error"`

	Table string `json:"table"`

	Tenant *DataPoolDataTenant `json:"tenant"`

	Timestamp *DataPoolDataTimestamp `json:"timestamp"`

	Columns *DataPoolDataColumnsDataPoolColumnConnection `json:"columns"`

	UniqueId *DataPoolDataUniqueId `json:"uniqueId"`

	Syncing *DataPoolDataSyncingDataPoolSyncing `json:"syncing"`

	AvailableMeasures *DataPoolDataAvailableMeasuresDataPoolColumnConnection `json:"availableMeasures"`

	SetupTasks []*DataPoolDataSetupTasksDataPoolSetupTask `json:"setupTasks"`

	Syncs *DataPoolDataSyncsSyncConnection `json:"syncs"`

	DataPoolAccessPolicies *DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnection `json:"dataPoolAccessPolicies"`

	AccessControlEnabled bool `json:"accessControlEnabled"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *MetricDataDataPool) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricDataDataPool) __premarshalJSON() (*__premarshalMetricDataDataPool, error) {
	var retval __premarshalMetricDataDataPool

	retval.Id = v.DataPoolData.Id
	retval.DataSource = v.DataPoolData.DataSource
	retval.Status = v.DataPoolData.Status
	retval.Error = v.DataPoolData.Error
	retval.Table = v.DataPoolData.Table
	retval.Tenant = v.DataPoolData.Tenant
	retval.Timestamp = v.DataPoolData.Timestamp
	retval.Columns = v.DataPoolData.Columns
	retval.UniqueId = v.DataPoolData.UniqueId
	retval.Syncing = v.DataPoolData.Syncing
	retval.AvailableMeasures = v.DataPoolData.AvailableMeasures
	retval.SetupTasks = v.DataPoolData.SetupTasks
	retval.Syncs = v.DataPoolData.Syncs
	retval.DataPoolAccessPolicies = v.DataPoolData.DataPoolAccessPolicies
	retval.AccessControlEnabled = v.DataPoolData.AccessControlEnabled
	retval.UniqueName = v.DataPoolData.CommonDataDataPool.UniqueName
	retval.Description = v.DataPoolData.CommonDataDataPool.Description
	retval.Account = v.DataPoolData.CommonDataDataPool.Account
	retval.Environment = v.DataPoolData.CommonDataDataPool.Environment
	retval.CreatedAt = v.DataPoolData.CommonDataDataPool.CreatedAt
	retval.ModifiedAt = v.DataPoolData.CommonDataDataPool.ModifiedAt
	retval.CreatedBy = v.DataPoolData.CommonDataDataPool.CreatedBy
	retval.ModifiedBy = v.DataPoolData.CommonDataDataPool.ModifiedBy
	return &retval, nil
}

// MetricDataDimensionsDimension includes the requested fields of the GraphQL type Dimension.
// The GraphQL type's documentation follows.
//
// The Dimension object that represents a column in a table.
type MetricDataDimensionsDimension struct {
	DimensionData `json:"-"`
}

// GetColumnName returns MetricDataDimensionsDimension.ColumnName, and is useful for accessing the field via an interface.
func (v *MetricDataDimensionsDimension) GetColumnName() string { return v.DimensionData.ColumnName }

// GetType returns MetricDataDimensionsDimension.Type, and is useful for accessing the field via an interface.
func (v *MetricDataDimensionsDimension) GetType() string { return v.DimensionData.Type }

// GetIsNullable returns MetricDataDimensionsDimension.IsNullable, and is useful for accessing the field via an interface.
func (v *MetricDataDimensionsDimension) GetIsNullable() *bool { return v.DimensionData.IsNullable }

// GetIsUniqueKey returns MetricDataDimensionsDimension.IsUniqueKey, and is useful for accessing the field via an interface.
func (v *MetricDataDimensionsDimension) GetIsUniqueKey() *bool { return v.DimensionData.IsUniqueKey }

func (v *MetricDataDimensionsDimension) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricDataDimensionsDimension
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricDataDimensionsDimension = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DimensionData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricDataDimensionsDimension struct {
	ColumnName string `json:"columnName"`

	Type string `json:"type"`

	IsNullable *bool `json:"isNullable"`

	IsUniqueKey *bool `json:"isUniqueKey"`
}

func (v *MetricDataDimensionsDimension) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricDataDimensionsDimension) __premarshalJSON() (*__premarshalMetricDataDimensionsDimension, error) {
	var retval __premarshalMetricDataDimensionsDimension

	retval.ColumnName = v.DimensionData.ColumnName
	retval.Type = v.DimensionData.Type
	retval.IsNullable = v.DimensionData.IsNullable
	retval.IsUniqueKey = v.DimensionData.IsUniqueKey
	return &retval, nil
}

// MetricDataMeasureDimension includes the requested fields of the GraphQL type Dimension.
// The GraphQL type's documentation follows.
//
// The Dimension object that represents a column in a table.
type MetricDataMeasureDimension struct {
	DimensionData `json:"-"`
}

// GetColumnName returns MetricDataMeasureDimension.ColumnName, and is useful for accessing the field via an interface.
func (v *MetricDataMeasureDimension) GetColumnName() string { return v.DimensionData.ColumnName }

// GetType returns MetricDataMeasureDimension.Type, and is useful for accessing the field via an interface.
func (v *MetricDataMeasureDimension) GetType() string { return v.DimensionData.Type }

// GetIsNullable returns MetricDataMeasureDimension.IsNullable, and is useful for accessing the field via an interface.
func (v *MetricDataMeasureDimension) GetIsNullable() *bool { return v.DimensionData.IsNullable }

// GetIsUniqueKey returns MetricDataMeasureDimension.IsUniqueKey, and is useful for accessing the field via an interface.
func (v *MetricDataMeasureDimension) GetIsUniqueKey() *bool { return v.DimensionData.IsUniqueKey }

func (v *MetricDataMeasureDimension) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricDataMeasureDimension
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricDataMeasureDimension = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DimensionData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricDataMeasureDimension struct {
	ColumnName string `json:"columnName"`

	Type string `json:"type"`

	IsNullable *bool `json:"isNullable"`

	IsUniqueKey *bool `json:"isUniqueKey"`
}

func (v *MetricDataMeasureDimension) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricDataMeasureDimension) __premarshalJSON() (*__premarshalMetricDataMeasureDimension, error) {
	var retval __premarshalMetricDataMeasureDimension

	retval.ColumnName = v.DimensionData.ColumnName
	retval.Type = v.DimensionData.Type
	retval.IsNullable = v.DimensionData.IsNullable
	retval.IsUniqueKey = v.DimensionData.IsUniqueKey
	return &retval, nil
}

// MetricDataSettingsAverageMetricSettings includes the requested fields of the GraphQL type AverageMetricSettings.
// The GraphQL type's documentation follows.
//
// Settings for Average Metrics.
type MetricDataSettingsAverageMetricSettings struct {
	Typename *string `json:"__typename"`
	// Metric Filters allow defining a Metric with a subset of records from the given Data Pool. If no Metric Filters are present, all records will be included. To filter at query time, add Dimensions and use the `filters` property on the `timeSeriesInput`, `counterInput`, or `leaderboardInput` objects. There is no need to add `filters` to be able to filter at query time.
	Filters []*MetricDataSettingsAverageMetricSettingsFiltersFilter `json:"filters"`
	// The Dimension to be averaged.
	Measure *MetricDataSettingsAverageMetricSettingsMeasureDimension `json:"measure"`
}

// GetTypename returns MetricDataSettingsAverageMetricSettings.Typename, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsAverageMetricSettings) GetTypename() *string { return v.Typename }

// GetFilters returns MetricDataSettingsAverageMetricSettings.Filters, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsAverageMetricSettings) GetFilters() []*MetricDataSettingsAverageMetricSettingsFiltersFilter {
	return v.Filters
}

// GetMeasure returns MetricDataSettingsAverageMetricSettings.Measure, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsAverageMetricSettings) GetMeasure() *MetricDataSettingsAverageMetricSettingsMeasureDimension {
	return v.Measure
}

// MetricDataSettingsAverageMetricSettingsFiltersFilter includes the requested fields of the GraphQL type Filter.
// The GraphQL type's documentation follows.
//
// The fields of a filter.
//
// You can construct more complex filters using `and` and `or`. For example, to construct a filter equivalent to
//
// ```
// (value > 0 AND value <= 100) OR status = "confirmed"
// ```
//
// you could write
//
// ```
// {
// "column": "value",
// "operator": "GREATER_THAN",
// "value": "0",
// "and": [{
// "column": "value",
// "operator": "LESS_THAN_OR_EQUAL_TO",
// "value": "0"
// }],
// "or": [{
// "column": "status",
// "operator": "EQUALS",
// "value": "confirmed"
// }]
// }
// ```
//
// Note that `and` takes precedence over `or`.
type MetricDataSettingsAverageMetricSettingsFiltersFilter struct {
	FilterData `json:"-"`
}

// GetColumn returns MetricDataSettingsAverageMetricSettingsFiltersFilter.Column, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsAverageMetricSettingsFiltersFilter) GetColumn() string {
	return v.FilterData.Column
}

// GetOperator returns MetricDataSettingsAverageMetricSettingsFiltersFilter.Operator, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsAverageMetricSettingsFiltersFilter) GetOperator() FilterOperator {
	return v.FilterData.Operator
}

// GetValue returns MetricDataSettingsAverageMetricSettingsFiltersFilter.Value, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsAverageMetricSettingsFiltersFilter) GetValue() *string {
	return v.FilterData.Value
}

// GetAnd returns MetricDataSettingsAverageMetricSettingsFiltersFilter.And, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsAverageMetricSettingsFiltersFilter) GetAnd() []*FilterDataAndFilter {
	return v.FilterData.And
}

// GetOr returns MetricDataSettingsAverageMetricSettingsFiltersFilter.Or, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsAverageMetricSettingsFiltersFilter) GetOr() []*FilterDataOrFilter {
	return v.FilterData.Or
}

func (v *MetricDataSettingsAverageMetricSettingsFiltersFilter) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricDataSettingsAverageMetricSettingsFiltersFilter
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricDataSettingsAverageMetricSettingsFiltersFilter = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.FilterData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricDataSettingsAverageMetricSettingsFiltersFilter struct {
	Column string `json:"column"`

	Operator FilterOperator `json:"operator"`

	Value *string `json:"value"`

	And []*FilterDataAndFilter `json:"and"`

	Or []*FilterDataOrFilter `json:"or"`
}

func (v *MetricDataSettingsAverageMetricSettingsFiltersFilter) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricDataSettingsAverageMetricSettingsFiltersFilter) __premarshalJSON() (*__premarshalMetricDataSettingsAverageMetricSettingsFiltersFilter, error) {
	var retval __premarshalMetricDataSettingsAverageMetricSettingsFiltersFilter

	retval.Column = v.FilterData.Column
	retval.Operator = v.FilterData.Operator
	retval.Value = v.FilterData.Value
	retval.And = v.FilterData.And
	retval.Or = v.FilterData.Or
	return &retval, nil
}

// MetricDataSettingsAverageMetricSettingsMeasureDimension includes the requested fields of the GraphQL type Dimension.
// The GraphQL type's documentation follows.
//
// The Dimension object that represents a column in a table.
type MetricDataSettingsAverageMetricSettingsMeasureDimension struct {
	DimensionData `json:"-"`
}

// GetColumnName returns MetricDataSettingsAverageMetricSettingsMeasureDimension.ColumnName, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsAverageMetricSettingsMeasureDimension) GetColumnName() string {
	return v.DimensionData.ColumnName
}

// GetType returns MetricDataSettingsAverageMetricSettingsMeasureDimension.Type, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsAverageMetricSettingsMeasureDimension) GetType() string {
	return v.DimensionData.Type
}

// GetIsNullable returns MetricDataSettingsAverageMetricSettingsMeasureDimension.IsNullable, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsAverageMetricSettingsMeasureDimension) GetIsNullable() *bool {
	return v.DimensionData.IsNullable
}

// GetIsUniqueKey returns MetricDataSettingsAverageMetricSettingsMeasureDimension.IsUniqueKey, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsAverageMetricSettingsMeasureDimension) GetIsUniqueKey() *bool {
	return v.DimensionData.IsUniqueKey
}

func (v *MetricDataSettingsAverageMetricSettingsMeasureDimension) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricDataSettingsAverageMetricSettingsMeasureDimension
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricDataSettingsAverageMetricSettingsMeasureDimension = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DimensionData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricDataSettingsAverageMetricSettingsMeasureDimension struct {
	ColumnName string `json:"columnName"`

	Type string `json:"type"`

	IsNullable *bool `json:"isNullable"`

	IsUniqueKey *bool `json:"isUniqueKey"`
}

func (v *MetricDataSettingsAverageMetricSettingsMeasureDimension) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricDataSettingsAverageMetricSettingsMeasureDimension) __premarshalJSON() (*__premarshalMetricDataSettingsAverageMetricSettingsMeasureDimension, error) {
	var retval __premarshalMetricDataSettingsAverageMetricSettingsMeasureDimension

	retval.ColumnName = v.DimensionData.ColumnName
	retval.Type = v.DimensionData.Type
	retval.IsNullable = v.DimensionData.IsNullable
	retval.IsUniqueKey = v.DimensionData.IsUniqueKey
	return &retval, nil
}

// MetricDataSettingsCountDistinctMetricSettings includes the requested fields of the GraphQL type CountDistinctMetricSettings.
// The GraphQL type's documentation follows.
//
// Settings for Count Distinct Metrics.
type MetricDataSettingsCountDistinctMetricSettings struct {
	Typename *string `json:"__typename"`
	// Metric Filters allow defining a Metric with a subset of records from the given Data Pool. If no Metric Filters are present, all records will be included. To filter at query time, add Dimensions and use the `filters` property on the `timeSeriesInput`, `counterInput`, or `leaderboardInput` objects. There is no need to add `filters` to be able to filter at query time.
	Filters []*MetricDataSettingsCountDistinctMetricSettingsFiltersFilter `json:"filters"`
	// The Dimension where the count distinct operation is going to be performed.
	Dimension *MetricDataSettingsCountDistinctMetricSettingsDimension `json:"dimension"`
}

// GetTypename returns MetricDataSettingsCountDistinctMetricSettings.Typename, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCountDistinctMetricSettings) GetTypename() *string { return v.Typename }

// GetFilters returns MetricDataSettingsCountDistinctMetricSettings.Filters, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCountDistinctMetricSettings) GetFilters() []*MetricDataSettingsCountDistinctMetricSettingsFiltersFilter {
	return v.Filters
}

// GetDimension returns MetricDataSettingsCountDistinctMetricSettings.Dimension, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCountDistinctMetricSettings) GetDimension() *MetricDataSettingsCountDistinctMetricSettingsDimension {
	return v.Dimension
}

// MetricDataSettingsCountDistinctMetricSettingsDimension includes the requested fields of the GraphQL type Dimension.
// The GraphQL type's documentation follows.
//
// The Dimension object that represents a column in a table.
type MetricDataSettingsCountDistinctMetricSettingsDimension struct {
	DimensionData `json:"-"`
}

// GetColumnName returns MetricDataSettingsCountDistinctMetricSettingsDimension.ColumnName, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCountDistinctMetricSettingsDimension) GetColumnName() string {
	return v.DimensionData.ColumnName
}

// GetType returns MetricDataSettingsCountDistinctMetricSettingsDimension.Type, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCountDistinctMetricSettingsDimension) GetType() string {
	return v.DimensionData.Type
}

// GetIsNullable returns MetricDataSettingsCountDistinctMetricSettingsDimension.IsNullable, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCountDistinctMetricSettingsDimension) GetIsNullable() *bool {
	return v.DimensionData.IsNullable
}

// GetIsUniqueKey returns MetricDataSettingsCountDistinctMetricSettingsDimension.IsUniqueKey, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCountDistinctMetricSettingsDimension) GetIsUniqueKey() *bool {
	return v.DimensionData.IsUniqueKey
}

func (v *MetricDataSettingsCountDistinctMetricSettingsDimension) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricDataSettingsCountDistinctMetricSettingsDimension
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricDataSettingsCountDistinctMetricSettingsDimension = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DimensionData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricDataSettingsCountDistinctMetricSettingsDimension struct {
	ColumnName string `json:"columnName"`

	Type string `json:"type"`

	IsNullable *bool `json:"isNullable"`

	IsUniqueKey *bool `json:"isUniqueKey"`
}

func (v *MetricDataSettingsCountDistinctMetricSettingsDimension) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricDataSettingsCountDistinctMetricSettingsDimension) __premarshalJSON() (*__premarshalMetricDataSettingsCountDistinctMetricSettingsDimension, error) {
	var retval __premarshalMetricDataSettingsCountDistinctMetricSettingsDimension

	retval.ColumnName = v.DimensionData.ColumnName
	retval.Type = v.DimensionData.Type
	retval.IsNullable = v.DimensionData.IsNullable
	retval.IsUniqueKey = v.DimensionData.IsUniqueKey
	return &retval, nil
}

// MetricDataSettingsCountDistinctMetricSettingsFiltersFilter includes the requested fields of the GraphQL type Filter.
// The GraphQL type's documentation follows.
//
// The fields of a filter.
//
// You can construct more complex filters using `and` and `or`. For example, to construct a filter equivalent to
//
// ```
// (value > 0 AND value <= 100) OR status = "confirmed"
// ```
//
// you could write
//
// ```
// {
// "column": "value",
// "operator": "GREATER_THAN",
// "value": "0",
// "and": [{
// "column": "value",
// "operator": "LESS_THAN_OR_EQUAL_TO",
// "value": "0"
// }],
// "or": [{
// "column": "status",
// "operator": "EQUALS",
// "value": "confirmed"
// }]
// }
// ```
//
// Note that `and` takes precedence over `or`.
type MetricDataSettingsCountDistinctMetricSettingsFiltersFilter struct {
	FilterData `json:"-"`
}

// GetColumn returns MetricDataSettingsCountDistinctMetricSettingsFiltersFilter.Column, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCountDistinctMetricSettingsFiltersFilter) GetColumn() string {
	return v.FilterData.Column
}

// GetOperator returns MetricDataSettingsCountDistinctMetricSettingsFiltersFilter.Operator, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCountDistinctMetricSettingsFiltersFilter) GetOperator() FilterOperator {
	return v.FilterData.Operator
}

// GetValue returns MetricDataSettingsCountDistinctMetricSettingsFiltersFilter.Value, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCountDistinctMetricSettingsFiltersFilter) GetValue() *string {
	return v.FilterData.Value
}

// GetAnd returns MetricDataSettingsCountDistinctMetricSettingsFiltersFilter.And, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCountDistinctMetricSettingsFiltersFilter) GetAnd() []*FilterDataAndFilter {
	return v.FilterData.And
}

// GetOr returns MetricDataSettingsCountDistinctMetricSettingsFiltersFilter.Or, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCountDistinctMetricSettingsFiltersFilter) GetOr() []*FilterDataOrFilter {
	return v.FilterData.Or
}

func (v *MetricDataSettingsCountDistinctMetricSettingsFiltersFilter) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricDataSettingsCountDistinctMetricSettingsFiltersFilter
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricDataSettingsCountDistinctMetricSettingsFiltersFilter = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.FilterData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricDataSettingsCountDistinctMetricSettingsFiltersFilter struct {
	Column string `json:"column"`

	Operator FilterOperator `json:"operator"`

	Value *string `json:"value"`

	And []*FilterDataAndFilter `json:"and"`

	Or []*FilterDataOrFilter `json:"or"`
}

func (v *MetricDataSettingsCountDistinctMetricSettingsFiltersFilter) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricDataSettingsCountDistinctMetricSettingsFiltersFilter) __premarshalJSON() (*__premarshalMetricDataSettingsCountDistinctMetricSettingsFiltersFilter, error) {
	var retval __premarshalMetricDataSettingsCountDistinctMetricSettingsFiltersFilter

	retval.Column = v.FilterData.Column
	retval.Operator = v.FilterData.Operator
	retval.Value = v.FilterData.Value
	retval.And = v.FilterData.And
	retval.Or = v.FilterData.Or
	return &retval, nil
}

// MetricDataSettingsCountMetricSettings includes the requested fields of the GraphQL type CountMetricSettings.
// The GraphQL type's documentation follows.
//
// Settings for Count Metrics.
type MetricDataSettingsCountMetricSettings struct {
	Typename *string `json:"__typename"`
	// Metric Filters allow defining a Metric with a subset of records from the given Data Pool. If no Metric Filters are present, all records will be included. To filter at query time, add Dimensions and use the `filters` property on the `timeSeriesInput`, `counterInput`, or `leaderboardInput` objects. There is no need to add `filters` to be able to filter at query time.
	Filters []*MetricDataSettingsCountMetricSettingsFiltersFilter `json:"filters"`
}

// GetTypename returns MetricDataSettingsCountMetricSettings.Typename, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCountMetricSettings) GetTypename() *string { return v.Typename }

// GetFilters returns MetricDataSettingsCountMetricSettings.Filters, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCountMetricSettings) GetFilters() []*MetricDataSettingsCountMetricSettingsFiltersFilter {
	return v.Filters
}

// MetricDataSettingsCountMetricSettingsFiltersFilter includes the requested fields of the GraphQL type Filter.
// The GraphQL type's documentation follows.
//
// The fields of a filter.
//
// You can construct more complex filters using `and` and `or`. For example, to construct a filter equivalent to
//
// ```
// (value > 0 AND value <= 100) OR status = "confirmed"
// ```
//
// you could write
//
// ```
// {
// "column": "value",
// "operator": "GREATER_THAN",
// "value": "0",
// "and": [{
// "column": "value",
// "operator": "LESS_THAN_OR_EQUAL_TO",
// "value": "0"
// }],
// "or": [{
// "column": "status",
// "operator": "EQUALS",
// "value": "confirmed"
// }]
// }
// ```
//
// Note that `and` takes precedence over `or`.
type MetricDataSettingsCountMetricSettingsFiltersFilter struct {
	FilterData `json:"-"`
}

// GetColumn returns MetricDataSettingsCountMetricSettingsFiltersFilter.Column, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCountMetricSettingsFiltersFilter) GetColumn() string {
	return v.FilterData.Column
}

// GetOperator returns MetricDataSettingsCountMetricSettingsFiltersFilter.Operator, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCountMetricSettingsFiltersFilter) GetOperator() FilterOperator {
	return v.FilterData.Operator
}

// GetValue returns MetricDataSettingsCountMetricSettingsFiltersFilter.Value, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCountMetricSettingsFiltersFilter) GetValue() *string {
	return v.FilterData.Value
}

// GetAnd returns MetricDataSettingsCountMetricSettingsFiltersFilter.And, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCountMetricSettingsFiltersFilter) GetAnd() []*FilterDataAndFilter {
	return v.FilterData.And
}

// GetOr returns MetricDataSettingsCountMetricSettingsFiltersFilter.Or, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCountMetricSettingsFiltersFilter) GetOr() []*FilterDataOrFilter {
	return v.FilterData.Or
}

func (v *MetricDataSettingsCountMetricSettingsFiltersFilter) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricDataSettingsCountMetricSettingsFiltersFilter
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricDataSettingsCountMetricSettingsFiltersFilter = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.FilterData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricDataSettingsCountMetricSettingsFiltersFilter struct {
	Column string `json:"column"`

	Operator FilterOperator `json:"operator"`

	Value *string `json:"value"`

	And []*FilterDataAndFilter `json:"and"`

	Or []*FilterDataOrFilter `json:"or"`
}

func (v *MetricDataSettingsCountMetricSettingsFiltersFilter) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricDataSettingsCountMetricSettingsFiltersFilter) __premarshalJSON() (*__premarshalMetricDataSettingsCountMetricSettingsFiltersFilter, error) {
	var retval __premarshalMetricDataSettingsCountMetricSettingsFiltersFilter

	retval.Column = v.FilterData.Column
	retval.Operator = v.FilterData.Operator
	retval.Value = v.FilterData.Value
	retval.And = v.FilterData.And
	retval.Or = v.FilterData.Or
	return &retval, nil
}

// MetricDataSettingsCustomMetricSettings includes the requested fields of the GraphQL type CustomMetricSettings.
// The GraphQL type's documentation follows.
//
// Settings for Custom Metrics.
type MetricDataSettingsCustomMetricSettings struct {
	Typename *string `json:"__typename"`
	// Metric Filters allow defining a Metric with a subset of records from the given Data Pool. If no Metric Filters are present, all records will be included. To filter at query time, add Dimensions and use the `filters` property on the `timeSeriesInput`, `counterInput`, or `leaderboardInput` objects. There is no need to add `filters` to be able to filter at query time.
	Filters []*MetricDataSettingsCustomMetricSettingsFiltersFilter `json:"filters"`
	// The expression that defines the aggregation function for this Metric.
	Expression string `json:"expression"`
}

// GetTypename returns MetricDataSettingsCustomMetricSettings.Typename, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCustomMetricSettings) GetTypename() *string { return v.Typename }

// GetFilters returns MetricDataSettingsCustomMetricSettings.Filters, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCustomMetricSettings) GetFilters() []*MetricDataSettingsCustomMetricSettingsFiltersFilter {
	return v.Filters
}

// GetExpression returns MetricDataSettingsCustomMetricSettings.Expression, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCustomMetricSettings) GetExpression() string { return v.Expression }

// MetricDataSettingsCustomMetricSettingsFiltersFilter includes the requested fields of the GraphQL type Filter.
// The GraphQL type's documentation follows.
//
// The fields of a filter.
//
// You can construct more complex filters using `and` and `or`. For example, to construct a filter equivalent to
//
// ```
// (value > 0 AND value <= 100) OR status = "confirmed"
// ```
//
// you could write
//
// ```
// {
// "column": "value",
// "operator": "GREATER_THAN",
// "value": "0",
// "and": [{
// "column": "value",
// "operator": "LESS_THAN_OR_EQUAL_TO",
// "value": "0"
// }],
// "or": [{
// "column": "status",
// "operator": "EQUALS",
// "value": "confirmed"
// }]
// }
// ```
//
// Note that `and` takes precedence over `or`.
type MetricDataSettingsCustomMetricSettingsFiltersFilter struct {
	FilterData `json:"-"`
}

// GetColumn returns MetricDataSettingsCustomMetricSettingsFiltersFilter.Column, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCustomMetricSettingsFiltersFilter) GetColumn() string {
	return v.FilterData.Column
}

// GetOperator returns MetricDataSettingsCustomMetricSettingsFiltersFilter.Operator, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCustomMetricSettingsFiltersFilter) GetOperator() FilterOperator {
	return v.FilterData.Operator
}

// GetValue returns MetricDataSettingsCustomMetricSettingsFiltersFilter.Value, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCustomMetricSettingsFiltersFilter) GetValue() *string {
	return v.FilterData.Value
}

// GetAnd returns MetricDataSettingsCustomMetricSettingsFiltersFilter.And, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCustomMetricSettingsFiltersFilter) GetAnd() []*FilterDataAndFilter {
	return v.FilterData.And
}

// GetOr returns MetricDataSettingsCustomMetricSettingsFiltersFilter.Or, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCustomMetricSettingsFiltersFilter) GetOr() []*FilterDataOrFilter {
	return v.FilterData.Or
}

func (v *MetricDataSettingsCustomMetricSettingsFiltersFilter) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricDataSettingsCustomMetricSettingsFiltersFilter
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricDataSettingsCustomMetricSettingsFiltersFilter = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.FilterData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricDataSettingsCustomMetricSettingsFiltersFilter struct {
	Column string `json:"column"`

	Operator FilterOperator `json:"operator"`

	Value *string `json:"value"`

	And []*FilterDataAndFilter `json:"and"`

	Or []*FilterDataOrFilter `json:"or"`
}

func (v *MetricDataSettingsCustomMetricSettingsFiltersFilter) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricDataSettingsCustomMetricSettingsFiltersFilter) __premarshalJSON() (*__premarshalMetricDataSettingsCustomMetricSettingsFiltersFilter, error) {
	var retval __premarshalMetricDataSettingsCustomMetricSettingsFiltersFilter

	retval.Column = v.FilterData.Column
	retval.Operator = v.FilterData.Operator
	retval.Value = v.FilterData.Value
	retval.And = v.FilterData.And
	retval.Or = v.FilterData.Or
	return &retval, nil
}

// MetricDataSettingsMaxMetricSettings includes the requested fields of the GraphQL type MaxMetricSettings.
// The GraphQL type's documentation follows.
//
// Settings for Max Metrics.
type MetricDataSettingsMaxMetricSettings struct {
	Typename *string `json:"__typename"`
	// Metric Filters allow defining a Metric with a subset of records from the given Data Pool. If no Metric Filters are present, all records will be included. To filter at query time, add Dimensions and use the `filters` property on the `timeSeriesInput`, `counterInput`, or `leaderboardInput` objects. There is no need to add `filters` to be able to filter at query time.
	Filters []*MetricDataSettingsMaxMetricSettingsFiltersFilter `json:"filters"`
	// The Dimension to select the maximum from.
	Measure *MetricDataSettingsMaxMetricSettingsMeasureDimension `json:"measure"`
}

// GetTypename returns MetricDataSettingsMaxMetricSettings.Typename, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsMaxMetricSettings) GetTypename() *string { return v.Typename }

// GetFilters returns MetricDataSettingsMaxMetricSettings.Filters, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsMaxMetricSettings) GetFilters() []*MetricDataSettingsMaxMetricSettingsFiltersFilter {
	return v.Filters
}

// GetMeasure returns MetricDataSettingsMaxMetricSettings.Measure, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsMaxMetricSettings) GetMeasure() *MetricDataSettingsMaxMetricSettingsMeasureDimension {
	return v.Measure
}

// MetricDataSettingsMaxMetricSettingsFiltersFilter includes the requested fields of the GraphQL type Filter.
// The GraphQL type's documentation follows.
//
// The fields of a filter.
//
// You can construct more complex filters using `and` and `or`. For example, to construct a filter equivalent to
//
// ```
// (value > 0 AND value <= 100) OR status = "confirmed"
// ```
//
// you could write
//
// ```
// {
// "column": "value",
// "operator": "GREATER_THAN",
// "value": "0",
// "and": [{
// "column": "value",
// "operator": "LESS_THAN_OR_EQUAL_TO",
// "value": "0"
// }],
// "or": [{
// "column": "status",
// "operator": "EQUALS",
// "value": "confirmed"
// }]
// }
// ```
//
// Note that `and` takes precedence over `or`.
type MetricDataSettingsMaxMetricSettingsFiltersFilter struct {
	FilterData `json:"-"`
}

// GetColumn returns MetricDataSettingsMaxMetricSettingsFiltersFilter.Column, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsMaxMetricSettingsFiltersFilter) GetColumn() string {
	return v.FilterData.Column
}

// GetOperator returns MetricDataSettingsMaxMetricSettingsFiltersFilter.Operator, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsMaxMetricSettingsFiltersFilter) GetOperator() FilterOperator {
	return v.FilterData.Operator
}

// GetValue returns MetricDataSettingsMaxMetricSettingsFiltersFilter.Value, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsMaxMetricSettingsFiltersFilter) GetValue() *string {
	return v.FilterData.Value
}

// GetAnd returns MetricDataSettingsMaxMetricSettingsFiltersFilter.And, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsMaxMetricSettingsFiltersFilter) GetAnd() []*FilterDataAndFilter {
	return v.FilterData.And
}

// GetOr returns MetricDataSettingsMaxMetricSettingsFiltersFilter.Or, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsMaxMetricSettingsFiltersFilter) GetOr() []*FilterDataOrFilter {
	return v.FilterData.Or
}

func (v *MetricDataSettingsMaxMetricSettingsFiltersFilter) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricDataSettingsMaxMetricSettingsFiltersFilter
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricDataSettingsMaxMetricSettingsFiltersFilter = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.FilterData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricDataSettingsMaxMetricSettingsFiltersFilter struct {
	Column string `json:"column"`

	Operator FilterOperator `json:"operator"`

	Value *string `json:"value"`

	And []*FilterDataAndFilter `json:"and"`

	Or []*FilterDataOrFilter `json:"or"`
}

func (v *MetricDataSettingsMaxMetricSettingsFiltersFilter) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricDataSettingsMaxMetricSettingsFiltersFilter) __premarshalJSON() (*__premarshalMetricDataSettingsMaxMetricSettingsFiltersFilter, error) {
	var retval __premarshalMetricDataSettingsMaxMetricSettingsFiltersFilter

	retval.Column = v.FilterData.Column
	retval.Operator = v.FilterData.Operator
	retval.Value = v.FilterData.Value
	retval.And = v.FilterData.And
	retval.Or = v.FilterData.Or
	return &retval, nil
}

// MetricDataSettingsMaxMetricSettingsMeasureDimension includes the requested fields of the GraphQL type Dimension.
// The GraphQL type's documentation follows.
//
// The Dimension object that represents a column in a table.
type MetricDataSettingsMaxMetricSettingsMeasureDimension struct {
	DimensionData `json:"-"`
}

// GetColumnName returns MetricDataSettingsMaxMetricSettingsMeasureDimension.ColumnName, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsMaxMetricSettingsMeasureDimension) GetColumnName() string {
	return v.DimensionData.ColumnName
}

// GetType returns MetricDataSettingsMaxMetricSettingsMeasureDimension.Type, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsMaxMetricSettingsMeasureDimension) GetType() string {
	return v.DimensionData.Type
}

// GetIsNullable returns MetricDataSettingsMaxMetricSettingsMeasureDimension.IsNullable, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsMaxMetricSettingsMeasureDimension) GetIsNullable() *bool {
	return v.DimensionData.IsNullable
}

// GetIsUniqueKey returns MetricDataSettingsMaxMetricSettingsMeasureDimension.IsUniqueKey, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsMaxMetricSettingsMeasureDimension) GetIsUniqueKey() *bool {
	return v.DimensionData.IsUniqueKey
}

func (v *MetricDataSettingsMaxMetricSettingsMeasureDimension) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricDataSettingsMaxMetricSettingsMeasureDimension
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricDataSettingsMaxMetricSettingsMeasureDimension = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DimensionData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricDataSettingsMaxMetricSettingsMeasureDimension struct {
	ColumnName string `json:"columnName"`

	Type string `json:"type"`

	IsNullable *bool `json:"isNullable"`

	IsUniqueKey *bool `json:"isUniqueKey"`
}

func (v *MetricDataSettingsMaxMetricSettingsMeasureDimension) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricDataSettingsMaxMetricSettingsMeasureDimension) __premarshalJSON() (*__premarshalMetricDataSettingsMaxMetricSettingsMeasureDimension, error) {
	var retval __premarshalMetricDataSettingsMaxMetricSettingsMeasureDimension

	retval.ColumnName = v.DimensionData.ColumnName
	retval.Type = v.DimensionData.Type
	retval.IsNullable = v.DimensionData.IsNullable
	retval.IsUniqueKey = v.DimensionData.IsUniqueKey
	return &retval, nil
}

// MetricDataSettingsMetricSettings includes the requested fields of the GraphQL interface MetricSettings.
//
// MetricDataSettingsMetricSettings is implemented by the following types:
// MetricDataSettingsAverageMetricSettings
// MetricDataSettingsCountDistinctMetricSettings
// MetricDataSettingsCountMetricSettings
// MetricDataSettingsCustomMetricSettings
// MetricDataSettingsMaxMetricSettings
// MetricDataSettingsMinMetricSettings
// MetricDataSettingsSumMetricSettings
// The GraphQL type's documentation follows.
//
// A Metric's settings, depending on its type.
type MetricDataSettingsMetricSettings interface {
	implementsGraphQLInterfaceMetricDataSettingsMetricSettings()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *MetricDataSettingsAverageMetricSettings) implementsGraphQLInterfaceMetricDataSettingsMetricSettings() {
}
func (v *MetricDataSettingsCountDistinctMetricSettings) implementsGraphQLInterfaceMetricDataSettingsMetricSettings() {
}
func (v *MetricDataSettingsCountMetricSettings) implementsGraphQLInterfaceMetricDataSettingsMetricSettings() {
}
func (v *MetricDataSettingsCustomMetricSettings) implementsGraphQLInterfaceMetricDataSettingsMetricSettings() {
}
func (v *MetricDataSettingsMaxMetricSettings) implementsGraphQLInterfaceMetricDataSettingsMetricSettings() {
}
func (v *MetricDataSettingsMinMetricSettings) implementsGraphQLInterfaceMetricDataSettingsMetricSettings() {
}
func (v *MetricDataSettingsSumMetricSettings) implementsGraphQLInterfaceMetricDataSettingsMetricSettings() {
}

func __unmarshalMetricDataSettingsMetricSettings(b []byte, v *MetricDataSettingsMetricSettings) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AverageMetricSettings":
		*v = new(MetricDataSettingsAverageMetricSettings)
		return json.Unmarshal(b, *v)
	case "CountDistinctMetricSettings":
		*v = new(MetricDataSettingsCountDistinctMetricSettings)
		return json.Unmarshal(b, *v)
	case "CountMetricSettings":
		*v = new(MetricDataSettingsCountMetricSettings)
		return json.Unmarshal(b, *v)
	case "CustomMetricSettings":
		*v = new(MetricDataSettingsCustomMetricSettings)
		return json.Unmarshal(b, *v)
	case "MaxMetricSettings":
		*v = new(MetricDataSettingsMaxMetricSettings)
		return json.Unmarshal(b, *v)
	case "MinMetricSettings":
		*v = new(MetricDataSettingsMinMetricSettings)
		return json.Unmarshal(b, *v)
	case "SumMetricSettings":
		*v = new(MetricDataSettingsSumMetricSettings)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing MetricSettings.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for MetricDataSettingsMetricSettings: "%v"`, tn.TypeName)
	}
}

func __marshalMetricDataSettingsMetricSettings(v *MetricDataSettingsMetricSettings) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *MetricDataSettingsAverageMetricSettings:
		typename = "AverageMetricSettings"

		result := struct {
			TypeName string `json:"__typename"`
			*MetricDataSettingsAverageMetricSettings
		}{typename, v}
		return json.Marshal(result)
	case *MetricDataSettingsCountDistinctMetricSettings:
		typename = "CountDistinctMetricSettings"

		result := struct {
			TypeName string `json:"__typename"`
			*MetricDataSettingsCountDistinctMetricSettings
		}{typename, v}
		return json.Marshal(result)
	case *MetricDataSettingsCountMetricSettings:
		typename = "CountMetricSettings"

		result := struct {
			TypeName string `json:"__typename"`
			*MetricDataSettingsCountMetricSettings
		}{typename, v}
		return json.Marshal(result)
	case *MetricDataSettingsCustomMetricSettings:
		typename = "CustomMetricSettings"

		result := struct {
			TypeName string `json:"__typename"`
			*MetricDataSettingsCustomMetricSettings
		}{typename, v}
		return json.Marshal(result)
	case *MetricDataSettingsMaxMetricSettings:
		typename = "MaxMetricSettings"

		result := struct {
			TypeName string `json:"__typename"`
			*MetricDataSettingsMaxMetricSettings
		}{typename, v}
		return json.Marshal(result)
	case *MetricDataSettingsMinMetricSettings:
		typename = "MinMetricSettings"

		result := struct {
			TypeName string `json:"__typename"`
			*MetricDataSettingsMinMetricSettings
		}{typename, v}
		return json.Marshal(result)
	case *MetricDataSettingsSumMetricSettings:
		typename = "SumMetricSettings"

		result := struct {
			TypeName string `json:"__typename"`
			*MetricDataSettingsSumMetricSettings
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for MetricDataSettingsMetricSettings: "%T"`, v)
	}
}

// MetricDataSettingsMinMetricSettings includes the requested fields of the GraphQL type MinMetricSettings.
// The GraphQL type's documentation follows.
//
// Settings for Min Metrics.
type MetricDataSettingsMinMetricSettings struct {
	Typename *string `json:"__typename"`
	// Metric Filters allow defining a Metric with a subset of records from the given Data Pool. If no Metric Filters are present, all records will be included. To filter at query time, add Dimensions and use the `filters` property on the `timeSeriesInput`, `counterInput`, or `leaderboardInput` objects. There is no need to add `filters` to be able to filter at query time.
	Filters []*MetricDataSettingsMinMetricSettingsFiltersFilter `json:"filters"`
	// The Dimension to select the minimum from.
	Measure *MetricDataSettingsMinMetricSettingsMeasureDimension `json:"measure"`
}

// GetTypename returns MetricDataSettingsMinMetricSettings.Typename, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsMinMetricSettings) GetTypename() *string { return v.Typename }

// GetFilters returns MetricDataSettingsMinMetricSettings.Filters, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsMinMetricSettings) GetFilters() []*MetricDataSettingsMinMetricSettingsFiltersFilter {
	return v.Filters
}

// GetMeasure returns MetricDataSettingsMinMetricSettings.Measure, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsMinMetricSettings) GetMeasure() *MetricDataSettingsMinMetricSettingsMeasureDimension {
	return v.Measure
}

// MetricDataSettingsMinMetricSettingsFiltersFilter includes the requested fields of the GraphQL type Filter.
// The GraphQL type's documentation follows.
//
// The fields of a filter.
//
// You can construct more complex filters using `and` and `or`. For example, to construct a filter equivalent to
//
// ```
// (value > 0 AND value <= 100) OR status = "confirmed"
// ```
//
// you could write
//
// ```
// {
// "column": "value",
// "operator": "GREATER_THAN",
// "value": "0",
// "and": [{
// "column": "value",
// "operator": "LESS_THAN_OR_EQUAL_TO",
// "value": "0"
// }],
// "or": [{
// "column": "status",
// "operator": "EQUALS",
// "value": "confirmed"
// }]
// }
// ```
//
// Note that `and` takes precedence over `or`.
type MetricDataSettingsMinMetricSettingsFiltersFilter struct {
	FilterData `json:"-"`
}

// GetColumn returns MetricDataSettingsMinMetricSettingsFiltersFilter.Column, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsMinMetricSettingsFiltersFilter) GetColumn() string {
	return v.FilterData.Column
}

// GetOperator returns MetricDataSettingsMinMetricSettingsFiltersFilter.Operator, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsMinMetricSettingsFiltersFilter) GetOperator() FilterOperator {
	return v.FilterData.Operator
}

// GetValue returns MetricDataSettingsMinMetricSettingsFiltersFilter.Value, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsMinMetricSettingsFiltersFilter) GetValue() *string {
	return v.FilterData.Value
}

// GetAnd returns MetricDataSettingsMinMetricSettingsFiltersFilter.And, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsMinMetricSettingsFiltersFilter) GetAnd() []*FilterDataAndFilter {
	return v.FilterData.And
}

// GetOr returns MetricDataSettingsMinMetricSettingsFiltersFilter.Or, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsMinMetricSettingsFiltersFilter) GetOr() []*FilterDataOrFilter {
	return v.FilterData.Or
}

func (v *MetricDataSettingsMinMetricSettingsFiltersFilter) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricDataSettingsMinMetricSettingsFiltersFilter
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricDataSettingsMinMetricSettingsFiltersFilter = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.FilterData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricDataSettingsMinMetricSettingsFiltersFilter struct {
	Column string `json:"column"`

	Operator FilterOperator `json:"operator"`

	Value *string `json:"value"`

	And []*FilterDataAndFilter `json:"and"`

	Or []*FilterDataOrFilter `json:"or"`
}

func (v *MetricDataSettingsMinMetricSettingsFiltersFilter) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricDataSettingsMinMetricSettingsFiltersFilter) __premarshalJSON() (*__premarshalMetricDataSettingsMinMetricSettingsFiltersFilter, error) {
	var retval __premarshalMetricDataSettingsMinMetricSettingsFiltersFilter

	retval.Column = v.FilterData.Column
	retval.Operator = v.FilterData.Operator
	retval.Value = v.FilterData.Value
	retval.And = v.FilterData.And
	retval.Or = v.FilterData.Or
	return &retval, nil
}

// MetricDataSettingsMinMetricSettingsMeasureDimension includes the requested fields of the GraphQL type Dimension.
// The GraphQL type's documentation follows.
//
// The Dimension object that represents a column in a table.
type MetricDataSettingsMinMetricSettingsMeasureDimension struct {
	DimensionData `json:"-"`
}

// GetColumnName returns MetricDataSettingsMinMetricSettingsMeasureDimension.ColumnName, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsMinMetricSettingsMeasureDimension) GetColumnName() string {
	return v.DimensionData.ColumnName
}

// GetType returns MetricDataSettingsMinMetricSettingsMeasureDimension.Type, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsMinMetricSettingsMeasureDimension) GetType() string {
	return v.DimensionData.Type
}

// GetIsNullable returns MetricDataSettingsMinMetricSettingsMeasureDimension.IsNullable, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsMinMetricSettingsMeasureDimension) GetIsNullable() *bool {
	return v.DimensionData.IsNullable
}

// GetIsUniqueKey returns MetricDataSettingsMinMetricSettingsMeasureDimension.IsUniqueKey, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsMinMetricSettingsMeasureDimension) GetIsUniqueKey() *bool {
	return v.DimensionData.IsUniqueKey
}

func (v *MetricDataSettingsMinMetricSettingsMeasureDimension) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricDataSettingsMinMetricSettingsMeasureDimension
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricDataSettingsMinMetricSettingsMeasureDimension = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DimensionData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricDataSettingsMinMetricSettingsMeasureDimension struct {
	ColumnName string `json:"columnName"`

	Type string `json:"type"`

	IsNullable *bool `json:"isNullable"`

	IsUniqueKey *bool `json:"isUniqueKey"`
}

func (v *MetricDataSettingsMinMetricSettingsMeasureDimension) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricDataSettingsMinMetricSettingsMeasureDimension) __premarshalJSON() (*__premarshalMetricDataSettingsMinMetricSettingsMeasureDimension, error) {
	var retval __premarshalMetricDataSettingsMinMetricSettingsMeasureDimension

	retval.ColumnName = v.DimensionData.ColumnName
	retval.Type = v.DimensionData.Type
	retval.IsNullable = v.DimensionData.IsNullable
	retval.IsUniqueKey = v.DimensionData.IsUniqueKey
	return &retval, nil
}

// MetricDataSettingsSumMetricSettings includes the requested fields of the GraphQL type SumMetricSettings.
// The GraphQL type's documentation follows.
//
// Settings for Sum Metrics.
type MetricDataSettingsSumMetricSettings struct {
	Typename *string `json:"__typename"`
	// Metric Filters allow defining a Metric with a subset of records from the given Data Pool. If no Metric Filters are present, all records will be included. To filter at query time, add Dimensions and use the `filters` property on the `timeSeriesInput`, `counterInput`, or `leaderboardInput` objects. There is no need to add `filters` to be able to filter at query time.
	Filters []*MetricDataSettingsSumMetricSettingsFiltersFilter `json:"filters"`
	// The Dimension to be summed.
	Measure *MetricDataSettingsSumMetricSettingsMeasureDimension `json:"measure"`
}

// GetTypename returns MetricDataSettingsSumMetricSettings.Typename, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsSumMetricSettings) GetTypename() *string { return v.Typename }

// GetFilters returns MetricDataSettingsSumMetricSettings.Filters, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsSumMetricSettings) GetFilters() []*MetricDataSettingsSumMetricSettingsFiltersFilter {
	return v.Filters
}

// GetMeasure returns MetricDataSettingsSumMetricSettings.Measure, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsSumMetricSettings) GetMeasure() *MetricDataSettingsSumMetricSettingsMeasureDimension {
	return v.Measure
}

// MetricDataSettingsSumMetricSettingsFiltersFilter includes the requested fields of the GraphQL type Filter.
// The GraphQL type's documentation follows.
//
// The fields of a filter.
//
// You can construct more complex filters using `and` and `or`. For example, to construct a filter equivalent to
//
// ```
// (value > 0 AND value <= 100) OR status = "confirmed"
// ```
//
// you could write
//
// ```
// {
// "column": "value",
// "operator": "GREATER_THAN",
// "value": "0",
// "and": [{
// "column": "value",
// "operator": "LESS_THAN_OR_EQUAL_TO",
// "value": "0"
// }],
// "or": [{
// "column": "status",
// "operator": "EQUALS",
// "value": "confirmed"
// }]
// }
// ```
//
// Note that `and` takes precedence over `or`.
type MetricDataSettingsSumMetricSettingsFiltersFilter struct {
	FilterData `json:"-"`
}

// GetColumn returns MetricDataSettingsSumMetricSettingsFiltersFilter.Column, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsSumMetricSettingsFiltersFilter) GetColumn() string {
	return v.FilterData.Column
}

// GetOperator returns MetricDataSettingsSumMetricSettingsFiltersFilter.Operator, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsSumMetricSettingsFiltersFilter) GetOperator() FilterOperator {
	return v.FilterData.Operator
}

// GetValue returns MetricDataSettingsSumMetricSettingsFiltersFilter.Value, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsSumMetricSettingsFiltersFilter) GetValue() *string {
	return v.FilterData.Value
}

// GetAnd returns MetricDataSettingsSumMetricSettingsFiltersFilter.And, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsSumMetricSettingsFiltersFilter) GetAnd() []*FilterDataAndFilter {
	return v.FilterData.And
}

// GetOr returns MetricDataSettingsSumMetricSettingsFiltersFilter.Or, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsSumMetricSettingsFiltersFilter) GetOr() []*FilterDataOrFilter {
	return v.FilterData.Or
}

func (v *MetricDataSettingsSumMetricSettingsFiltersFilter) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricDataSettingsSumMetricSettingsFiltersFilter
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricDataSettingsSumMetricSettingsFiltersFilter = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.FilterData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricDataSettingsSumMetricSettingsFiltersFilter struct {
	Column string `json:"column"`

	Operator FilterOperator `json:"operator"`

	Value *string `json:"value"`

	And []*FilterDataAndFilter `json:"and"`

	Or []*FilterDataOrFilter `json:"or"`
}

func (v *MetricDataSettingsSumMetricSettingsFiltersFilter) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricDataSettingsSumMetricSettingsFiltersFilter) __premarshalJSON() (*__premarshalMetricDataSettingsSumMetricSettingsFiltersFilter, error) {
	var retval __premarshalMetricDataSettingsSumMetricSettingsFiltersFilter

	retval.Column = v.FilterData.Column
	retval.Operator = v.FilterData.Operator
	retval.Value = v.FilterData.Value
	retval.And = v.FilterData.And
	retval.Or = v.FilterData.Or
	return &retval, nil
}

// MetricDataSettingsSumMetricSettingsMeasureDimension includes the requested fields of the GraphQL type Dimension.
// The GraphQL type's documentation follows.
//
// The Dimension object that represents a column in a table.
type MetricDataSettingsSumMetricSettingsMeasureDimension struct {
	DimensionData `json:"-"`
}

// GetColumnName returns MetricDataSettingsSumMetricSettingsMeasureDimension.ColumnName, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsSumMetricSettingsMeasureDimension) GetColumnName() string {
	return v.DimensionData.ColumnName
}

// GetType returns MetricDataSettingsSumMetricSettingsMeasureDimension.Type, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsSumMetricSettingsMeasureDimension) GetType() string {
	return v.DimensionData.Type
}

// GetIsNullable returns MetricDataSettingsSumMetricSettingsMeasureDimension.IsNullable, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsSumMetricSettingsMeasureDimension) GetIsNullable() *bool {
	return v.DimensionData.IsNullable
}

// GetIsUniqueKey returns MetricDataSettingsSumMetricSettingsMeasureDimension.IsUniqueKey, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsSumMetricSettingsMeasureDimension) GetIsUniqueKey() *bool {
	return v.DimensionData.IsUniqueKey
}

func (v *MetricDataSettingsSumMetricSettingsMeasureDimension) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricDataSettingsSumMetricSettingsMeasureDimension
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricDataSettingsSumMetricSettingsMeasureDimension = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DimensionData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricDataSettingsSumMetricSettingsMeasureDimension struct {
	ColumnName string `json:"columnName"`

	Type string `json:"type"`

	IsNullable *bool `json:"isNullable"`

	IsUniqueKey *bool `json:"isUniqueKey"`
}

func (v *MetricDataSettingsSumMetricSettingsMeasureDimension) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricDataSettingsSumMetricSettingsMeasureDimension) __premarshalJSON() (*__premarshalMetricDataSettingsSumMetricSettingsMeasureDimension, error) {
	var retval __premarshalMetricDataSettingsSumMetricSettingsMeasureDimension

	retval.ColumnName = v.DimensionData.ColumnName
	retval.Type = v.DimensionData.Type
	retval.IsNullable = v.DimensionData.IsNullable
	retval.IsUniqueKey = v.DimensionData.IsUniqueKey
	return &retval, nil
}

// MetricDataTimestampDimension includes the requested fields of the GraphQL type Dimension.
// The GraphQL type's documentation follows.
//
// The Dimension object that represents a column in a table.
type MetricDataTimestampDimension struct {
	DimensionData `json:"-"`
}

// GetColumnName returns MetricDataTimestampDimension.ColumnName, and is useful for accessing the field via an interface.
func (v *MetricDataTimestampDimension) GetColumnName() string { return v.DimensionData.ColumnName }

// GetType returns MetricDataTimestampDimension.Type, and is useful for accessing the field via an interface.
func (v *MetricDataTimestampDimension) GetType() string { return v.DimensionData.Type }

// GetIsNullable returns MetricDataTimestampDimension.IsNullable, and is useful for accessing the field via an interface.
func (v *MetricDataTimestampDimension) GetIsNullable() *bool { return v.DimensionData.IsNullable }

// GetIsUniqueKey returns MetricDataTimestampDimension.IsUniqueKey, and is useful for accessing the field via an interface.
func (v *MetricDataTimestampDimension) GetIsUniqueKey() *bool { return v.DimensionData.IsUniqueKey }

func (v *MetricDataTimestampDimension) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricDataTimestampDimension
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricDataTimestampDimension = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DimensionData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricDataTimestampDimension struct {
	ColumnName string `json:"columnName"`

	Type string `json:"type"`

	IsNullable *bool `json:"isNullable"`

	IsUniqueKey *bool `json:"isUniqueKey"`
}

func (v *MetricDataTimestampDimension) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricDataTimestampDimension) __premarshalJSON() (*__premarshalMetricDataTimestampDimension, error) {
	var retval __premarshalMetricDataTimestampDimension

	retval.ColumnName = v.DimensionData.ColumnName
	retval.Type = v.DimensionData.Type
	retval.IsNullable = v.DimensionData.IsNullable
	retval.IsUniqueKey = v.DimensionData.IsUniqueKey
	return &retval, nil
}

// MetricMetric includes the requested fields of the GraphQL type Metric.
// The GraphQL type's documentation follows.
//
// The Metric object.
//
// A Metric is a business indicator measured over time.
//
// [Learn more about Metrics](/docs/key-concepts#metric).
type MetricMetric struct {
	MetricData `json:"-"`
}

// GetId returns MetricMetric.Id, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetId() string { return v.MetricData.Id }

// GetType returns MetricMetric.Type, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetType() MetricType { return v.MetricData.Type }

// GetAccessControlEnabled returns MetricMetric.AccessControlEnabled, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetAccessControlEnabled() bool { return v.MetricData.AccessControlEnabled }

// GetDataPool returns MetricMetric.DataPool, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetDataPool() *MetricDataDataPool { return v.MetricData.DataPool }

// GetDimensions returns MetricMetric.Dimensions, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetDimensions() []*MetricDataDimensionsDimension {
	return v.MetricData.Dimensions
}

// GetTimestamp returns MetricMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetTimestamp() *MetricDataTimestampDimension { return v.MetricData.Timestamp }

// GetMeasure returns MetricMetric.Measure, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetMeasure() *MetricDataMeasureDimension { return v.MetricData.Measure }

// GetSettings returns MetricMetric.Settings, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetSettings() MetricDataSettingsMetricSettings { return v.MetricData.Settings }

// GetUniqueName returns MetricMetric.UniqueName, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetUniqueName() string { return v.MetricData.CommonDataMetric.UniqueName }

// GetDescription returns MetricMetric.Description, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetDescription() string { return v.MetricData.CommonDataMetric.Description }

// GetAccount returns MetricMetric.Account, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetAccount() *CommonDataAccount { return v.MetricData.CommonDataMetric.Account }

// GetEnvironment returns MetricMetric.Environment, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetEnvironment() *CommonDataEnvironment {
	return v.MetricData.CommonDataMetric.Environment
}

// GetCreatedAt returns MetricMetric.CreatedAt, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetCreatedAt() time.Time { return v.MetricData.CommonDataMetric.CreatedAt }

// GetModifiedAt returns MetricMetric.ModifiedAt, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetModifiedAt() time.Time { return v.MetricData.CommonDataMetric.ModifiedAt }

// GetCreatedBy returns MetricMetric.CreatedBy, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetCreatedBy() string { return v.MetricData.CommonDataMetric.CreatedBy }

// GetModifiedBy returns MetricMetric.ModifiedBy, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetModifiedBy() string { return v.MetricData.CommonDataMetric.ModifiedBy }

func (v *MetricMetric) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricMetric
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricMetric = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MetricData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricMetric struct {
	Id string `json:"id"`

	Type MetricType `json:"type"`

	AccessControlEnabled bool `json:"accessControlEnabled"`

	DataPool *MetricDataDataPool `json:"dataPool"`

	Dimensions []*MetricDataDimensionsDimension `json:"dimensions"`

	Timestamp *MetricDataTimestampDimension `json:"timestamp"`

	Measure *MetricDataMeasureDimension `json:"measure"`

	Settings json.RawMessage `json:"settings"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *MetricMetric) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricMetric) __premarshalJSON() (*__premarshalMetricMetric, error) {
	var retval __premarshalMetricMetric

	retval.Id = v.MetricData.Id
	retval.Type = v.MetricData.Type
	retval.AccessControlEnabled = v.MetricData.AccessControlEnabled
	retval.DataPool = v.MetricData.DataPool
	retval.Dimensions = v.MetricData.Dimensions
	retval.Timestamp = v.MetricData.Timestamp
	retval.Measure = v.MetricData.Measure
	{

		dst := &retval.Settings
		src := v.MetricData.Settings
		var err error
		*dst, err = __marshalMetricDataSettingsMetricSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal MetricMetric.MetricData.Settings: %w", err)
		}
	}
	retval.UniqueName = v.MetricData.CommonDataMetric.UniqueName
	retval.Description = v.MetricData.CommonDataMetric.Description
	retval.Account = v.MetricData.CommonDataMetric.Account
	retval.Environment = v.MetricData.CommonDataMetric.Environment
	retval.CreatedAt = v.MetricData.CommonDataMetric.CreatedAt
	retval.ModifiedAt = v.MetricData.CommonDataMetric.ModifiedAt
	retval.CreatedBy = v.MetricData.CommonDataMetric.CreatedBy
	retval.ModifiedBy = v.MetricData.CommonDataMetric.ModifiedBy
	return &retval, nil
}

// MetricResponse is returned by Metric on success.
type MetricResponse struct {
	// This query returns the Metric specified by the given ID.
	//
	// A Metric is a business indicator measured over time.
	Metric *MetricMetric `json:"metric"`
}

// GetMetric returns MetricResponse.Metric, and is useful for accessing the field via an interface.
func (v *MetricResponse) GetMetric() *MetricMetric { return v.Metric }

// The available Metric types.
type MetricType string

const (
	// Counts the number of records that matches the Metric Filters. For time series, it will count the values for each time granularity.
	MetricTypeCount MetricType = "COUNT"
	// Sums the values of the specified column for every record that matches the Metric Filters. For time series, it will sum the values for each time granularity.
	MetricTypeSum MetricType = "SUM"
	// Counts the number of distinct values in the specified column for every record that matches the Metric Filters. For time series, it will count the distinct values for each time granularity.
	MetricTypeCountDistinct MetricType = "COUNT_DISTINCT"
	// Averages the values of the specified column for every record that matches the Metric Filters. For time series, it will average the values for each time granularity.
	MetricTypeAverage MetricType = "AVERAGE"
	// Selects the minimum value of the specified column for every record that matches the Metric Filters. For time series, it will select the minimum value for each time granularity.
	MetricTypeMin MetricType = "MIN"
	// Selects the maximum value of the specified column for every record that matches the Metric Filters. For time series, it will select the maximum value for each time granularity.
	MetricTypeMax MetricType = "MAX"
	// Aggregates values based on the provided custom expression.
	MetricTypeCustom MetricType = "CUSTOM"
)

// MetricsMetricsMetricConnection includes the requested fields of the GraphQL type MetricConnection.
// The GraphQL type's documentation follows.
//
// The Metric connection object.
//
// Learn more about [pagination in GraphQL](https://www.propeldata.com/docs/api/pagination).
type MetricsMetricsMetricConnection struct {
	// The Metric connection's page info.
	PageInfo *MetricsMetricsMetricConnectionPageInfo `json:"pageInfo"`
	// The Metric connection's nodes.
	Nodes []*MetricsMetricsMetricConnectionNodesMetric `json:"nodes"`
	// The Metric connection's edges.
	Edges []*MetricsMetricsMetricConnectionEdgesMetricEdge `json:"edges"`
}

// GetPageInfo returns MetricsMetricsMetricConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnection) GetPageInfo() *MetricsMetricsMetricConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns MetricsMetricsMetricConnection.Nodes, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnection) GetNodes() []*MetricsMetricsMetricConnectionNodesMetric {
	return v.Nodes
}

// GetEdges returns MetricsMetricsMetricConnection.Edges, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnection) GetEdges() []*MetricsMetricsMetricConnectionEdgesMetricEdge {
	return v.Edges
}

// MetricsMetricsMetricConnectionEdgesMetricEdge includes the requested fields of the GraphQL type MetricEdge.
// The GraphQL type's documentation follows.
//
// The Metric edge object.
//
// Learn more about [pagination in GraphQL](https://www.propeldata.com/docs/api/pagination).
type MetricsMetricsMetricConnectionEdgesMetricEdge struct {
	// The edge's cursor.
	Cursor string `json:"cursor"`
	// The edge's node.
	Node *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric `json:"node"`
}

// GetCursor returns MetricsMetricsMetricConnectionEdgesMetricEdge.Cursor, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdge) GetCursor() string { return v.Cursor }

// GetNode returns MetricsMetricsMetricConnectionEdgesMetricEdge.Node, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdge) GetNode() *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric {
	return v.Node
}

// MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric includes the requested fields of the GraphQL type Metric.
// The GraphQL type's documentation follows.
//
// The Metric object.
//
// A Metric is a business indicator measured over time.
//
// [Learn more about Metrics](/docs/key-concepts#metric).
type MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric struct {
	MetricData `json:"-"`
}

// GetId returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.Id, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetId() string {
	return v.MetricData.Id
}

// GetType returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.Type, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetType() MetricType {
	return v.MetricData.Type
}

// GetAccessControlEnabled returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.AccessControlEnabled, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetAccessControlEnabled() bool {
	return v.MetricData.AccessControlEnabled
}

// GetDataPool returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.DataPool, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetDataPool() *MetricDataDataPool {
	return v.MetricData.DataPool
}

// GetDimensions returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.Dimensions, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetDimensions() []*MetricDataDimensionsDimension {
	return v.MetricData.Dimensions
}

// GetTimestamp returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetTimestamp() *MetricDataTimestampDimension {
	return v.MetricData.Timestamp
}

// GetMeasure returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.Measure, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetMeasure() *MetricDataMeasureDimension {
	return v.MetricData.Measure
}

// GetSettings returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.Settings, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetSettings() MetricDataSettingsMetricSettings {
	return v.MetricData.Settings
}

// GetUniqueName returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.UniqueName, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetUniqueName() string {
	return v.MetricData.CommonDataMetric.UniqueName
}

// GetDescription returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.Description, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetDescription() string {
	return v.MetricData.CommonDataMetric.Description
}

// GetAccount returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.Account, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetAccount() *CommonDataAccount {
	return v.MetricData.CommonDataMetric.Account
}

// GetEnvironment returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.Environment, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetEnvironment() *CommonDataEnvironment {
	return v.MetricData.CommonDataMetric.Environment
}

// GetCreatedAt returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.CreatedAt, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetCreatedAt() time.Time {
	return v.MetricData.CommonDataMetric.CreatedAt
}

// GetModifiedAt returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.ModifiedAt, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetModifiedAt() time.Time {
	return v.MetricData.CommonDataMetric.ModifiedAt
}

// GetCreatedBy returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.CreatedBy, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetCreatedBy() string {
	return v.MetricData.CommonDataMetric.CreatedBy
}

// GetModifiedBy returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.ModifiedBy, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetModifiedBy() string {
	return v.MetricData.CommonDataMetric.ModifiedBy
}

func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MetricData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric struct {
	Id string `json:"id"`

	Type MetricType `json:"type"`

	AccessControlEnabled bool `json:"accessControlEnabled"`

	DataPool *MetricDataDataPool `json:"dataPool"`

	Dimensions []*MetricDataDimensionsDimension `json:"dimensions"`

	Timestamp *MetricDataTimestampDimension `json:"timestamp"`

	Measure *MetricDataMeasureDimension `json:"measure"`

	Settings json.RawMessage `json:"settings"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) __premarshalJSON() (*__premarshalMetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric, error) {
	var retval __premarshalMetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric

	retval.Id = v.MetricData.Id
	retval.Type = v.MetricData.Type
	retval.AccessControlEnabled = v.MetricData.AccessControlEnabled
	retval.DataPool = v.MetricData.DataPool
	retval.Dimensions = v.MetricData.Dimensions
	retval.Timestamp = v.MetricData.Timestamp
	retval.Measure = v.MetricData.Measure
	{

		dst := &retval.Settings
		src := v.MetricData.Settings
		var err error
		*dst, err = __marshalMetricDataSettingsMetricSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.MetricData.Settings: %w", err)
		}
	}
	retval.UniqueName = v.MetricData.CommonDataMetric.UniqueName
	retval.Description = v.MetricData.CommonDataMetric.Description
	retval.Account = v.MetricData.CommonDataMetric.Account
	retval.Environment = v.MetricData.CommonDataMetric.Environment
	retval.CreatedAt = v.MetricData.CommonDataMetric.CreatedAt
	retval.ModifiedAt = v.MetricData.CommonDataMetric.ModifiedAt
	retval.CreatedBy = v.MetricData.CommonDataMetric.CreatedBy
	retval.ModifiedBy = v.MetricData.CommonDataMetric.ModifiedBy
	return &retval, nil
}

// MetricsMetricsMetricConnectionNodesMetric includes the requested fields of the GraphQL type Metric.
// The GraphQL type's documentation follows.
//
// The Metric object.
//
// A Metric is a business indicator measured over time.
//
// [Learn more about Metrics](/docs/key-concepts#metric).
type MetricsMetricsMetricConnectionNodesMetric struct {
	MetricData `json:"-"`
}

// GetId returns MetricsMetricsMetricConnectionNodesMetric.Id, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetId() string { return v.MetricData.Id }

// GetType returns MetricsMetricsMetricConnectionNodesMetric.Type, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetType() MetricType { return v.MetricData.Type }

// GetAccessControlEnabled returns MetricsMetricsMetricConnectionNodesMetric.AccessControlEnabled, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetAccessControlEnabled() bool {
	return v.MetricData.AccessControlEnabled
}

// GetDataPool returns MetricsMetricsMetricConnectionNodesMetric.DataPool, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetDataPool() *MetricDataDataPool {
	return v.MetricData.DataPool
}

// GetDimensions returns MetricsMetricsMetricConnectionNodesMetric.Dimensions, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetDimensions() []*MetricDataDimensionsDimension {
	return v.MetricData.Dimensions
}

// GetTimestamp returns MetricsMetricsMetricConnectionNodesMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetTimestamp() *MetricDataTimestampDimension {
	return v.MetricData.Timestamp
}

// GetMeasure returns MetricsMetricsMetricConnectionNodesMetric.Measure, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetMeasure() *MetricDataMeasureDimension {
	return v.MetricData.Measure
}

// GetSettings returns MetricsMetricsMetricConnectionNodesMetric.Settings, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetSettings() MetricDataSettingsMetricSettings {
	return v.MetricData.Settings
}

// GetUniqueName returns MetricsMetricsMetricConnectionNodesMetric.UniqueName, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetUniqueName() string {
	return v.MetricData.CommonDataMetric.UniqueName
}

// GetDescription returns MetricsMetricsMetricConnectionNodesMetric.Description, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetDescription() string {
	return v.MetricData.CommonDataMetric.Description
}

// GetAccount returns MetricsMetricsMetricConnectionNodesMetric.Account, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetAccount() *CommonDataAccount {
	return v.MetricData.CommonDataMetric.Account
}

// GetEnvironment returns MetricsMetricsMetricConnectionNodesMetric.Environment, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetEnvironment() *CommonDataEnvironment {
	return v.MetricData.CommonDataMetric.Environment
}

// GetCreatedAt returns MetricsMetricsMetricConnectionNodesMetric.CreatedAt, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetCreatedAt() time.Time {
	return v.MetricData.CommonDataMetric.CreatedAt
}

// GetModifiedAt returns MetricsMetricsMetricConnectionNodesMetric.ModifiedAt, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetModifiedAt() time.Time {
	return v.MetricData.CommonDataMetric.ModifiedAt
}

// GetCreatedBy returns MetricsMetricsMetricConnectionNodesMetric.CreatedBy, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetCreatedBy() string {
	return v.MetricData.CommonDataMetric.CreatedBy
}

// GetModifiedBy returns MetricsMetricsMetricConnectionNodesMetric.ModifiedBy, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetModifiedBy() string {
	return v.MetricData.CommonDataMetric.ModifiedBy
}

func (v *MetricsMetricsMetricConnectionNodesMetric) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricsMetricsMetricConnectionNodesMetric
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricsMetricsMetricConnectionNodesMetric = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MetricData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricsMetricsMetricConnectionNodesMetric struct {
	Id string `json:"id"`

	Type MetricType `json:"type"`

	AccessControlEnabled bool `json:"accessControlEnabled"`

	DataPool *MetricDataDataPool `json:"dataPool"`

	Dimensions []*MetricDataDimensionsDimension `json:"dimensions"`

	Timestamp *MetricDataTimestampDimension `json:"timestamp"`

	Measure *MetricDataMeasureDimension `json:"measure"`

	Settings json.RawMessage `json:"settings"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *MetricsMetricsMetricConnectionNodesMetric) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricsMetricsMetricConnectionNodesMetric) __premarshalJSON() (*__premarshalMetricsMetricsMetricConnectionNodesMetric, error) {
	var retval __premarshalMetricsMetricsMetricConnectionNodesMetric

	retval.Id = v.MetricData.Id
	retval.Type = v.MetricData.Type
	retval.AccessControlEnabled = v.MetricData.AccessControlEnabled
	retval.DataPool = v.MetricData.DataPool
	retval.Dimensions = v.MetricData.Dimensions
	retval.Timestamp = v.MetricData.Timestamp
	retval.Measure = v.MetricData.Measure
	{

		dst := &retval.Settings
		src := v.MetricData.Settings
		var err error
		*dst, err = __marshalMetricDataSettingsMetricSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal MetricsMetricsMetricConnectionNodesMetric.MetricData.Settings: %w", err)
		}
	}
	retval.UniqueName = v.MetricData.CommonDataMetric.UniqueName
	retval.Description = v.MetricData.CommonDataMetric.Description
	retval.Account = v.MetricData.CommonDataMetric.Account
	retval.Environment = v.MetricData.CommonDataMetric.Environment
	retval.CreatedAt = v.MetricData.CommonDataMetric.CreatedAt
	retval.ModifiedAt = v.MetricData.CommonDataMetric.ModifiedAt
	retval.CreatedBy = v.MetricData.CommonDataMetric.CreatedBy
	retval.ModifiedBy = v.MetricData.CommonDataMetric.ModifiedBy
	return &retval, nil
}

// MetricsMetricsMetricConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// The page info object used for pagination.
type MetricsMetricsMetricConnectionPageInfo struct {
	PageInfoData `json:"-"`
}

// GetStartCursor returns MetricsMetricsMetricConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionPageInfo) GetStartCursor() *string {
	return v.PageInfoData.StartCursor
}

// GetEndCursor returns MetricsMetricsMetricConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionPageInfo) GetEndCursor() *string {
	return v.PageInfoData.EndCursor
}

// GetHasNextPage returns MetricsMetricsMetricConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionPageInfo) GetHasNextPage() bool {
	return v.PageInfoData.HasNextPage
}

// GetHasPreviousPage returns MetricsMetricsMetricConnectionPageInfo.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionPageInfo) GetHasPreviousPage() bool {
	return v.PageInfoData.HasPreviousPage
}

func (v *MetricsMetricsMetricConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricsMetricsMetricConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricsMetricsMetricConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PageInfoData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricsMetricsMetricConnectionPageInfo struct {
	StartCursor *string `json:"startCursor"`

	EndCursor *string `json:"endCursor"`

	HasNextPage bool `json:"hasNextPage"`

	HasPreviousPage bool `json:"hasPreviousPage"`
}

func (v *MetricsMetricsMetricConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricsMetricsMetricConnectionPageInfo) __premarshalJSON() (*__premarshalMetricsMetricsMetricConnectionPageInfo, error) {
	var retval __premarshalMetricsMetricsMetricConnectionPageInfo

	retval.StartCursor = v.PageInfoData.StartCursor
	retval.EndCursor = v.PageInfoData.EndCursor
	retval.HasNextPage = v.PageInfoData.HasNextPage
	retval.HasPreviousPage = v.PageInfoData.HasPreviousPage
	return &retval, nil
}

// MetricsResponse is returned by Metrics on success.
type MetricsResponse struct {
	// This query returns the Metrics within the Environment.
	//
	// A Metric is a business indicator measured over time. Each Metric is associated with one Data Pool, which is a cached table hydrated from your data warehouse optimized for high-concurrency and low-latency queries. Environments are independent and isolated Propel workspaces for development, staging (testing), and production workloads.
	//
	// The `metrics` query uses [cursor-based pagination](/docs/api/pagination) typical of GraphQL APIs. You can use the pairs of parameters `first` and `after` or `last` and `before` to page forward or backward through the results, respectively.
	//
	// For forward pagination, the `first` parameter defines the number of results to return, and the `after` parameter defines the cursor to continue from. You should pass the cursor for the _last_ result of the current page to `after`.
	//
	// For backward pagination, the `last` parameter defines the number of results to return, and the `before` parameter defines the cursor to continue from. You should pass the cursor for the _first_ result of the current page to `before`.
	Metrics *MetricsMetricsMetricConnection `json:"metrics"`
}

// GetMetrics returns MetricsResponse.Metrics, and is useful for accessing the field via an interface.
func (v *MetricsResponse) GetMetrics() *MetricsMetricsMetricConnection { return v.Metrics }

type ModifyDataPoolAccessPolicyInput struct {
	Id string `json:"id"`
	// The Data Pool Access Policy's new unique name.
	UniqueName *string `json:"uniqueName"`
	// The Data Pool Access Policy's new description.
	Description *string `json:"description"`
	// Columns that the Access Policy makes available for querying. If not provided this property will not be modified.
	Columns []string `json:"columns"`
	// Row-level filters that the Access Policy applies before executing queries. If not provided this property will not be modified.
	Rows []*FilterInput `json:"rows,omitempty"`
	// Row-level filters that the Access Policy applies before executing queries, in the form of SQL. If not provided this property will not be modified.
	FilterSql *string `json:"filterSql"`
}

// GetId returns ModifyDataPoolAccessPolicyInput.Id, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolAccessPolicyInput) GetId() string { return v.Id }

// GetUniqueName returns ModifyDataPoolAccessPolicyInput.UniqueName, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolAccessPolicyInput) GetUniqueName() *string { return v.UniqueName }

// GetDescription returns ModifyDataPoolAccessPolicyInput.Description, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolAccessPolicyInput) GetDescription() *string { return v.Description }

// GetColumns returns ModifyDataPoolAccessPolicyInput.Columns, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolAccessPolicyInput) GetColumns() []string { return v.Columns }

// GetRows returns ModifyDataPoolAccessPolicyInput.Rows, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolAccessPolicyInput) GetRows() []*FilterInput { return v.Rows }

// GetFilterSql returns ModifyDataPoolAccessPolicyInput.FilterSql, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolAccessPolicyInput) GetFilterSql() *string { return v.FilterSql }

// ModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponse includes the requested fields of the GraphQL type DataPoolAccessPolicyResponse.
type ModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponse struct {
	// The Data Pool Access Policy.
	DataPoolAccessPolicy *ModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy `json:"dataPoolAccessPolicy"`
}

// GetDataPoolAccessPolicy returns ModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponse.DataPoolAccessPolicy, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponse) GetDataPoolAccessPolicy() *ModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy {
	return v.DataPoolAccessPolicy
}

// ModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy includes the requested fields of the GraphQL type DataPoolAccessPolicy.
type ModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy struct {
	DataPoolAccessPolicyData `json:"-"`
}

// GetId returns ModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy.Id, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy) GetId() string {
	return v.DataPoolAccessPolicyData.Id
}

// GetColumns returns ModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy.Columns, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy) GetColumns() []string {
	return v.DataPoolAccessPolicyData.Columns
}

// GetRows returns ModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy.Rows, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy) GetRows() []*DataPoolAccessPolicyDataRowsFilter {
	return v.DataPoolAccessPolicyData.Rows
}

// GetDataPool returns ModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy.DataPool, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy) GetDataPool() *DataPoolAccessPolicyDataDataPool {
	return v.DataPoolAccessPolicyData.DataPool
}

// GetUniqueName returns ModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy.UniqueName, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy) GetUniqueName() string {
	return v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.UniqueName
}

// GetDescription returns ModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy.Description, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy) GetDescription() string {
	return v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.Description
}

// GetAccount returns ModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy.Account, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy) GetAccount() *CommonDataAccount {
	return v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.Account
}

// GetEnvironment returns ModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy.Environment, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy) GetEnvironment() *CommonDataEnvironment {
	return v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.Environment
}

// GetCreatedAt returns ModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy.CreatedAt, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy) GetCreatedAt() time.Time {
	return v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.CreatedAt
}

// GetModifiedAt returns ModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy.ModifiedAt, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy) GetModifiedAt() time.Time {
	return v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.ModifiedAt
}

// GetCreatedBy returns ModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy.CreatedBy, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy) GetCreatedBy() string {
	return v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.CreatedBy
}

// GetModifiedBy returns ModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy.ModifiedBy, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy) GetModifiedBy() string {
	return v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.ModifiedBy
}

func (v *ModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy
		graphql.NoUnmarshalJSON
	}
	firstPass.ModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataPoolAccessPolicyData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy struct {
	Id string `json:"id"`

	Columns []string `json:"columns"`

	Rows []*DataPoolAccessPolicyDataRowsFilter `json:"rows"`

	DataPool *DataPoolAccessPolicyDataDataPool `json:"dataPool"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *ModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy) __premarshalJSON() (*__premarshalModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy, error) {
	var retval __premarshalModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponseDataPoolAccessPolicy

	retval.Id = v.DataPoolAccessPolicyData.Id
	retval.Columns = v.DataPoolAccessPolicyData.Columns
	retval.Rows = v.DataPoolAccessPolicyData.Rows
	retval.DataPool = v.DataPoolAccessPolicyData.DataPool
	retval.UniqueName = v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.UniqueName
	retval.Description = v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.Description
	retval.Account = v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.Account
	retval.Environment = v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.Environment
	retval.CreatedAt = v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.CreatedAt
	retval.ModifiedAt = v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.ModifiedAt
	retval.CreatedBy = v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.CreatedBy
	retval.ModifiedBy = v.DataPoolAccessPolicyData.CommonDataDataPoolAccessPolicy.ModifiedBy
	return &retval, nil
}

// ModifyDataPoolAccessPolicyResponse is returned by ModifyDataPoolAccessPolicy on success.
type ModifyDataPoolAccessPolicyResponse struct {
	// Modifies a Data Pool Access Policy with the provided unique name, description, columns and rows. If any of the optional arguments are omitted, those properties will be unchanged on the Data Pool Access Policy.
	//
	// [Learn more about Data Pool Access Policy](https://www.propeldata.com/docs/control-access).
	ModifyDataPoolAccessPolicy *ModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponse `json:"modifyDataPoolAccessPolicy"`
}

// GetModifyDataPoolAccessPolicy returns ModifyDataPoolAccessPolicyResponse.ModifyDataPoolAccessPolicy, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolAccessPolicyResponse) GetModifyDataPoolAccessPolicy() *ModifyDataPoolAccessPolicyModifyDataPoolAccessPolicyDataPoolAccessPolicyResponse {
	return v.ModifyDataPoolAccessPolicy
}

// The fields for modifying a Data Pool.
type ModifyDataPoolInput struct {
	// The ID or unique name of the Data Pool to modify.
	IdOrUniqueName *IdOrUniqueName `json:"idOrUniqueName,omitempty"`
	// The Data Pool's new unique name.
	UniqueName *string `json:"uniqueName"`
	// The Data Pool's new description.
	Description *string `json:"description"`
	// The Data Pool's new data retention in days.
	DataRetentionInDays *int `json:"dataRetentionInDays"`
	// The Data Pool's new syncing settings.
	Syncing *DataPoolSyncingInput `json:"syncing,omitempty"`
	// Enables or disables access control for the Data Pool.
	//
	// If the Data Pool has access control enabled, Applications must be assigned Data Pool Access
	// Policies in order to query the Data Pool and its Metrics.
	AccessControlEnabled *bool `json:"accessControlEnabled"`
}

// GetIdOrUniqueName returns ModifyDataPoolInput.IdOrUniqueName, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolInput) GetIdOrUniqueName() *IdOrUniqueName { return v.IdOrUniqueName }

// GetUniqueName returns ModifyDataPoolInput.UniqueName, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolInput) GetUniqueName() *string { return v.UniqueName }

// GetDescription returns ModifyDataPoolInput.Description, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolInput) GetDescription() *string { return v.Description }

// GetDataRetentionInDays returns ModifyDataPoolInput.DataRetentionInDays, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolInput) GetDataRetentionInDays() *int { return v.DataRetentionInDays }

// GetSyncing returns ModifyDataPoolInput.Syncing, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolInput) GetSyncing() *DataPoolSyncingInput { return v.Syncing }

// GetAccessControlEnabled returns ModifyDataPoolInput.AccessControlEnabled, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolInput) GetAccessControlEnabled() *bool { return v.AccessControlEnabled }

// ModifyDataPoolModifyDataPoolDataPoolOrFailureResponse includes the requested fields of the GraphQL interface DataPoolOrFailureResponse.
//
// ModifyDataPoolModifyDataPoolDataPoolOrFailureResponse is implemented by the following types:
// ModifyDataPoolModifyDataPoolDataPoolResponse
// ModifyDataPoolModifyDataPoolFailureResponse
// The GraphQL type's documentation follows.
//
// The result of a mutation which creates or modifies a Data Pool.
//
// If successful, an `DataPoolResponse` will be returned; otherwise, a
// `FailureResponse` will be returned.
type ModifyDataPoolModifyDataPoolDataPoolOrFailureResponse interface {
	implementsGraphQLInterfaceModifyDataPoolModifyDataPoolDataPoolOrFailureResponse()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *ModifyDataPoolModifyDataPoolDataPoolResponse) implementsGraphQLInterfaceModifyDataPoolModifyDataPoolDataPoolOrFailureResponse() {
}
func (v *ModifyDataPoolModifyDataPoolFailureResponse) implementsGraphQLInterfaceModifyDataPoolModifyDataPoolDataPoolOrFailureResponse() {
}

func __unmarshalModifyDataPoolModifyDataPoolDataPoolOrFailureResponse(b []byte, v *ModifyDataPoolModifyDataPoolDataPoolOrFailureResponse) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "DataPoolResponse":
		*v = new(ModifyDataPoolModifyDataPoolDataPoolResponse)
		return json.Unmarshal(b, *v)
	case "FailureResponse":
		*v = new(ModifyDataPoolModifyDataPoolFailureResponse)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing DataPoolOrFailureResponse.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ModifyDataPoolModifyDataPoolDataPoolOrFailureResponse: "%v"`, tn.TypeName)
	}
}

func __marshalModifyDataPoolModifyDataPoolDataPoolOrFailureResponse(v *ModifyDataPoolModifyDataPoolDataPoolOrFailureResponse) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ModifyDataPoolModifyDataPoolDataPoolResponse:
		typename = "DataPoolResponse"

		result := struct {
			TypeName string `json:"__typename"`
			*ModifyDataPoolModifyDataPoolDataPoolResponse
		}{typename, v}
		return json.Marshal(result)
	case *ModifyDataPoolModifyDataPoolFailureResponse:
		typename = "FailureResponse"

		result := struct {
			TypeName string `json:"__typename"`
			*ModifyDataPoolModifyDataPoolFailureResponse
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ModifyDataPoolModifyDataPoolDataPoolOrFailureResponse: "%T"`, v)
	}
}

// ModifyDataPoolModifyDataPoolDataPoolResponse includes the requested fields of the GraphQL type DataPoolResponse.
// The GraphQL type's documentation follows.
//
// The result of a mutation which creates or modifies a Data Pool.
type ModifyDataPoolModifyDataPoolDataPoolResponse struct {
	Typename *string `json:"__typename"`
	// The Data Pool which was created or modified.
	DataPool *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool `json:"dataPool"`
}

// GetTypename returns ModifyDataPoolModifyDataPoolDataPoolResponse.Typename, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponse) GetTypename() *string { return v.Typename }

// GetDataPool returns ModifyDataPoolModifyDataPoolDataPoolResponse.DataPool, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponse) GetDataPool() *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool {
	return v.DataPool
}

// ModifyDataPoolModifyDataPoolDataPoolResponseDataPool includes the requested fields of the GraphQL type DataPool.
// The GraphQL type's documentation follows.
//
// The Data Pool object. Data Pools are Propel's high-speed data store and cache
//
// [Learn more about Data Pools](https://www.propeldata.com/docs/connect-your-data#key-concept-2-data-pools).
type ModifyDataPoolModifyDataPoolDataPoolResponseDataPool struct {
	DataPoolData `json:"-"`
}

// GetId returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.Id, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetId() string {
	return v.DataPoolData.Id
}

// GetDataSource returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.DataSource, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetDataSource() *DataPoolDataDataSource {
	return v.DataPoolData.DataSource
}

// GetStatus returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.Status, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetStatus() DataPoolStatus {
	return v.DataPoolData.Status
}

// GetError returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.Error, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetError() *DataPoolDataError {
	return v.DataPoolData.Error
}

// GetTable returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.Table, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetTable() string {
	return v.DataPoolData.Table
}

// GetTenant returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.Tenant, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetTenant() *DataPoolDataTenant {
	return v.DataPoolData.Tenant
}

// GetTimestamp returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.Timestamp, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetTimestamp() *DataPoolDataTimestamp {
	return v.DataPoolData.Timestamp
}

// GetColumns returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.Columns, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetColumns() *DataPoolDataColumnsDataPoolColumnConnection {
	return v.DataPoolData.Columns
}

// GetUniqueId returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.UniqueId, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetUniqueId() *DataPoolDataUniqueId {
	return v.DataPoolData.UniqueId
}

// GetSyncing returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.Syncing, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetSyncing() *DataPoolDataSyncingDataPoolSyncing {
	return v.DataPoolData.Syncing
}

// GetAvailableMeasures returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.AvailableMeasures, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetAvailableMeasures() *DataPoolDataAvailableMeasuresDataPoolColumnConnection {
	return v.DataPoolData.AvailableMeasures
}

// GetSetupTasks returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.SetupTasks, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetSetupTasks() []*DataPoolDataSetupTasksDataPoolSetupTask {
	return v.DataPoolData.SetupTasks
}

// GetSyncs returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.Syncs, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetSyncs() *DataPoolDataSyncsSyncConnection {
	return v.DataPoolData.Syncs
}

// GetDataPoolAccessPolicies returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.DataPoolAccessPolicies, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetDataPoolAccessPolicies() *DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnection {
	return v.DataPoolData.DataPoolAccessPolicies
}

// GetAccessControlEnabled returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.AccessControlEnabled, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetAccessControlEnabled() bool {
	return v.DataPoolData.AccessControlEnabled
}

// GetUniqueName returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.UniqueName, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetUniqueName() string {
	return v.DataPoolData.CommonDataDataPool.UniqueName
}

// GetDescription returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.Description, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetDescription() string {
	return v.DataPoolData.CommonDataDataPool.Description
}

// GetAccount returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.Account, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetAccount() *CommonDataAccount {
	return v.DataPoolData.CommonDataDataPool.Account
}

// GetEnvironment returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.Environment, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetEnvironment() *CommonDataEnvironment {
	return v.DataPoolData.CommonDataDataPool.Environment
}

// GetCreatedAt returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.CreatedAt, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetCreatedAt() time.Time {
	return v.DataPoolData.CommonDataDataPool.CreatedAt
}

// GetModifiedAt returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.ModifiedAt, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetModifiedAt() time.Time {
	return v.DataPoolData.CommonDataDataPool.ModifiedAt
}

// GetCreatedBy returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.CreatedBy, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetCreatedBy() string {
	return v.DataPoolData.CommonDataDataPool.CreatedBy
}

// GetModifiedBy returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.ModifiedBy, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetModifiedBy() string {
	return v.DataPoolData.CommonDataDataPool.ModifiedBy
}

func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ModifyDataPoolModifyDataPoolDataPoolResponseDataPool
		graphql.NoUnmarshalJSON
	}
	firstPass.ModifyDataPoolModifyDataPoolDataPoolResponseDataPool = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataPoolData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalModifyDataPoolModifyDataPoolDataPoolResponseDataPool struct {
	Id string `json:"id"`

	DataSource *DataPoolDataDataSource `json:"dataSource"`

	Status DataPoolStatus `json:"status"`

	Error *DataPoolDataError `json:"error"`

	Table string `json:"table"`

	Tenant *DataPoolDataTenant `json:"tenant"`

	Timestamp *DataPoolDataTimestamp `json:"timestamp"`

	Columns *DataPoolDataColumnsDataPoolColumnConnection `json:"columns"`

	UniqueId *DataPoolDataUniqueId `json:"uniqueId"`

	Syncing *DataPoolDataSyncingDataPoolSyncing `json:"syncing"`

	AvailableMeasures *DataPoolDataAvailableMeasuresDataPoolColumnConnection `json:"availableMeasures"`

	SetupTasks []*DataPoolDataSetupTasksDataPoolSetupTask `json:"setupTasks"`

	Syncs *DataPoolDataSyncsSyncConnection `json:"syncs"`

	DataPoolAccessPolicies *DataPoolDataDataPoolAccessPoliciesDataPoolAccessPolicyConnection `json:"dataPoolAccessPolicies"`

	AccessControlEnabled bool `json:"accessControlEnabled"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) __premarshalJSON() (*__premarshalModifyDataPoolModifyDataPoolDataPoolResponseDataPool, error) {
	var retval __premarshalModifyDataPoolModifyDataPoolDataPoolResponseDataPool

	retval.Id = v.DataPoolData.Id
	retval.DataSource = v.DataPoolData.DataSource
	retval.Status = v.DataPoolData.Status
	retval.Error = v.DataPoolData.Error
	retval.Table = v.DataPoolData.Table
	retval.Tenant = v.DataPoolData.Tenant
	retval.Timestamp = v.DataPoolData.Timestamp
	retval.Columns = v.DataPoolData.Columns
	retval.UniqueId = v.DataPoolData.UniqueId
	retval.Syncing = v.DataPoolData.Syncing
	retval.AvailableMeasures = v.DataPoolData.AvailableMeasures
	retval.SetupTasks = v.DataPoolData.SetupTasks
	retval.Syncs = v.DataPoolData.Syncs
	retval.DataPoolAccessPolicies = v.DataPoolData.DataPoolAccessPolicies
	retval.AccessControlEnabled = v.DataPoolData.AccessControlEnabled
	retval.UniqueName = v.DataPoolData.CommonDataDataPool.UniqueName
	retval.Description = v.DataPoolData.CommonDataDataPool.Description
	retval.Account = v.DataPoolData.CommonDataDataPool.Account
	retval.Environment = v.DataPoolData.CommonDataDataPool.Environment
	retval.CreatedAt = v.DataPoolData.CommonDataDataPool.CreatedAt
	retval.ModifiedAt = v.DataPoolData.CommonDataDataPool.ModifiedAt
	retval.CreatedBy = v.DataPoolData.CommonDataDataPool.CreatedBy
	retval.ModifiedBy = v.DataPoolData.CommonDataDataPool.ModifiedBy
	return &retval, nil
}

// ModifyDataPoolModifyDataPoolFailureResponse includes the requested fields of the GraphQL type FailureResponse.
// The GraphQL type's documentation follows.
//
// The failure response object.
type ModifyDataPoolModifyDataPoolFailureResponse struct {
	Typename *string `json:"__typename"`
	// The error that caused the failure.
	Error *ModifyDataPoolModifyDataPoolFailureResponseError `json:"error"`
}

// GetTypename returns ModifyDataPoolModifyDataPoolFailureResponse.Typename, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolFailureResponse) GetTypename() *string { return v.Typename }

// GetError returns ModifyDataPoolModifyDataPoolFailureResponse.Error, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolFailureResponse) GetError() *ModifyDataPoolModifyDataPoolFailureResponseError {
	return v.Error
}

// ModifyDataPoolModifyDataPoolFailureResponseError includes the requested fields of the GraphQL type Error.
// The GraphQL type's documentation follows.
//
// The error object.
type ModifyDataPoolModifyDataPoolFailureResponseError struct {
	GqlError `json:"-"`
}

// GetCode returns ModifyDataPoolModifyDataPoolFailureResponseError.Code, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolFailureResponseError) GetCode() *int { return v.GqlError.Code }

// GetMessage returns ModifyDataPoolModifyDataPoolFailureResponseError.Message, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolFailureResponseError) GetMessage() string {
	return v.GqlError.Message
}

func (v *ModifyDataPoolModifyDataPoolFailureResponseError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ModifyDataPoolModifyDataPoolFailureResponseError
		graphql.NoUnmarshalJSON
	}
	firstPass.ModifyDataPoolModifyDataPoolFailureResponseError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.GqlError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalModifyDataPoolModifyDataPoolFailureResponseError struct {
	Code *int `json:"code"`

	Message string `json:"message"`
}

func (v *ModifyDataPoolModifyDataPoolFailureResponseError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ModifyDataPoolModifyDataPoolFailureResponseError) __premarshalJSON() (*__premarshalModifyDataPoolModifyDataPoolFailureResponseError, error) {
	var retval __premarshalModifyDataPoolModifyDataPoolFailureResponseError

	retval.Code = v.GqlError.Code
	retval.Message = v.GqlError.Message
	return &retval, nil
}

// ModifyDataPoolResponse is returned by ModifyDataPool on success.
type ModifyDataPoolResponse struct {
	// Modifies a Data Pool with the provided unique name, description, and data retention time. If any of the optional arguments are omitted, those properties will be unchanged on the Data Pool.
	ModifyDataPool *ModifyDataPoolModifyDataPoolDataPoolOrFailureResponse `json:"-"`
}

// GetModifyDataPool returns ModifyDataPoolResponse.ModifyDataPool, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolResponse) GetModifyDataPool() *ModifyDataPoolModifyDataPoolDataPoolOrFailureResponse {
	return v.ModifyDataPool
}

func (v *ModifyDataPoolResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ModifyDataPoolResponse
		ModifyDataPool json.RawMessage `json:"modifyDataPool"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ModifyDataPoolResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.ModifyDataPool
		src := firstPass.ModifyDataPool
		if len(src) != 0 && string(src) != "null" {
			*dst = new(ModifyDataPoolModifyDataPoolDataPoolOrFailureResponse)
			err = __unmarshalModifyDataPoolModifyDataPoolDataPoolOrFailureResponse(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal ModifyDataPoolResponse.ModifyDataPool: %w", err)
			}
		}
	}
	return nil
}

type __premarshalModifyDataPoolResponse struct {
	ModifyDataPool json.RawMessage `json:"modifyDataPool"`
}

func (v *ModifyDataPoolResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ModifyDataPoolResponse) __premarshalJSON() (*__premarshalModifyDataPoolResponse, error) {
	var retval __premarshalModifyDataPoolResponse

	{

		dst := &retval.ModifyDataPool
		src := v.ModifyDataPool
		if src != nil {
			var err error
			*dst, err = __marshalModifyDataPoolModifyDataPoolDataPoolOrFailureResponse(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal ModifyDataPoolResponse.ModifyDataPool: %w", err)
			}
		}
	}
	return &retval, nil
}

type ModifyHttpDataSourceInput struct {
	// The HTTP Data Source's new connection settings. If not provided this property will not be modified.
	ConnectionSettings *PartialHttpConnectionSettingsInput `json:"connectionSettings,omitempty"`
	// The HTTP Data Source's new description. If not provided this property will not be modified.
	Description *string `json:"description"`
	// The ID or unique name of the HTTP Data Source to modify.
	IdOrUniqueName *IdOrUniqueName `json:"idOrUniqueName,omitempty"`
	// The HTTP Data Source's new unique name. If not provided this property will not be modified.
	UniqueName *string `json:"uniqueName"`
}

// GetConnectionSettings returns ModifyHttpDataSourceInput.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *ModifyHttpDataSourceInput) GetConnectionSettings() *PartialHttpConnectionSettingsInput {
	return v.ConnectionSettings
}

// GetDescription returns ModifyHttpDataSourceInput.Description, and is useful for accessing the field via an interface.
func (v *ModifyHttpDataSourceInput) GetDescription() *string { return v.Description }

// GetIdOrUniqueName returns ModifyHttpDataSourceInput.IdOrUniqueName, and is useful for accessing the field via an interface.
func (v *ModifyHttpDataSourceInput) GetIdOrUniqueName() *IdOrUniqueName { return v.IdOrUniqueName }

// GetUniqueName returns ModifyHttpDataSourceInput.UniqueName, and is useful for accessing the field via an interface.
func (v *ModifyHttpDataSourceInput) GetUniqueName() *string { return v.UniqueName }

// ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponse includes the requested fields of the GraphQL type DataSourceResponse.
// The GraphQL type's documentation follows.
//
// The result of a mutation which creates or modifies a Data Source.
type ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponse struct {
	// The Data Source which was created or modified.
	DataSource *ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource `json:"dataSource"`
}

// GetDataSource returns ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponse.DataSource, and is useful for accessing the field via an interface.
func (v *ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponse) GetDataSource() *ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource {
	return v.DataSource
}

// ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource includes the requested fields of the GraphQL type DataSource.
// The GraphQL type's documentation follows.
//
// The Data Source object.
//
// A Data Source is a connection to your data warehouse. It has the necessary connection details for Propel to access Snowflake or any other supported Data Source.
//
// [Learn more about Data Sources](https://www.propeldata.com/docs/data-sources).
type ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource struct {
	DataSourceData `json:"-"`
}

// GetId returns ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource.Id, and is useful for accessing the field via an interface.
func (v *ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource) GetId() string {
	return v.DataSourceData.Id
}

// GetType returns ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource.Type, and is useful for accessing the field via an interface.
func (v *ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource) GetType() DataSourceType {
	return v.DataSourceData.Type
}

// GetStatus returns ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource.Status, and is useful for accessing the field via an interface.
func (v *ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource) GetStatus() DataSourceStatus {
	return v.DataSourceData.Status
}

// GetError returns ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource.Error, and is useful for accessing the field via an interface.
func (v *ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource) GetError() *DataSourceDataError {
	return v.DataSourceData.Error
}

// GetDataPools returns ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource.DataPools, and is useful for accessing the field via an interface.
func (v *ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource) GetDataPools() *DataSourceDataDataPoolsDataPoolConnection {
	return v.DataSourceData.DataPools
}

// GetConnectionSettings returns ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource) GetConnectionSettings() DataSourceDataConnectionSettings {
	return v.DataSourceData.ConnectionSettings
}

// GetTables returns ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource.Tables, and is useful for accessing the field via an interface.
func (v *ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource) GetTables() *DataSourceDataTablesTableConnection {
	return v.DataSourceData.Tables
}

// GetChecks returns ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource.Checks, and is useful for accessing the field via an interface.
func (v *ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource) GetChecks() []*DataSourceDataChecksDataSourceCheck {
	return v.DataSourceData.Checks
}

// GetTableIntrospections returns ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource.TableIntrospections, and is useful for accessing the field via an interface.
func (v *ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource) GetTableIntrospections() *DataSourceDataTableIntrospectionsTableIntrospectionConnection {
	return v.DataSourceData.TableIntrospections
}

// GetUniqueName returns ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource.UniqueName, and is useful for accessing the field via an interface.
func (v *ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource) GetUniqueName() string {
	return v.DataSourceData.CommonDataDataSource.UniqueName
}

// GetDescription returns ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource.Description, and is useful for accessing the field via an interface.
func (v *ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource) GetDescription() string {
	return v.DataSourceData.CommonDataDataSource.Description
}

// GetAccount returns ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource.Account, and is useful for accessing the field via an interface.
func (v *ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource) GetAccount() *CommonDataAccount {
	return v.DataSourceData.CommonDataDataSource.Account
}

// GetEnvironment returns ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource.Environment, and is useful for accessing the field via an interface.
func (v *ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource) GetEnvironment() *CommonDataEnvironment {
	return v.DataSourceData.CommonDataDataSource.Environment
}

// GetCreatedAt returns ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource) GetCreatedAt() time.Time {
	return v.DataSourceData.CommonDataDataSource.CreatedAt
}

// GetModifiedAt returns ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource) GetModifiedAt() time.Time {
	return v.DataSourceData.CommonDataDataSource.ModifiedAt
}

// GetCreatedBy returns ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource.CreatedBy, and is useful for accessing the field via an interface.
func (v *ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource) GetCreatedBy() string {
	return v.DataSourceData.CommonDataDataSource.CreatedBy
}

// GetModifiedBy returns ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource.ModifiedBy, and is useful for accessing the field via an interface.
func (v *ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource) GetModifiedBy() string {
	return v.DataSourceData.CommonDataDataSource.ModifiedBy
}

func (v *ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataSourceData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource struct {
	Id string `json:"id"`

	Type DataSourceType `json:"type"`

	Status DataSourceStatus `json:"status"`

	Error *DataSourceDataError `json:"error"`

	DataPools *DataSourceDataDataPoolsDataPoolConnection `json:"dataPools"`

	ConnectionSettings json.RawMessage `json:"connectionSettings"`

	Tables *DataSourceDataTablesTableConnection `json:"tables"`

	Checks []*DataSourceDataChecksDataSourceCheck `json:"checks"`

	TableIntrospections *DataSourceDataTableIntrospectionsTableIntrospectionConnection `json:"tableIntrospections"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource) __premarshalJSON() (*__premarshalModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource, error) {
	var retval __premarshalModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource

	retval.Id = v.DataSourceData.Id
	retval.Type = v.DataSourceData.Type
	retval.Status = v.DataSourceData.Status
	retval.Error = v.DataSourceData.Error
	retval.DataPools = v.DataSourceData.DataPools
	{

		dst := &retval.ConnectionSettings
		src := v.DataSourceData.ConnectionSettings
		var err error
		*dst, err = __marshalDataSourceDataConnectionSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponseDataSource.DataSourceData.ConnectionSettings: %w", err)
		}
	}
	retval.Tables = v.DataSourceData.Tables
	retval.Checks = v.DataSourceData.Checks
	retval.TableIntrospections = v.DataSourceData.TableIntrospections
	retval.UniqueName = v.DataSourceData.CommonDataDataSource.UniqueName
	retval.Description = v.DataSourceData.CommonDataDataSource.Description
	retval.Account = v.DataSourceData.CommonDataDataSource.Account
	retval.Environment = v.DataSourceData.CommonDataDataSource.Environment
	retval.CreatedAt = v.DataSourceData.CommonDataDataSource.CreatedAt
	retval.ModifiedAt = v.DataSourceData.CommonDataDataSource.ModifiedAt
	retval.CreatedBy = v.DataSourceData.CommonDataDataSource.CreatedBy
	retval.ModifiedBy = v.DataSourceData.CommonDataDataSource.ModifiedBy
	return &retval, nil
}

// ModifyHttpDataSourceResponse is returned by ModifyHttpDataSource on success.
type ModifyHttpDataSourceResponse struct {
	// This mutation selects a Data Source by its ID or unique name and modifies it to have the given unique name, description, and connection settings.
	//
	// If any of the optional arguments are omitted, those properties will be unchanged on the Data Source.
	ModifyHttpDataSource *ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponse `json:"modifyHttpDataSource"`
}

// GetModifyHttpDataSource returns ModifyHttpDataSourceResponse.ModifyHttpDataSource, and is useful for accessing the field via an interface.
func (v *ModifyHttpDataSourceResponse) GetModifyHttpDataSource() *ModifyHttpDataSourceModifyHttpDataSourceDataSourceResponse {
	return v.ModifyHttpDataSource
}

// The fields for modifying a Materialized View.
type ModifyMaterializedViewInput struct {
	// The ID of the Materialized View to modify.
	Id string `json:"id"`
	// The Materialized View's new unique name.
	UniqueName *string `json:"uniqueName"`
	// The Materialized View's new description.
	Description *string `json:"description"`
}

// GetId returns ModifyMaterializedViewInput.Id, and is useful for accessing the field via an interface.
func (v *ModifyMaterializedViewInput) GetId() string { return v.Id }

// GetUniqueName returns ModifyMaterializedViewInput.UniqueName, and is useful for accessing the field via an interface.
func (v *ModifyMaterializedViewInput) GetUniqueName() *string { return v.UniqueName }

// GetDescription returns ModifyMaterializedViewInput.Description, and is useful for accessing the field via an interface.
func (v *ModifyMaterializedViewInput) GetDescription() *string { return v.Description }

// ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponse includes the requested fields of the GraphQL type MaterializedViewResponse.
// The GraphQL type's documentation follows.
//
// The result of a mutation which creates or modifies a Materialized View.
type ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponse struct {
	// The Materialized View which was created or modified.
	MaterializedView *ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponseMaterializedView `json:"materializedView"`
}

// GetMaterializedView returns ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponse.MaterializedView, and is useful for accessing the field via an interface.
func (v *ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponse) GetMaterializedView() *ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponseMaterializedView {
	return v.MaterializedView
}

// ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponseMaterializedView includes the requested fields of the GraphQL type MaterializedView.
type ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponseMaterializedView struct {
	MaterializedViewData `json:"-"`
}

// GetId returns ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponseMaterializedView.Id, and is useful for accessing the field via an interface.
func (v *ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponseMaterializedView) GetId() string {
	return v.MaterializedViewData.Id
}

// GetSql returns ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponseMaterializedView.Sql, and is useful for accessing the field via an interface.
func (v *ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponseMaterializedView) GetSql() string {
	return v.MaterializedViewData.Sql
}

// GetDestination returns ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponseMaterializedView.Destination, and is useful for accessing the field via an interface.
func (v *ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponseMaterializedView) GetDestination() *MaterializedViewDataDestinationDataPool {
	return v.MaterializedViewData.Destination
}

// GetSource returns ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponseMaterializedView.Source, and is useful for accessing the field via an interface.
func (v *ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponseMaterializedView) GetSource() *MaterializedViewDataSourceDataPool {
	return v.MaterializedViewData.Source
}

// GetOthers returns ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponseMaterializedView.Others, and is useful for accessing the field via an interface.
func (v *ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponseMaterializedView) GetOthers() []*MaterializedViewDataOthersDataPool {
	return v.MaterializedViewData.Others
}

// GetUniqueName returns ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponseMaterializedView.UniqueName, and is useful for accessing the field via an interface.
func (v *ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponseMaterializedView) GetUniqueName() string {
	return v.MaterializedViewData.CommonDataMaterializedView.UniqueName
}

// GetDescription returns ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponseMaterializedView.Description, and is useful for accessing the field via an interface.
func (v *ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponseMaterializedView) GetDescription() string {
	return v.MaterializedViewData.CommonDataMaterializedView.Description
}

// GetAccount returns ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponseMaterializedView.Account, and is useful for accessing the field via an interface.
func (v *ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponseMaterializedView) GetAccount() *CommonDataAccount {
	return v.MaterializedViewData.CommonDataMaterializedView.Account
}

// GetEnvironment returns ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponseMaterializedView.Environment, and is useful for accessing the field via an interface.
func (v *ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponseMaterializedView) GetEnvironment() *CommonDataEnvironment {
	return v.MaterializedViewData.CommonDataMaterializedView.Environment
}

// GetCreatedAt returns ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponseMaterializedView.CreatedAt, and is useful for accessing the field via an interface.
func (v *ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponseMaterializedView) GetCreatedAt() time.Time {
	return v.MaterializedViewData.CommonDataMaterializedView.CreatedAt
}

// GetModifiedAt returns ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponseMaterializedView.ModifiedAt, and is useful for accessing the field via an interface.
func (v *ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponseMaterializedView) GetModifiedAt() time.Time {
	return v.MaterializedViewData.CommonDataMaterializedView.ModifiedAt
}

// GetCreatedBy returns ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponseMaterializedView.CreatedBy, and is useful for accessing the field via an interface.
func (v *ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponseMaterializedView) GetCreatedBy() string {
	return v.MaterializedViewData.CommonDataMaterializedView.CreatedBy
}

// GetModifiedBy returns ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponseMaterializedView.ModifiedBy, and is useful for accessing the field via an interface.
func (v *ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponseMaterializedView) GetModifiedBy() string {
	return v.MaterializedViewData.CommonDataMaterializedView.ModifiedBy
}

func (v *ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponseMaterializedView) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponseMaterializedView
		graphql.NoUnmarshalJSON
	}
	firstPass.ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponseMaterializedView = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MaterializedViewData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalModifyMaterializedViewModifyMaterializedViewMaterializedViewResponseMaterializedView struct {
	Id string `json:"id"`

	Sql string `json:"sql"`

	Destination *MaterializedViewDataDestinationDataPool `json:"destination"`

	Source *MaterializedViewDataSourceDataPool `json:"source"`

	Others []*MaterializedViewDataOthersDataPool `json:"others"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponseMaterializedView) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponseMaterializedView) __premarshalJSON() (*__premarshalModifyMaterializedViewModifyMaterializedViewMaterializedViewResponseMaterializedView, error) {
	var retval __premarshalModifyMaterializedViewModifyMaterializedViewMaterializedViewResponseMaterializedView

	retval.Id = v.MaterializedViewData.Id
	retval.Sql = v.MaterializedViewData.Sql
	retval.Destination = v.MaterializedViewData.Destination
	retval.Source = v.MaterializedViewData.Source
	retval.Others = v.MaterializedViewData.Others
	retval.UniqueName = v.MaterializedViewData.CommonDataMaterializedView.UniqueName
	retval.Description = v.MaterializedViewData.CommonDataMaterializedView.Description
	retval.Account = v.MaterializedViewData.CommonDataMaterializedView.Account
	retval.Environment = v.MaterializedViewData.CommonDataMaterializedView.Environment
	retval.CreatedAt = v.MaterializedViewData.CommonDataMaterializedView.CreatedAt
	retval.ModifiedAt = v.MaterializedViewData.CommonDataMaterializedView.ModifiedAt
	retval.CreatedBy = v.MaterializedViewData.CommonDataMaterializedView.CreatedBy
	retval.ModifiedBy = v.MaterializedViewData.CommonDataMaterializedView.ModifiedBy
	return &retval, nil
}

// ModifyMaterializedViewResponse is returned by ModifyMaterializedView on success.
type ModifyMaterializedViewResponse struct {
	// Modifies a Materialized View. If any of the optional arguments are omitted, those properties will be unchanged on the Materialized View.
	ModifyMaterializedView *ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponse `json:"modifyMaterializedView"`
}

// GetModifyMaterializedView returns ModifyMaterializedViewResponse.ModifyMaterializedView, and is useful for accessing the field via an interface.
func (v *ModifyMaterializedViewResponse) GetModifyMaterializedView() *ModifyMaterializedViewModifyMaterializedViewMaterializedViewResponse {
	return v.ModifyMaterializedView
}

// The fields for modifying a Metric.
type ModifyMetricInput struct {
	// The ID of the Metric to modify.
	Metric string `json:"metric"`
	// The Metric's new unique name.
	UniqueName *string `json:"uniqueName"`
	// The Metric's new description.
	Description *string `json:"description"`
	// The Metric's new Dimensions. Used to add or remove Dimensions.
	Dimensions []*DimensionInput `json:"dimensions,omitempty"`
	// The Metric's new Filters. Used to add or remove Metric Filters.
	Filters []*FilterInput `json:"filters,omitempty"`
	// The Metric's new Filters, in the form of SQL. Used to add or remove Metric Filters.
	FilterSql *string `json:"filterSql"`
	// Enables or disables access control for the Metric.
	AccessControlEnabled *bool `json:"accessControlEnabled"`
}

// GetMetric returns ModifyMetricInput.Metric, and is useful for accessing the field via an interface.
func (v *ModifyMetricInput) GetMetric() string { return v.Metric }

// GetUniqueName returns ModifyMetricInput.UniqueName, and is useful for accessing the field via an interface.
func (v *ModifyMetricInput) GetUniqueName() *string { return v.UniqueName }

// GetDescription returns ModifyMetricInput.Description, and is useful for accessing the field via an interface.
func (v *ModifyMetricInput) GetDescription() *string { return v.Description }

// GetDimensions returns ModifyMetricInput.Dimensions, and is useful for accessing the field via an interface.
func (v *ModifyMetricInput) GetDimensions() []*DimensionInput { return v.Dimensions }

// GetFilters returns ModifyMetricInput.Filters, and is useful for accessing the field via an interface.
func (v *ModifyMetricInput) GetFilters() []*FilterInput { return v.Filters }

// GetFilterSql returns ModifyMetricInput.FilterSql, and is useful for accessing the field via an interface.
func (v *ModifyMetricInput) GetFilterSql() *string { return v.FilterSql }

// GetAccessControlEnabled returns ModifyMetricInput.AccessControlEnabled, and is useful for accessing the field via an interface.
func (v *ModifyMetricInput) GetAccessControlEnabled() *bool { return v.AccessControlEnabled }

// ModifyMetricModifyMetricMetricResponse includes the requested fields of the GraphQL type MetricResponse.
// The GraphQL type's documentation follows.
//
// The result of a mutation which creates or modifies a Metric.
type ModifyMetricModifyMetricMetricResponse struct {
	Typename *string `json:"__typename"`
	// The Metric which was created or modified.
	Metric *ModifyMetricModifyMetricMetricResponseMetric `json:"metric"`
}

// GetTypename returns ModifyMetricModifyMetricMetricResponse.Typename, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponse) GetTypename() *string { return v.Typename }

// GetMetric returns ModifyMetricModifyMetricMetricResponse.Metric, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponse) GetMetric() *ModifyMetricModifyMetricMetricResponseMetric {
	return v.Metric
}

// ModifyMetricModifyMetricMetricResponseMetric includes the requested fields of the GraphQL type Metric.
// The GraphQL type's documentation follows.
//
// The Metric object.
//
// A Metric is a business indicator measured over time.
//
// [Learn more about Metrics](/docs/key-concepts#metric).
type ModifyMetricModifyMetricMetricResponseMetric struct {
	MetricData `json:"-"`
}

// GetId returns ModifyMetricModifyMetricMetricResponseMetric.Id, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetId() string { return v.MetricData.Id }

// GetType returns ModifyMetricModifyMetricMetricResponseMetric.Type, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetType() MetricType { return v.MetricData.Type }

// GetAccessControlEnabled returns ModifyMetricModifyMetricMetricResponseMetric.AccessControlEnabled, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetAccessControlEnabled() bool {
	return v.MetricData.AccessControlEnabled
}

// GetDataPool returns ModifyMetricModifyMetricMetricResponseMetric.DataPool, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetDataPool() *MetricDataDataPool {
	return v.MetricData.DataPool
}

// GetDimensions returns ModifyMetricModifyMetricMetricResponseMetric.Dimensions, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetDimensions() []*MetricDataDimensionsDimension {
	return v.MetricData.Dimensions
}

// GetTimestamp returns ModifyMetricModifyMetricMetricResponseMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetTimestamp() *MetricDataTimestampDimension {
	return v.MetricData.Timestamp
}

// GetMeasure returns ModifyMetricModifyMetricMetricResponseMetric.Measure, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetMeasure() *MetricDataMeasureDimension {
	return v.MetricData.Measure
}

// GetSettings returns ModifyMetricModifyMetricMetricResponseMetric.Settings, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetSettings() MetricDataSettingsMetricSettings {
	return v.MetricData.Settings
}

// GetUniqueName returns ModifyMetricModifyMetricMetricResponseMetric.UniqueName, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetUniqueName() string {
	return v.MetricData.CommonDataMetric.UniqueName
}

// GetDescription returns ModifyMetricModifyMetricMetricResponseMetric.Description, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetDescription() string {
	return v.MetricData.CommonDataMetric.Description
}

// GetAccount returns ModifyMetricModifyMetricMetricResponseMetric.Account, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetAccount() *CommonDataAccount {
	return v.MetricData.CommonDataMetric.Account
}

// GetEnvironment returns ModifyMetricModifyMetricMetricResponseMetric.Environment, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetEnvironment() *CommonDataEnvironment {
	return v.MetricData.CommonDataMetric.Environment
}

// GetCreatedAt returns ModifyMetricModifyMetricMetricResponseMetric.CreatedAt, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetCreatedAt() time.Time {
	return v.MetricData.CommonDataMetric.CreatedAt
}

// GetModifiedAt returns ModifyMetricModifyMetricMetricResponseMetric.ModifiedAt, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetModifiedAt() time.Time {
	return v.MetricData.CommonDataMetric.ModifiedAt
}

// GetCreatedBy returns ModifyMetricModifyMetricMetricResponseMetric.CreatedBy, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetCreatedBy() string {
	return v.MetricData.CommonDataMetric.CreatedBy
}

// GetModifiedBy returns ModifyMetricModifyMetricMetricResponseMetric.ModifiedBy, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetModifiedBy() string {
	return v.MetricData.CommonDataMetric.ModifiedBy
}

func (v *ModifyMetricModifyMetricMetricResponseMetric) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ModifyMetricModifyMetricMetricResponseMetric
		graphql.NoUnmarshalJSON
	}
	firstPass.ModifyMetricModifyMetricMetricResponseMetric = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MetricData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalModifyMetricModifyMetricMetricResponseMetric struct {
	Id string `json:"id"`

	Type MetricType `json:"type"`

	AccessControlEnabled bool `json:"accessControlEnabled"`

	DataPool *MetricDataDataPool `json:"dataPool"`

	Dimensions []*MetricDataDimensionsDimension `json:"dimensions"`

	Timestamp *MetricDataTimestampDimension `json:"timestamp"`

	Measure *MetricDataMeasureDimension `json:"measure"`

	Settings json.RawMessage `json:"settings"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *ModifyMetricModifyMetricMetricResponseMetric) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ModifyMetricModifyMetricMetricResponseMetric) __premarshalJSON() (*__premarshalModifyMetricModifyMetricMetricResponseMetric, error) {
	var retval __premarshalModifyMetricModifyMetricMetricResponseMetric

	retval.Id = v.MetricData.Id
	retval.Type = v.MetricData.Type
	retval.AccessControlEnabled = v.MetricData.AccessControlEnabled
	retval.DataPool = v.MetricData.DataPool
	retval.Dimensions = v.MetricData.Dimensions
	retval.Timestamp = v.MetricData.Timestamp
	retval.Measure = v.MetricData.Measure
	{

		dst := &retval.Settings
		src := v.MetricData.Settings
		var err error
		*dst, err = __marshalMetricDataSettingsMetricSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal ModifyMetricModifyMetricMetricResponseMetric.MetricData.Settings: %w", err)
		}
	}
	retval.UniqueName = v.MetricData.CommonDataMetric.UniqueName
	retval.Description = v.MetricData.CommonDataMetric.Description
	retval.Account = v.MetricData.CommonDataMetric.Account
	retval.Environment = v.MetricData.CommonDataMetric.Environment
	retval.CreatedAt = v.MetricData.CommonDataMetric.CreatedAt
	retval.ModifiedAt = v.MetricData.CommonDataMetric.ModifiedAt
	retval.CreatedBy = v.MetricData.CommonDataMetric.CreatedBy
	retval.ModifiedBy = v.MetricData.CommonDataMetric.ModifiedBy
	return &retval, nil
}

// ModifyMetricResponse is returned by ModifyMetric on success.
type ModifyMetricResponse struct {
	// Modifies a Metric by ID with the provided unique name, description, and Dimensions. If any of the optional arguments are omitted, those properties will be unchanged on the Metric.
	ModifyMetric *ModifyMetricModifyMetricMetricResponse `json:"modifyMetric"`
}

// GetModifyMetric returns ModifyMetricResponse.ModifyMetric, and is useful for accessing the field via an interface.
func (v *ModifyMetricResponse) GetModifyMetric() *ModifyMetricModifyMetricMetricResponse {
	return v.ModifyMetric
}

// The fields for modifying a Policy.
type ModifyPolicyInput struct {
	// The Policy's unique identifier.
	Policy string `json:"policy"`
	// The type of Policy.
	Type PolicyType `json:"type"`
}

// GetPolicy returns ModifyPolicyInput.Policy, and is useful for accessing the field via an interface.
func (v *ModifyPolicyInput) GetPolicy() string { return v.Policy }

// GetType returns ModifyPolicyInput.Type, and is useful for accessing the field via an interface.
func (v *ModifyPolicyInput) GetType() PolicyType { return v.Type }

// ModifyPolicyModifyPolicyPolicyResponse includes the requested fields of the GraphQL type PolicyResponse.
// The GraphQL type's documentation follows.
//
// The result of a mutation which creates or modifies a Policy.
type ModifyPolicyModifyPolicyPolicyResponse struct {
	// The Policy which was created or modified.
	Policy *ModifyPolicyModifyPolicyPolicyResponsePolicy `json:"policy"`
}

// GetPolicy returns ModifyPolicyModifyPolicyPolicyResponse.Policy, and is useful for accessing the field via an interface.
func (v *ModifyPolicyModifyPolicyPolicyResponse) GetPolicy() *ModifyPolicyModifyPolicyPolicyResponsePolicy {
	return v.Policy
}

// ModifyPolicyModifyPolicyPolicyResponsePolicy includes the requested fields of the GraphQL type Policy.
// The GraphQL type's documentation follows.
//
// The Policy type. It governs an Application's access to a Metric's data.
type ModifyPolicyModifyPolicyPolicyResponsePolicy struct {
	PolicyData `json:"-"`
}

// GetId returns ModifyPolicyModifyPolicyPolicyResponsePolicy.Id, and is useful for accessing the field via an interface.
func (v *ModifyPolicyModifyPolicyPolicyResponsePolicy) GetId() string { return v.PolicyData.Id }

// GetType returns ModifyPolicyModifyPolicyPolicyResponsePolicy.Type, and is useful for accessing the field via an interface.
func (v *ModifyPolicyModifyPolicyPolicyResponsePolicy) GetType() PolicyType { return v.PolicyData.Type }

// GetMetric returns ModifyPolicyModifyPolicyPolicyResponsePolicy.Metric, and is useful for accessing the field via an interface.
func (v *ModifyPolicyModifyPolicyPolicyResponsePolicy) GetMetric() *PolicyDataMetric {
	return v.PolicyData.Metric
}

// GetApplication returns ModifyPolicyModifyPolicyPolicyResponsePolicy.Application, and is useful for accessing the field via an interface.
func (v *ModifyPolicyModifyPolicyPolicyResponsePolicy) GetApplication() *PolicyDataApplication {
	return v.PolicyData.Application
}

func (v *ModifyPolicyModifyPolicyPolicyResponsePolicy) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ModifyPolicyModifyPolicyPolicyResponsePolicy
		graphql.NoUnmarshalJSON
	}
	firstPass.ModifyPolicyModifyPolicyPolicyResponsePolicy = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PolicyData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalModifyPolicyModifyPolicyPolicyResponsePolicy struct {
	Id string `json:"id"`

	Type PolicyType `json:"type"`

	Metric *PolicyDataMetric `json:"metric"`

	Application *PolicyDataApplication `json:"application"`
}

func (v *ModifyPolicyModifyPolicyPolicyResponsePolicy) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ModifyPolicyModifyPolicyPolicyResponsePolicy) __premarshalJSON() (*__premarshalModifyPolicyModifyPolicyPolicyResponsePolicy, error) {
	var retval __premarshalModifyPolicyModifyPolicyPolicyResponsePolicy

	retval.Id = v.PolicyData.Id
	retval.Type = v.PolicyData.Type
	retval.Metric = v.PolicyData.Metric
	retval.Application = v.PolicyData.Application
	return &retval, nil
}

// ModifyPolicyResponse is returned by ModifyPolicy on success.
type ModifyPolicyResponse struct {
	// Modifies an existing Policy. You can modify the Application's level of access to the Metric's data.
	ModifyPolicy *ModifyPolicyModifyPolicyPolicyResponse `json:"modifyPolicy"`
}

// GetModifyPolicy returns ModifyPolicyResponse.ModifyPolicy, and is useful for accessing the field via an interface.
func (v *ModifyPolicyResponse) GetModifyPolicy() *ModifyPolicyModifyPolicyPolicyResponse {
	return v.ModifyPolicy
}

type ModifyS3DataSourceInput struct {
	// The S3 Data Source's new connection settings. If not provided this property will not be modified.
	ConnectionSettings *PartialS3ConnectionSettingsInput `json:"connectionSettings,omitempty"`
	// The S3 Data Source's new description. If not provided this property will not be modified.
	Description *string `json:"description"`
	// The ID or unique name of the S3 Data Source to modify.
	IdOrUniqueName *IdOrUniqueName `json:"idOrUniqueName,omitempty"`
	// The S3 Data Source's new unique name. If not provided this property will not be modified.
	UniqueName *string `json:"uniqueName"`
}

// GetConnectionSettings returns ModifyS3DataSourceInput.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *ModifyS3DataSourceInput) GetConnectionSettings() *PartialS3ConnectionSettingsInput {
	return v.ConnectionSettings
}

// GetDescription returns ModifyS3DataSourceInput.Description, and is useful for accessing the field via an interface.
func (v *ModifyS3DataSourceInput) GetDescription() *string { return v.Description }

// GetIdOrUniqueName returns ModifyS3DataSourceInput.IdOrUniqueName, and is useful for accessing the field via an interface.
func (v *ModifyS3DataSourceInput) GetIdOrUniqueName() *IdOrUniqueName { return v.IdOrUniqueName }

// GetUniqueName returns ModifyS3DataSourceInput.UniqueName, and is useful for accessing the field via an interface.
func (v *ModifyS3DataSourceInput) GetUniqueName() *string { return v.UniqueName }

// ModifyS3DataSourceModifyS3DataSourceDataSourceResponse includes the requested fields of the GraphQL type DataSourceResponse.
// The GraphQL type's documentation follows.
//
// The result of a mutation which creates or modifies a Data Source.
type ModifyS3DataSourceModifyS3DataSourceDataSourceResponse struct {
	// The Data Source which was created or modified.
	DataSource *ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource `json:"dataSource"`
}

// GetDataSource returns ModifyS3DataSourceModifyS3DataSourceDataSourceResponse.DataSource, and is useful for accessing the field via an interface.
func (v *ModifyS3DataSourceModifyS3DataSourceDataSourceResponse) GetDataSource() *ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource {
	return v.DataSource
}

// ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource includes the requested fields of the GraphQL type DataSource.
// The GraphQL type's documentation follows.
//
// The Data Source object.
//
// A Data Source is a connection to your data warehouse. It has the necessary connection details for Propel to access Snowflake or any other supported Data Source.
//
// [Learn more about Data Sources](https://www.propeldata.com/docs/data-sources).
type ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource struct {
	DataSourceData `json:"-"`
}

// GetId returns ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource.Id, and is useful for accessing the field via an interface.
func (v *ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource) GetId() string {
	return v.DataSourceData.Id
}

// GetType returns ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource.Type, and is useful for accessing the field via an interface.
func (v *ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource) GetType() DataSourceType {
	return v.DataSourceData.Type
}

// GetStatus returns ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource.Status, and is useful for accessing the field via an interface.
func (v *ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource) GetStatus() DataSourceStatus {
	return v.DataSourceData.Status
}

// GetError returns ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource.Error, and is useful for accessing the field via an interface.
func (v *ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource) GetError() *DataSourceDataError {
	return v.DataSourceData.Error
}

// GetDataPools returns ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource.DataPools, and is useful for accessing the field via an interface.
func (v *ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource) GetDataPools() *DataSourceDataDataPoolsDataPoolConnection {
	return v.DataSourceData.DataPools
}

// GetConnectionSettings returns ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource) GetConnectionSettings() DataSourceDataConnectionSettings {
	return v.DataSourceData.ConnectionSettings
}

// GetTables returns ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource.Tables, and is useful for accessing the field via an interface.
func (v *ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource) GetTables() *DataSourceDataTablesTableConnection {
	return v.DataSourceData.Tables
}

// GetChecks returns ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource.Checks, and is useful for accessing the field via an interface.
func (v *ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource) GetChecks() []*DataSourceDataChecksDataSourceCheck {
	return v.DataSourceData.Checks
}

// GetTableIntrospections returns ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource.TableIntrospections, and is useful for accessing the field via an interface.
func (v *ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource) GetTableIntrospections() *DataSourceDataTableIntrospectionsTableIntrospectionConnection {
	return v.DataSourceData.TableIntrospections
}

// GetUniqueName returns ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource.UniqueName, and is useful for accessing the field via an interface.
func (v *ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource) GetUniqueName() string {
	return v.DataSourceData.CommonDataDataSource.UniqueName
}

// GetDescription returns ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource.Description, and is useful for accessing the field via an interface.
func (v *ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource) GetDescription() string {
	return v.DataSourceData.CommonDataDataSource.Description
}

// GetAccount returns ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource.Account, and is useful for accessing the field via an interface.
func (v *ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource) GetAccount() *CommonDataAccount {
	return v.DataSourceData.CommonDataDataSource.Account
}

// GetEnvironment returns ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource.Environment, and is useful for accessing the field via an interface.
func (v *ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource) GetEnvironment() *CommonDataEnvironment {
	return v.DataSourceData.CommonDataDataSource.Environment
}

// GetCreatedAt returns ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource) GetCreatedAt() time.Time {
	return v.DataSourceData.CommonDataDataSource.CreatedAt
}

// GetModifiedAt returns ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource) GetModifiedAt() time.Time {
	return v.DataSourceData.CommonDataDataSource.ModifiedAt
}

// GetCreatedBy returns ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource.CreatedBy, and is useful for accessing the field via an interface.
func (v *ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource) GetCreatedBy() string {
	return v.DataSourceData.CommonDataDataSource.CreatedBy
}

// GetModifiedBy returns ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource.ModifiedBy, and is useful for accessing the field via an interface.
func (v *ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource) GetModifiedBy() string {
	return v.DataSourceData.CommonDataDataSource.ModifiedBy
}

func (v *ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataSourceData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource struct {
	Id string `json:"id"`

	Type DataSourceType `json:"type"`

	Status DataSourceStatus `json:"status"`

	Error *DataSourceDataError `json:"error"`

	DataPools *DataSourceDataDataPoolsDataPoolConnection `json:"dataPools"`

	ConnectionSettings json.RawMessage `json:"connectionSettings"`

	Tables *DataSourceDataTablesTableConnection `json:"tables"`

	Checks []*DataSourceDataChecksDataSourceCheck `json:"checks"`

	TableIntrospections *DataSourceDataTableIntrospectionsTableIntrospectionConnection `json:"tableIntrospections"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource) __premarshalJSON() (*__premarshalModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource, error) {
	var retval __premarshalModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource

	retval.Id = v.DataSourceData.Id
	retval.Type = v.DataSourceData.Type
	retval.Status = v.DataSourceData.Status
	retval.Error = v.DataSourceData.Error
	retval.DataPools = v.DataSourceData.DataPools
	{

		dst := &retval.ConnectionSettings
		src := v.DataSourceData.ConnectionSettings
		var err error
		*dst, err = __marshalDataSourceDataConnectionSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal ModifyS3DataSourceModifyS3DataSourceDataSourceResponseDataSource.DataSourceData.ConnectionSettings: %w", err)
		}
	}
	retval.Tables = v.DataSourceData.Tables
	retval.Checks = v.DataSourceData.Checks
	retval.TableIntrospections = v.DataSourceData.TableIntrospections
	retval.UniqueName = v.DataSourceData.CommonDataDataSource.UniqueName
	retval.Description = v.DataSourceData.CommonDataDataSource.Description
	retval.Account = v.DataSourceData.CommonDataDataSource.Account
	retval.Environment = v.DataSourceData.CommonDataDataSource.Environment
	retval.CreatedAt = v.DataSourceData.CommonDataDataSource.CreatedAt
	retval.ModifiedAt = v.DataSourceData.CommonDataDataSource.ModifiedAt
	retval.CreatedBy = v.DataSourceData.CommonDataDataSource.CreatedBy
	retval.ModifiedBy = v.DataSourceData.CommonDataDataSource.ModifiedBy
	return &retval, nil
}

// ModifyS3DataSourceResponse is returned by ModifyS3DataSource on success.
type ModifyS3DataSourceResponse struct {
	// This mutation selects a Data Source by its ID or unique name and modifies it to have the given unique name, description, and connection settings.
	//
	// If any of the optional arguments are omitted, those properties will be unchanged on the Data Source.
	ModifyS3DataSource *ModifyS3DataSourceModifyS3DataSourceDataSourceResponse `json:"modifyS3DataSource"`
}

// GetModifyS3DataSource returns ModifyS3DataSourceResponse.ModifyS3DataSource, and is useful for accessing the field via an interface.
func (v *ModifyS3DataSourceResponse) GetModifyS3DataSource() *ModifyS3DataSourceModifyS3DataSourceDataSourceResponse {
	return v.ModifyS3DataSource
}

// The fields for modifying a Snowflake Data Source.
type ModifySnowflakeDataSourceInput struct {
	// The ID or unique name of the Data Source to modify.
	IdOrUniqueName *IdOrUniqueName `json:"idOrUniqueName,omitempty"`
	// The Data Source's new unique name.
	UniqueName *string `json:"uniqueName"`
	// The Data Source's new description.
	Description *string `json:"description"`
	// The Data Source's new connection settings.
	ConnectionSettings *PartialSnowflakeConnectionSettingsInput `json:"connectionSettings,omitempty"`
}

// GetIdOrUniqueName returns ModifySnowflakeDataSourceInput.IdOrUniqueName, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceInput) GetIdOrUniqueName() *IdOrUniqueName { return v.IdOrUniqueName }

// GetUniqueName returns ModifySnowflakeDataSourceInput.UniqueName, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceInput) GetUniqueName() *string { return v.UniqueName }

// GetDescription returns ModifySnowflakeDataSourceInput.Description, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceInput) GetDescription() *string { return v.Description }

// GetConnectionSettings returns ModifySnowflakeDataSourceInput.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceInput) GetConnectionSettings() *PartialSnowflakeConnectionSettingsInput {
	return v.ConnectionSettings
}

// ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse includes the requested fields of the GraphQL interface DataSourceOrFailureResponse.
//
// ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse is implemented by the following types:
// ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse
// ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse
// The GraphQL type's documentation follows.
//
// The result of a mutation which creates or modifies a DataSource.
//
// If successful, an `DataSourceResponse` will be returned; otherwise, a
// `FailureResponse` will be returned.
type ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse interface {
	implementsGraphQLInterfaceModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse) implementsGraphQLInterfaceModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse() {
}
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse) implementsGraphQLInterfaceModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse() {
}

func __unmarshalModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse(b []byte, v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "DataSourceResponse":
		*v = new(ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse)
		return json.Unmarshal(b, *v)
	case "FailureResponse":
		*v = new(ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing DataSourceOrFailureResponse.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse: "%v"`, tn.TypeName)
	}
}

func __marshalModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse(v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse:
		typename = "DataSourceResponse"

		result := struct {
			TypeName string `json:"__typename"`
			*ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse
		}{typename, v}
		return json.Marshal(result)
	case *ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse:
		typename = "FailureResponse"

		result := struct {
			TypeName string `json:"__typename"`
			*ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse: "%T"`, v)
	}
}

// ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse includes the requested fields of the GraphQL type DataSourceResponse.
// The GraphQL type's documentation follows.
//
// The result of a mutation which creates or modifies a Data Source.
type ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse struct {
	Typename *string `json:"__typename"`
	// The Data Source which was created or modified.
	DataSource *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource `json:"dataSource"`
}

// GetTypename returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse.Typename, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse) GetTypename() *string {
	return v.Typename
}

// GetDataSource returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse.DataSource, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse) GetDataSource() *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource {
	return v.DataSource
}

// ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource includes the requested fields of the GraphQL type DataSource.
// The GraphQL type's documentation follows.
//
// The Data Source object.
//
// A Data Source is a connection to your data warehouse. It has the necessary connection details for Propel to access Snowflake or any other supported Data Source.
//
// [Learn more about Data Sources](https://www.propeldata.com/docs/data-sources).
type ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource struct {
	DataSourceData `json:"-"`
}

// GetId returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.Id, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetId() string {
	return v.DataSourceData.Id
}

// GetType returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.Type, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetType() DataSourceType {
	return v.DataSourceData.Type
}

// GetStatus returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.Status, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetStatus() DataSourceStatus {
	return v.DataSourceData.Status
}

// GetError returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.Error, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetError() *DataSourceDataError {
	return v.DataSourceData.Error
}

// GetDataPools returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.DataPools, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetDataPools() *DataSourceDataDataPoolsDataPoolConnection {
	return v.DataSourceData.DataPools
}

// GetConnectionSettings returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetConnectionSettings() DataSourceDataConnectionSettings {
	return v.DataSourceData.ConnectionSettings
}

// GetTables returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.Tables, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetTables() *DataSourceDataTablesTableConnection {
	return v.DataSourceData.Tables
}

// GetChecks returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.Checks, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetChecks() []*DataSourceDataChecksDataSourceCheck {
	return v.DataSourceData.Checks
}

// GetTableIntrospections returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.TableIntrospections, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetTableIntrospections() *DataSourceDataTableIntrospectionsTableIntrospectionConnection {
	return v.DataSourceData.TableIntrospections
}

// GetUniqueName returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.UniqueName, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetUniqueName() string {
	return v.DataSourceData.CommonDataDataSource.UniqueName
}

// GetDescription returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.Description, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetDescription() string {
	return v.DataSourceData.CommonDataDataSource.Description
}

// GetAccount returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.Account, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetAccount() *CommonDataAccount {
	return v.DataSourceData.CommonDataDataSource.Account
}

// GetEnvironment returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.Environment, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetEnvironment() *CommonDataEnvironment {
	return v.DataSourceData.CommonDataDataSource.Environment
}

// GetCreatedAt returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetCreatedAt() time.Time {
	return v.DataSourceData.CommonDataDataSource.CreatedAt
}

// GetModifiedAt returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetModifiedAt() time.Time {
	return v.DataSourceData.CommonDataDataSource.ModifiedAt
}

// GetCreatedBy returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.CreatedBy, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetCreatedBy() string {
	return v.DataSourceData.CommonDataDataSource.CreatedBy
}

// GetModifiedBy returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.ModifiedBy, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetModifiedBy() string {
	return v.DataSourceData.CommonDataDataSource.ModifiedBy
}

func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataSourceData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource struct {
	Id string `json:"id"`

	Type DataSourceType `json:"type"`

	Status DataSourceStatus `json:"status"`

	Error *DataSourceDataError `json:"error"`

	DataPools *DataSourceDataDataPoolsDataPoolConnection `json:"dataPools"`

	ConnectionSettings json.RawMessage `json:"connectionSettings"`

	Tables *DataSourceDataTablesTableConnection `json:"tables"`

	Checks []*DataSourceDataChecksDataSourceCheck `json:"checks"`

	TableIntrospections *DataSourceDataTableIntrospectionsTableIntrospectionConnection `json:"tableIntrospections"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) __premarshalJSON() (*__premarshalModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource, error) {
	var retval __premarshalModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource

	retval.Id = v.DataSourceData.Id
	retval.Type = v.DataSourceData.Type
	retval.Status = v.DataSourceData.Status
	retval.Error = v.DataSourceData.Error
	retval.DataPools = v.DataSourceData.DataPools
	{

		dst := &retval.ConnectionSettings
		src := v.DataSourceData.ConnectionSettings
		var err error
		*dst, err = __marshalDataSourceDataConnectionSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.DataSourceData.ConnectionSettings: %w", err)
		}
	}
	retval.Tables = v.DataSourceData.Tables
	retval.Checks = v.DataSourceData.Checks
	retval.TableIntrospections = v.DataSourceData.TableIntrospections
	retval.UniqueName = v.DataSourceData.CommonDataDataSource.UniqueName
	retval.Description = v.DataSourceData.CommonDataDataSource.Description
	retval.Account = v.DataSourceData.CommonDataDataSource.Account
	retval.Environment = v.DataSourceData.CommonDataDataSource.Environment
	retval.CreatedAt = v.DataSourceData.CommonDataDataSource.CreatedAt
	retval.ModifiedAt = v.DataSourceData.CommonDataDataSource.ModifiedAt
	retval.CreatedBy = v.DataSourceData.CommonDataDataSource.CreatedBy
	retval.ModifiedBy = v.DataSourceData.CommonDataDataSource.ModifiedBy
	return &retval, nil
}

// ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse includes the requested fields of the GraphQL type FailureResponse.
// The GraphQL type's documentation follows.
//
// The failure response object.
type ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse struct {
	Typename *string `json:"__typename"`
	// The error that caused the failure.
	Error *ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError `json:"error"`
}

// GetTypename returns ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse.Typename, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse) GetTypename() *string {
	return v.Typename
}

// GetError returns ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse.Error, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse) GetError() *ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError {
	return v.Error
}

// ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError includes the requested fields of the GraphQL type Error.
// The GraphQL type's documentation follows.
//
// The error object.
type ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError struct {
	GqlError `json:"-"`
}

// GetCode returns ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError.Code, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError) GetCode() *int {
	return v.GqlError.Code
}

// GetMessage returns ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError.Message, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError) GetMessage() string {
	return v.GqlError.Message
}

func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError
		graphql.NoUnmarshalJSON
	}
	firstPass.ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.GqlError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError struct {
	Code *int `json:"code"`

	Message string `json:"message"`
}

func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError) __premarshalJSON() (*__premarshalModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError, error) {
	var retval __premarshalModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError

	retval.Code = v.GqlError.Code
	retval.Message = v.GqlError.Message
	return &retval, nil
}

// ModifySnowflakeDataSourceResponse is returned by ModifySnowflakeDataSource on success.
type ModifySnowflakeDataSourceResponse struct {
	// Modifies a Data Source with the provided unique name, description, and connection settings. If any of the optional arguments are omitted, those properties will be unchanged on the Data Source.
	ModifySnowflakeDataSource *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse `json:"-"`
}

// GetModifySnowflakeDataSource returns ModifySnowflakeDataSourceResponse.ModifySnowflakeDataSource, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceResponse) GetModifySnowflakeDataSource() *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse {
	return v.ModifySnowflakeDataSource
}

func (v *ModifySnowflakeDataSourceResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ModifySnowflakeDataSourceResponse
		ModifySnowflakeDataSource json.RawMessage `json:"modifySnowflakeDataSource"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ModifySnowflakeDataSourceResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.ModifySnowflakeDataSource
		src := firstPass.ModifySnowflakeDataSource
		if len(src) != 0 && string(src) != "null" {
			*dst = new(ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse)
			err = __unmarshalModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal ModifySnowflakeDataSourceResponse.ModifySnowflakeDataSource: %w", err)
			}
		}
	}
	return nil
}

type __premarshalModifySnowflakeDataSourceResponse struct {
	ModifySnowflakeDataSource json.RawMessage `json:"modifySnowflakeDataSource"`
}

func (v *ModifySnowflakeDataSourceResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ModifySnowflakeDataSourceResponse) __premarshalJSON() (*__premarshalModifySnowflakeDataSourceResponse, error) {
	var retval __premarshalModifySnowflakeDataSourceResponse

	{

		dst := &retval.ModifySnowflakeDataSource
		src := v.ModifySnowflakeDataSource
		if src != nil {
			var err error
			*dst, err = __marshalModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal ModifySnowflakeDataSourceResponse.ModifySnowflakeDataSource: %w", err)
			}
		}
	}
	return &retval, nil
}

type ModifyWebhookDataSourceInput struct {
	// The Webhook Data Source's new connection settings. If not provided this property will not be modified.
	ConnectionSettings *PartialWebhookConnectionSettingsInput `json:"connectionSettings,omitempty"`
	// The Webhook Data Source's new description. If not provided this property will not be modified.
	Description *string `json:"description"`
	// The ID or unique name of the Webhook Data Source to modify.
	IdOrUniqueName *IdOrUniqueName `json:"idOrUniqueName,omitempty"`
	// The Webhook Data Source's new unique name. If not provided this property will not be modified.
	UniqueName *string `json:"uniqueName"`
}

// GetConnectionSettings returns ModifyWebhookDataSourceInput.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *ModifyWebhookDataSourceInput) GetConnectionSettings() *PartialWebhookConnectionSettingsInput {
	return v.ConnectionSettings
}

// GetDescription returns ModifyWebhookDataSourceInput.Description, and is useful for accessing the field via an interface.
func (v *ModifyWebhookDataSourceInput) GetDescription() *string { return v.Description }

// GetIdOrUniqueName returns ModifyWebhookDataSourceInput.IdOrUniqueName, and is useful for accessing the field via an interface.
func (v *ModifyWebhookDataSourceInput) GetIdOrUniqueName() *IdOrUniqueName { return v.IdOrUniqueName }

// GetUniqueName returns ModifyWebhookDataSourceInput.UniqueName, and is useful for accessing the field via an interface.
func (v *ModifyWebhookDataSourceInput) GetUniqueName() *string { return v.UniqueName }

// ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponse includes the requested fields of the GraphQL type DataSourceResponse.
// The GraphQL type's documentation follows.
//
// The result of a mutation which creates or modifies a Data Source.
type ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponse struct {
	// The Data Source which was created or modified.
	DataSource *ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource `json:"dataSource"`
}

// GetDataSource returns ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponse.DataSource, and is useful for accessing the field via an interface.
func (v *ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponse) GetDataSource() *ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource {
	return v.DataSource
}

// ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource includes the requested fields of the GraphQL type DataSource.
// The GraphQL type's documentation follows.
//
// The Data Source object.
//
// A Data Source is a connection to your data warehouse. It has the necessary connection details for Propel to access Snowflake or any other supported Data Source.
//
// [Learn more about Data Sources](https://www.propeldata.com/docs/data-sources).
type ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource struct {
	DataSourceData `json:"-"`
}

// GetId returns ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource.Id, and is useful for accessing the field via an interface.
func (v *ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource) GetId() string {
	return v.DataSourceData.Id
}

// GetType returns ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource.Type, and is useful for accessing the field via an interface.
func (v *ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource) GetType() DataSourceType {
	return v.DataSourceData.Type
}

// GetStatus returns ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource.Status, and is useful for accessing the field via an interface.
func (v *ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource) GetStatus() DataSourceStatus {
	return v.DataSourceData.Status
}

// GetError returns ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource.Error, and is useful for accessing the field via an interface.
func (v *ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource) GetError() *DataSourceDataError {
	return v.DataSourceData.Error
}

// GetDataPools returns ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource.DataPools, and is useful for accessing the field via an interface.
func (v *ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource) GetDataPools() *DataSourceDataDataPoolsDataPoolConnection {
	return v.DataSourceData.DataPools
}

// GetConnectionSettings returns ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource) GetConnectionSettings() DataSourceDataConnectionSettings {
	return v.DataSourceData.ConnectionSettings
}

// GetTables returns ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource.Tables, and is useful for accessing the field via an interface.
func (v *ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource) GetTables() *DataSourceDataTablesTableConnection {
	return v.DataSourceData.Tables
}

// GetChecks returns ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource.Checks, and is useful for accessing the field via an interface.
func (v *ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource) GetChecks() []*DataSourceDataChecksDataSourceCheck {
	return v.DataSourceData.Checks
}

// GetTableIntrospections returns ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource.TableIntrospections, and is useful for accessing the field via an interface.
func (v *ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource) GetTableIntrospections() *DataSourceDataTableIntrospectionsTableIntrospectionConnection {
	return v.DataSourceData.TableIntrospections
}

// GetUniqueName returns ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource.UniqueName, and is useful for accessing the field via an interface.
func (v *ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource) GetUniqueName() string {
	return v.DataSourceData.CommonDataDataSource.UniqueName
}

// GetDescription returns ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource.Description, and is useful for accessing the field via an interface.
func (v *ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource) GetDescription() string {
	return v.DataSourceData.CommonDataDataSource.Description
}

// GetAccount returns ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource.Account, and is useful for accessing the field via an interface.
func (v *ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource) GetAccount() *CommonDataAccount {
	return v.DataSourceData.CommonDataDataSource.Account
}

// GetEnvironment returns ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource.Environment, and is useful for accessing the field via an interface.
func (v *ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource) GetEnvironment() *CommonDataEnvironment {
	return v.DataSourceData.CommonDataDataSource.Environment
}

// GetCreatedAt returns ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource) GetCreatedAt() time.Time {
	return v.DataSourceData.CommonDataDataSource.CreatedAt
}

// GetModifiedAt returns ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource) GetModifiedAt() time.Time {
	return v.DataSourceData.CommonDataDataSource.ModifiedAt
}

// GetCreatedBy returns ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource.CreatedBy, and is useful for accessing the field via an interface.
func (v *ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource) GetCreatedBy() string {
	return v.DataSourceData.CommonDataDataSource.CreatedBy
}

// GetModifiedBy returns ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource.ModifiedBy, and is useful for accessing the field via an interface.
func (v *ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource) GetModifiedBy() string {
	return v.DataSourceData.CommonDataDataSource.ModifiedBy
}

func (v *ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataSourceData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource struct {
	Id string `json:"id"`

	Type DataSourceType `json:"type"`

	Status DataSourceStatus `json:"status"`

	Error *DataSourceDataError `json:"error"`

	DataPools *DataSourceDataDataPoolsDataPoolConnection `json:"dataPools"`

	ConnectionSettings json.RawMessage `json:"connectionSettings"`

	Tables *DataSourceDataTablesTableConnection `json:"tables"`

	Checks []*DataSourceDataChecksDataSourceCheck `json:"checks"`

	TableIntrospections *DataSourceDataTableIntrospectionsTableIntrospectionConnection `json:"tableIntrospections"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account *CommonDataAccount `json:"account"`

	Environment *CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource) __premarshalJSON() (*__premarshalModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource, error) {
	var retval __premarshalModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource

	retval.Id = v.DataSourceData.Id
	retval.Type = v.DataSourceData.Type
	retval.Status = v.DataSourceData.Status
	retval.Error = v.DataSourceData.Error
	retval.DataPools = v.DataSourceData.DataPools
	{

		dst := &retval.ConnectionSettings
		src := v.DataSourceData.ConnectionSettings
		var err error
		*dst, err = __marshalDataSourceDataConnectionSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponseDataSource.DataSourceData.ConnectionSettings: %w", err)
		}
	}
	retval.Tables = v.DataSourceData.Tables
	retval.Checks = v.DataSourceData.Checks
	retval.TableIntrospections = v.DataSourceData.TableIntrospections
	retval.UniqueName = v.DataSourceData.CommonDataDataSource.UniqueName
	retval.Description = v.DataSourceData.CommonDataDataSource.Description
	retval.Account = v.DataSourceData.CommonDataDataSource.Account
	retval.Environment = v.DataSourceData.CommonDataDataSource.Environment
	retval.CreatedAt = v.DataSourceData.CommonDataDataSource.CreatedAt
	retval.ModifiedAt = v.DataSourceData.CommonDataDataSource.ModifiedAt
	retval.CreatedBy = v.DataSourceData.CommonDataDataSource.CreatedBy
	retval.ModifiedBy = v.DataSourceData.CommonDataDataSource.ModifiedBy
	return &retval, nil
}

// ModifyWebhookDataSourceResponse is returned by ModifyWebhookDataSource on success.
type ModifyWebhookDataSourceResponse struct {
	// Modifies the Data Source by the ID or unique name provided with the given unique name, description, and connection settings.
	//
	// If any of the optional arguments are omitted, those properties will be unchanged on the Data Source.
	ModifyWebhookDataSource *ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponse `json:"modifyWebhookDataSource"`
}

// GetModifyWebhookDataSource returns ModifyWebhookDataSourceResponse.ModifyWebhookDataSource, and is useful for accessing the field via an interface.
func (v *ModifyWebhookDataSourceResponse) GetModifyWebhookDataSource() *ModifyWebhookDataSourceModifyWebhookDataSourceDataSourceResponse {
	return v.ModifyWebhookDataSource
}

// PageInfoData includes the GraphQL fields of PageInfo requested by the fragment PageInfoData.
// The GraphQL type's documentation follows.
//
// The page info object used for pagination.
type PageInfoData struct {
	// Points to the first item returned in the results. Used when paginating backward.
	StartCursor *string `json:"startCursor"`
	// Points to the last item returned in the results. Used when paginating forward.
	EndCursor *string `json:"endCursor"`
	// A boolean that indicates whether a next page of results exists. Can be used to display a "next page" button in user interfaces, for example.
	HasNextPage bool `json:"hasNextPage"`
	// A boolean that indicates whether a previous page of results exists. Can be used to display a "previous page" button in user interfaces, for example.
	HasPreviousPage bool `json:"hasPreviousPage"`
}

// GetStartCursor returns PageInfoData.StartCursor, and is useful for accessing the field via an interface.
func (v *PageInfoData) GetStartCursor() *string { return v.StartCursor }

// GetEndCursor returns PageInfoData.EndCursor, and is useful for accessing the field via an interface.
func (v *PageInfoData) GetEndCursor() *string { return v.EndCursor }

// GetHasNextPage returns PageInfoData.HasNextPage, and is useful for accessing the field via an interface.
func (v *PageInfoData) GetHasNextPage() bool { return v.HasNextPage }

// GetHasPreviousPage returns PageInfoData.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *PageInfoData) GetHasPreviousPage() bool { return v.HasPreviousPage }

// The HTTP Data Source connection settings.
type PartialHttpConnectionSettingsInput struct {
	// The HTTP Basic authentication settings for uploading new data.
	//
	// If this parameter is not provided, anyone with the URL to your tables will be able to upload data. While it's OK to test without HTTP Basic authentication, we recommend enabling it. If not provided this property will not be modified.
	BasicAuth *HttpBasicAuthInput `json:"basicAuth,omitempty"`
	// Set this to `false` to disable HTTP Basic authentication. Any previously stored HTTP Basic authentication settings will be cleared out. If not provided this property will not be modified.
	BasicAuthEnabled *bool `json:"basicAuthEnabled"`
	// The HTTP Data Source's tables. If not provided this property will not be modified.
	Tables []*HttpDataSourceTableInput `json:"tables,omitempty"`
}

// GetBasicAuth returns PartialHttpConnectionSettingsInput.BasicAuth, and is useful for accessing the field via an interface.
func (v *PartialHttpConnectionSettingsInput) GetBasicAuth() *HttpBasicAuthInput { return v.BasicAuth }

// GetBasicAuthEnabled returns PartialHttpConnectionSettingsInput.BasicAuthEnabled, and is useful for accessing the field via an interface.
func (v *PartialHttpConnectionSettingsInput) GetBasicAuthEnabled() *bool { return v.BasicAuthEnabled }

// GetTables returns PartialHttpConnectionSettingsInput.Tables, and is useful for accessing the field via an interface.
func (v *PartialHttpConnectionSettingsInput) GetTables() []*HttpDataSourceTableInput { return v.Tables }

// The connection settings for an S3 Data Source. These include the S3 bucket name, the AWS access key ID, and the tables (along with their paths). We do not allow fetching the AWS secret access key after it has been set.
type PartialS3ConnectionSettingsInput struct {
	// The AWS access key ID for an IAM user with sufficient access to the S3 bucket. If not provided this property will not be modified.
	AwsAccessKeyId *string `json:"awsAccessKeyId"`
	// The AWS secret access key for an IAM user with sufficient access to the S3 bucket. If not provided this property will not be modified.
	AwsSecretAccessKey *string `json:"awsSecretAccessKey"`
	// The name of the S3 bucket. If not provided this property will not be modified.
	Bucket *string `json:"bucket"`
	// The S3 Data Source's tables. If not provided this property will not be modified.
	Tables []*S3DataSourceTableInput `json:"tables,omitempty"`
}

// GetAwsAccessKeyId returns PartialS3ConnectionSettingsInput.AwsAccessKeyId, and is useful for accessing the field via an interface.
func (v *PartialS3ConnectionSettingsInput) GetAwsAccessKeyId() *string { return v.AwsAccessKeyId }

// GetAwsSecretAccessKey returns PartialS3ConnectionSettingsInput.AwsSecretAccessKey, and is useful for accessing the field via an interface.
func (v *PartialS3ConnectionSettingsInput) GetAwsSecretAccessKey() *string {
	return v.AwsSecretAccessKey
}

// GetBucket returns PartialS3ConnectionSettingsInput.Bucket, and is useful for accessing the field via an interface.
func (v *PartialS3ConnectionSettingsInput) GetBucket() *string { return v.Bucket }

// GetTables returns PartialS3ConnectionSettingsInput.Tables, and is useful for accessing the field via an interface.
func (v *PartialS3ConnectionSettingsInput) GetTables() []*S3DataSourceTableInput { return v.Tables }

// The fields for modifying a Snowflake Data Source's connection settings.
type PartialSnowflakeConnectionSettingsInput struct {
	// The Snowflake account. Only include the part before the "snowflakecomputing.com" part of your Snowflake URL (make sure you are in classic console, not Snowsight). For AWS-based accounts, this looks like "znXXXXX.us-east-2.aws". For Google Cloud-based accounts, this looks like "ffXXXXX.us-central1.gcp". If not provided this property will not be modified.
	Account *string `json:"account"`
	// The Snowflake database name. If not provided this property will not be modified.
	Database *string `json:"database"`
	// The Snowflake warehouse name. It should be "PROPELLING" if you used the default name in the setup script. If not provided this property will not be modified.
	Warehouse *string `json:"warehouse"`
	// The Snowflake schema. If not provided this property will not be modified.
	Schema *string `json:"schema"`
	// The Snowflake username. It should be "PROPEL" if you used the default name in the setup script. If not provided this property will not be modified.
	Username *string `json:"username"`
	// The Snowflake password. If not provided this property will not be modified.
	Password *string `json:"password"`
	// The Snowflake role. It should be "PROPELLER" if you used the default name in the setup script. If not provided this property will not be modified.
	Role *string `json:"role"`
}

// GetAccount returns PartialSnowflakeConnectionSettingsInput.Account, and is useful for accessing the field via an interface.
func (v *PartialSnowflakeConnectionSettingsInput) GetAccount() *string { return v.Account }

// GetDatabase returns PartialSnowflakeConnectionSettingsInput.Database, and is useful for accessing the field via an interface.
func (v *PartialSnowflakeConnectionSettingsInput) GetDatabase() *string { return v.Database }

// GetWarehouse returns PartialSnowflakeConnectionSettingsInput.Warehouse, and is useful for accessing the field via an interface.
func (v *PartialSnowflakeConnectionSettingsInput) GetWarehouse() *string { return v.Warehouse }

// GetSchema returns PartialSnowflakeConnectionSettingsInput.Schema, and is useful for accessing the field via an interface.
func (v *PartialSnowflakeConnectionSettingsInput) GetSchema() *string { return v.Schema }

// GetUsername returns PartialSnowflakeConnectionSettingsInput.Username, and is useful for accessing the field via an interface.
func (v *PartialSnowflakeConnectionSettingsInput) GetUsername() *string { return v.Username }

// GetPassword returns PartialSnowflakeConnectionSettingsInput.Password, and is useful for accessing the field via an interface.
func (v *PartialSnowflakeConnectionSettingsInput) GetPassword() *string { return v.Password }

// GetRole returns PartialSnowflakeConnectionSettingsInput.Role, and is useful for accessing the field via an interface.
func (v *PartialSnowflakeConnectionSettingsInput) GetRole() *string { return v.Role }

// The Webhook Data Source connection settings.
type PartialWebhookConnectionSettingsInput struct {
	// The HTTP basic authentication settings for the Webhook Data Source URL. If this parameter is not provided, anyone with the webhook URL will be able to send events. While it's OK to test without HTTP Basic authentication, we recommend enabling it. If not provided this property will not be modified.
	BasicAuth *HttpBasicAuthInput `json:"basicAuth,omitempty"`
	// Set this to `false` to disable HTTP Basic authentication. Any previously stored HTTP Basic authentication settings will be cleared out. If not provided this property will not be modified.
	BasicAuthEnabled *bool `json:"basicAuthEnabled"`
}

// GetBasicAuth returns PartialWebhookConnectionSettingsInput.BasicAuth, and is useful for accessing the field via an interface.
func (v *PartialWebhookConnectionSettingsInput) GetBasicAuth() *HttpBasicAuthInput {
	return v.BasicAuth
}

// GetBasicAuthEnabled returns PartialWebhookConnectionSettingsInput.BasicAuthEnabled, and is useful for accessing the field via an interface.
func (v *PartialWebhookConnectionSettingsInput) GetBasicAuthEnabled() *bool {
	return v.BasicAuthEnabled
}

// PolicyData includes the GraphQL fields of Policy requested by the fragment PolicyData.
// The GraphQL type's documentation follows.
//
// The Policy type. It governs an Application's access to a Metric's data.
type PolicyData struct {
	// The Policy's unique identifier.
	Id string `json:"id"`
	// The type of Policy.
	Type PolicyType `json:"type"`
	// The Metric that the Application is granted access to.
	Metric *PolicyDataMetric `json:"metric"`
	// The Application that is granted access.
	Application *PolicyDataApplication `json:"application"`
}

// GetId returns PolicyData.Id, and is useful for accessing the field via an interface.
func (v *PolicyData) GetId() string { return v.Id }

// GetType returns PolicyData.Type, and is useful for accessing the field via an interface.
func (v *PolicyData) GetType() PolicyType { return v.Type }

// GetMetric returns PolicyData.Metric, and is useful for accessing the field via an interface.
func (v *PolicyData) GetMetric() *PolicyDataMetric { return v.Metric }

// GetApplication returns PolicyData.Application, and is useful for accessing the field via an interface.
func (v *PolicyData) GetApplication() *PolicyDataApplication { return v.Application }

// PolicyDataApplication includes the requested fields of the GraphQL type Application.
// The GraphQL type's documentation follows.
//
// The Application object.
//
// Propel Applications represent the web or mobile app you are building. They provide the API credentials that allow your client- or server-side app to access the Propel API. The Application's Propeller determines the speed and cost of your Metric Queries.
//
// [Learn more about Applications](https://www.propeldata.com/docs/applications).
type PolicyDataApplication struct {
	// The Application's unique identifier.
	Id string `json:"id"`
}

// GetId returns PolicyDataApplication.Id, and is useful for accessing the field via an interface.
func (v *PolicyDataApplication) GetId() string { return v.Id }

// PolicyDataMetric includes the requested fields of the GraphQL type Metric.
// The GraphQL type's documentation follows.
//
// The Metric object.
//
// A Metric is a business indicator measured over time.
//
// [Learn more about Metrics](/docs/key-concepts#metric).
type PolicyDataMetric struct {
	// The Metric's unique identifier.
	Id string `json:"id"`
}

// GetId returns PolicyDataMetric.Id, and is useful for accessing the field via an interface.
func (v *PolicyDataMetric) GetId() string { return v.Id }

// PolicyPolicy includes the requested fields of the GraphQL type Policy.
// The GraphQL type's documentation follows.
//
// The Policy type. It governs an Application's access to a Metric's data.
type PolicyPolicy struct {
	PolicyData `json:"-"`
}

// GetId returns PolicyPolicy.Id, and is useful for accessing the field via an interface.
func (v *PolicyPolicy) GetId() string { return v.PolicyData.Id }

// GetType returns PolicyPolicy.Type, and is useful for accessing the field via an interface.
func (v *PolicyPolicy) GetType() PolicyType { return v.PolicyData.Type }

// GetMetric returns PolicyPolicy.Metric, and is useful for accessing the field via an interface.
func (v *PolicyPolicy) GetMetric() *PolicyDataMetric { return v.PolicyData.Metric }

// GetApplication returns PolicyPolicy.Application, and is useful for accessing the field via an interface.
func (v *PolicyPolicy) GetApplication() *PolicyDataApplication { return v.PolicyData.Application }

func (v *PolicyPolicy) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PolicyPolicy
		graphql.NoUnmarshalJSON
	}
	firstPass.PolicyPolicy = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PolicyData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPolicyPolicy struct {
	Id string `json:"id"`

	Type PolicyType `json:"type"`

	Metric *PolicyDataMetric `json:"metric"`

	Application *PolicyDataApplication `json:"application"`
}

func (v *PolicyPolicy) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PolicyPolicy) __premarshalJSON() (*__premarshalPolicyPolicy, error) {
	var retval __premarshalPolicyPolicy

	retval.Id = v.PolicyData.Id
	retval.Type = v.PolicyData.Type
	retval.Metric = v.PolicyData.Metric
	retval.Application = v.PolicyData.Application
	return &retval, nil
}

// PolicyResponse is returned by Policy on success.
type PolicyResponse struct {
	// Returns a Policy by ID.
	Policy *PolicyPolicy `json:"policy"`
}

// GetPolicy returns PolicyResponse.Policy, and is useful for accessing the field via an interface.
func (v *PolicyResponse) GetPolicy() *PolicyPolicy { return v.Policy }

// The types of Policies that can be applied to a Metric.
type PolicyType string

const (
	// Grants access to all Metric data.
	PolicyTypeAllAccess PolicyType = "ALL_ACCESS"
	// Grants access to a specified tenant's Metric data.
	PolicyTypeTenantAccess PolicyType = "TENANT_ACCESS"
)

// Parameters for the ReplacingMergeTree table engine.
type ReplacingMergeTreeTableEngineInput struct {
	// The type is always `REPLACING_MERGE_TREE`.
	Type *TableEngineType `json:"type"`
	// The `ver` parameter to the ReplacingMergeTree engine.
	Ver *string `json:"ver"`
}

// GetType returns ReplacingMergeTreeTableEngineInput.Type, and is useful for accessing the field via an interface.
func (v *ReplacingMergeTreeTableEngineInput) GetType() *TableEngineType { return v.Type }

// GetVer returns ReplacingMergeTreeTableEngineInput.Ver, and is useful for accessing the field via an interface.
func (v *ReplacingMergeTreeTableEngineInput) GetVer() *string { return v.Ver }

// The connection settings for an S3 Data Source. These include the S3 bucket name, the AWS access key ID, and the tables (along with their paths). We do not allow fetching the AWS secret access key after it has been set.
type S3ConnectionSettingsInput struct {
	// The AWS access key ID for an IAM user with sufficient access to the S3 bucket.
	AwsAccessKeyId string `json:"awsAccessKeyId"`
	// The AWS secret access key for an IAM user with sufficient access to the S3 bucket.
	AwsSecretAccessKey string `json:"awsSecretAccessKey"`
	// The name of the S3 bucket.
	Bucket string `json:"bucket"`
	// The S3 Data Source's tables.
	Tables []*S3DataSourceTableInput `json:"tables,omitempty"`
}

// GetAwsAccessKeyId returns S3ConnectionSettingsInput.AwsAccessKeyId, and is useful for accessing the field via an interface.
func (v *S3ConnectionSettingsInput) GetAwsAccessKeyId() string { return v.AwsAccessKeyId }

// GetAwsSecretAccessKey returns S3ConnectionSettingsInput.AwsSecretAccessKey, and is useful for accessing the field via an interface.
func (v *S3ConnectionSettingsInput) GetAwsSecretAccessKey() string { return v.AwsSecretAccessKey }

// GetBucket returns S3ConnectionSettingsInput.Bucket, and is useful for accessing the field via an interface.
func (v *S3ConnectionSettingsInput) GetBucket() string { return v.Bucket }

// GetTables returns S3ConnectionSettingsInput.Tables, and is useful for accessing the field via an interface.
func (v *S3ConnectionSettingsInput) GetTables() []*S3DataSourceTableInput { return v.Tables }

// The fields for specifying a column in an S3 Data Source's table.
type S3DataSourceColumnInput struct {
	// The column name. It has to be unique within a Table.
	Name string `json:"name"`
	// The column type.
	Type ColumnType `json:"type"`
	// Whether the column's type is nullable or not.
	Nullable bool `json:"nullable"`
}

// GetName returns S3DataSourceColumnInput.Name, and is useful for accessing the field via an interface.
func (v *S3DataSourceColumnInput) GetName() string { return v.Name }

// GetType returns S3DataSourceColumnInput.Type, and is useful for accessing the field via an interface.
func (v *S3DataSourceColumnInput) GetType() ColumnType { return v.Type }

// GetNullable returns S3DataSourceColumnInput.Nullable, and is useful for accessing the field via an interface.
func (v *S3DataSourceColumnInput) GetNullable() bool { return v.Nullable }

// The fields for specifying an S3 Data Source's table.
type S3DataSourceTableInput struct {
	// The name of the table
	Name string `json:"name"`
	// The path to the table's files in S3.
	Path *string `json:"path"`
	// All the columns present in the table
	Columns []*S3DataSourceColumnInput `json:"columns,omitempty"`
}

// GetName returns S3DataSourceTableInput.Name, and is useful for accessing the field via an interface.
func (v *S3DataSourceTableInput) GetName() string { return v.Name }

// GetPath returns S3DataSourceTableInput.Path, and is useful for accessing the field via an interface.
func (v *S3DataSourceTableInput) GetPath() *string { return v.Path }

// GetColumns returns S3DataSourceTableInput.Columns, and is useful for accessing the field via an interface.
func (v *S3DataSourceTableInput) GetColumns() []*S3DataSourceColumnInput { return v.Columns }

// The fields for creating a Snowflake Data Source's connection settings.
type SnowflakeConnectionSettingsInput struct {
	// The Snowflake account. Only include the part before the "snowflakecomputing.com" part of your Snowflake URL (make sure you are in classic console, not Snowsight). For AWS-based accounts, this looks like "znXXXXX.us-east-2.aws". For Google Cloud-based accounts, this looks like "ffXXXXX.us-central1.gcp".
	Account string `json:"account"`
	// The Snowflake database name.
	Database string `json:"database"`
	// The Snowflake warehouse name. It should be "PROPELLING" if you used the default name in the setup script.
	Warehouse string `json:"warehouse"`
	// The Snowflake schema.
	Schema string `json:"schema"`
	// The Snowflake username. It should be "PROPEL" if you used the default name in the setup script.
	Username string `json:"username"`
	// The Snowflake password.
	Password string `json:"password"`
	// The Snowflake role. It should be "PROPELLER" if you used the default name in the setup script.
	Role string `json:"role"`
}

// GetAccount returns SnowflakeConnectionSettingsInput.Account, and is useful for accessing the field via an interface.
func (v *SnowflakeConnectionSettingsInput) GetAccount() string { return v.Account }

// GetDatabase returns SnowflakeConnectionSettingsInput.Database, and is useful for accessing the field via an interface.
func (v *SnowflakeConnectionSettingsInput) GetDatabase() string { return v.Database }

// GetWarehouse returns SnowflakeConnectionSettingsInput.Warehouse, and is useful for accessing the field via an interface.
func (v *SnowflakeConnectionSettingsInput) GetWarehouse() string { return v.Warehouse }

// GetSchema returns SnowflakeConnectionSettingsInput.Schema, and is useful for accessing the field via an interface.
func (v *SnowflakeConnectionSettingsInput) GetSchema() string { return v.Schema }

// GetUsername returns SnowflakeConnectionSettingsInput.Username, and is useful for accessing the field via an interface.
func (v *SnowflakeConnectionSettingsInput) GetUsername() string { return v.Username }

// GetPassword returns SnowflakeConnectionSettingsInput.Password, and is useful for accessing the field via an interface.
func (v *SnowflakeConnectionSettingsInput) GetPassword() string { return v.Password }

// GetRole returns SnowflakeConnectionSettingsInput.Role, and is useful for accessing the field via an interface.
func (v *SnowflakeConnectionSettingsInput) GetRole() string { return v.Role }

// Parameters for the SummingMergeTree table engine.
type SummingMergeTreeTableEngineInput struct {
	// The type is always `SUMMING_MERGE_TREE`.
	Type *TableEngineType `json:"type"`
	// The columns argument for the SummingMergeTree table engine
	Columns []string `json:"columns"`
}

// GetType returns SummingMergeTreeTableEngineInput.Type, and is useful for accessing the field via an interface.
func (v *SummingMergeTreeTableEngineInput) GetType() *TableEngineType { return v.Type }

// GetColumns returns SummingMergeTreeTableEngineInput.Columns, and is useful for accessing the field via an interface.
func (v *SummingMergeTreeTableEngineInput) GetColumns() []string { return v.Columns }

// SyncData includes the GraphQL fields of Sync requested by the fragment SyncData.
// The GraphQL type's documentation follows.
//
// The Sync object.
//
// This represents the process of syncing data from your Data Source (for example, a Snowflake data warehouse) to your Data Pool.
type SyncData struct {
	// The Sync's unique identifier.
	Id string `json:"id"`
	// The status of the Sync (all Syncs begin as SYNCING before transitioning to SUCCEEDED or FAILED).
	Status SyncStatus `json:"status"`
	// The number of new records contained within the Sync, if known. This excludes filtered records.
	NewRecords *string `json:"newRecords"`
	// The number of updated records contained within the Sync, if known. This excludes filtered records.
	UpdatedRecords *string `json:"updatedRecords"`
	// The number of deleted records contained within the Sync, if known. This excludes filtered records.
	DeletedRecords *string `json:"deletedRecords"`
	// The number of filtered records contained within the Sync, due to issues such as a missing timestamp Dimension, if any are known to be invalid.
	InvalidRecords *string `json:"invalidRecords"`
	// The time at which the Sync started.
	StartedAt *time.Time `json:"startedAt"`
	// The time at which the Sync succeeded.
	SucceededAt *time.Time `json:"succeededAt"`
	// The time at which the Sync failed.
	FailedAt *time.Time `json:"failedAt"`
	// If the Sync failed, this represents the reason the Sync failed.
	Error *SyncDataError `json:"error"`
	// The Sync's creation date and time in UTC.
	CreatedAt time.Time `json:"createdAt"`
	// The Sync's creator. It can be either a User ID, an Application ID, or "system" if it was created by Propel.
	CreatedBy string `json:"createdBy"`
	// The Sync's last modification date and time in UTC.
	ModifiedAt time.Time `json:"modifiedAt"`
	// The Sync's last modifier. It can be either a User ID, an Application ID, or "system" if it was modified by Propel.
	ModifiedBy string `json:"modifiedBy"`
}

// GetId returns SyncData.Id, and is useful for accessing the field via an interface.
func (v *SyncData) GetId() string { return v.Id }

// GetStatus returns SyncData.Status, and is useful for accessing the field via an interface.
func (v *SyncData) GetStatus() SyncStatus { return v.Status }

// GetNewRecords returns SyncData.NewRecords, and is useful for accessing the field via an interface.
func (v *SyncData) GetNewRecords() *string { return v.NewRecords }

// GetUpdatedRecords returns SyncData.UpdatedRecords, and is useful for accessing the field via an interface.
func (v *SyncData) GetUpdatedRecords() *string { return v.UpdatedRecords }

// GetDeletedRecords returns SyncData.DeletedRecords, and is useful for accessing the field via an interface.
func (v *SyncData) GetDeletedRecords() *string { return v.DeletedRecords }

// GetInvalidRecords returns SyncData.InvalidRecords, and is useful for accessing the field via an interface.
func (v *SyncData) GetInvalidRecords() *string { return v.InvalidRecords }

// GetStartedAt returns SyncData.StartedAt, and is useful for accessing the field via an interface.
func (v *SyncData) GetStartedAt() *time.Time { return v.StartedAt }

// GetSucceededAt returns SyncData.SucceededAt, and is useful for accessing the field via an interface.
func (v *SyncData) GetSucceededAt() *time.Time { return v.SucceededAt }

// GetFailedAt returns SyncData.FailedAt, and is useful for accessing the field via an interface.
func (v *SyncData) GetFailedAt() *time.Time { return v.FailedAt }

// GetError returns SyncData.Error, and is useful for accessing the field via an interface.
func (v *SyncData) GetError() *SyncDataError { return v.Error }

// GetCreatedAt returns SyncData.CreatedAt, and is useful for accessing the field via an interface.
func (v *SyncData) GetCreatedAt() time.Time { return v.CreatedAt }

// GetCreatedBy returns SyncData.CreatedBy, and is useful for accessing the field via an interface.
func (v *SyncData) GetCreatedBy() string { return v.CreatedBy }

// GetModifiedAt returns SyncData.ModifiedAt, and is useful for accessing the field via an interface.
func (v *SyncData) GetModifiedAt() time.Time { return v.ModifiedAt }

// GetModifiedBy returns SyncData.ModifiedBy, and is useful for accessing the field via an interface.
func (v *SyncData) GetModifiedBy() string { return v.ModifiedBy }

// SyncDataError includes the requested fields of the GraphQL type Error.
// The GraphQL type's documentation follows.
//
// The error object.
type SyncDataError struct {
	// The error message.
	Message string `json:"message"`
}

// GetMessage returns SyncDataError.Message, and is useful for accessing the field via an interface.
func (v *SyncDataError) GetMessage() string { return v.Message }

// The status of a Sync.
type SyncStatus string

const (
	// Propel is actively syncing records contained within the Sync.
	SyncStatusSyncing SyncStatus = "SYNCING"
	// The Sync succeeded. Propel successfully synced all records contained within the Sync.
	SyncStatusSucceeded SyncStatus = "SUCCEEDED"
	// The Sync failed. Propel failed to sync some or all records contained within the Sync.
	SyncStatusFailed SyncStatus = "FAILED"
	// Propel is deleting the Sync.
	SyncStatusDeleting SyncStatus = "DELETING"
)

// A Data Pool's table engine.
type TableEngineInput struct {
	// Field for specifying the MergeTree table engine.
	MergeTree *MergeTreeTableEngineInput `json:"mergeTree,omitempty"`
	// Field for specifying the ReplacingMergeTree table engine.
	ReplacingMergeTree *ReplacingMergeTreeTableEngineInput `json:"replacingMergeTree,omitempty"`
	// Field for specifying the SummingMergeTree table engine.
	SummingMergeTree *SummingMergeTreeTableEngineInput `json:"summingMergeTree,omitempty"`
	// Field for specifying the AggregatingMergeTree table engine.
	AggregatingMergeTree *AggregatingMergeTreeTableEngineInput `json:"aggregatingMergeTree,omitempty"`
}

// GetMergeTree returns TableEngineInput.MergeTree, and is useful for accessing the field via an interface.
func (v *TableEngineInput) GetMergeTree() *MergeTreeTableEngineInput { return v.MergeTree }

// GetReplacingMergeTree returns TableEngineInput.ReplacingMergeTree, and is useful for accessing the field via an interface.
func (v *TableEngineInput) GetReplacingMergeTree() *ReplacingMergeTreeTableEngineInput {
	return v.ReplacingMergeTree
}

// GetSummingMergeTree returns TableEngineInput.SummingMergeTree, and is useful for accessing the field via an interface.
func (v *TableEngineInput) GetSummingMergeTree() *SummingMergeTreeTableEngineInput {
	return v.SummingMergeTree
}

// GetAggregatingMergeTree returns TableEngineInput.AggregatingMergeTree, and is useful for accessing the field via an interface.
func (v *TableEngineInput) GetAggregatingMergeTree() *AggregatingMergeTreeTableEngineInput {
	return v.AggregatingMergeTree
}

// ClickHouse table engine types.
type TableEngineType string

const (
	// The MergeTree table engine.
	TableEngineTypeMergeTree TableEngineType = "MERGE_TREE"
	// The ReplacingMergeTree table engine.
	TableEngineTypeReplacingMergeTree TableEngineType = "REPLACING_MERGE_TREE"
	// The SummingMergeTree table engine.
	TableEngineTypeSummingMergeTree TableEngineType = "SUMMING_MERGE_TREE"
	// The AggregatingMergeTree table engine.
	TableEngineTypeAggregatingMergeTree TableEngineType = "AGGREGATING_MERGE_TREE"
)

// TableIntrospectionData includes the GraphQL fields of TableIntrospection requested by the fragment TableIntrospectionData.
// The GraphQL type's documentation follows.
//
// The table introspection object.
//
// When setting up a Data Source, Propel may need to introspect tables in order to determine what tables and columns are available to create Data Pools from. The table introspection represents the lifecycle of this operation (whether it's in-progress, succeeded, or failed) and the resulting tables and columns. These will be captured as table and column objects, respectively.
type TableIntrospectionData struct {
	// The Data Source the table introspection was performed for.
	DataSource *TableIntrospectionDataDataSource `json:"dataSource"`
	// The status of the table introspection.
	Status TableIntrospectionStatus `json:"status"`
	// The table introspection's creation date and time in UTC.
	CreatedAt time.Time `json:"createdAt"`
	// The table introspection's creator. It can be either a User ID, an Application ID, or "system" if it was created by Propel.
	CreatedBy string `json:"createdBy"`
	// The table introspection's last modification date and time in UTC.
	ModifiedAt time.Time `json:"modifiedAt"`
	// The table introspection's last modifier. It can be either a User ID, an Application ID, or "system" if it was modified by Propel.
	ModifiedBy string `json:"modifiedBy"`
	// The number of tables introspected.
	NumTables *int `json:"numTables"`
}

// GetDataSource returns TableIntrospectionData.DataSource, and is useful for accessing the field via an interface.
func (v *TableIntrospectionData) GetDataSource() *TableIntrospectionDataDataSource {
	return v.DataSource
}

// GetStatus returns TableIntrospectionData.Status, and is useful for accessing the field via an interface.
func (v *TableIntrospectionData) GetStatus() TableIntrospectionStatus { return v.Status }

// GetCreatedAt returns TableIntrospectionData.CreatedAt, and is useful for accessing the field via an interface.
func (v *TableIntrospectionData) GetCreatedAt() time.Time { return v.CreatedAt }

// GetCreatedBy returns TableIntrospectionData.CreatedBy, and is useful for accessing the field via an interface.
func (v *TableIntrospectionData) GetCreatedBy() string { return v.CreatedBy }

// GetModifiedAt returns TableIntrospectionData.ModifiedAt, and is useful for accessing the field via an interface.
func (v *TableIntrospectionData) GetModifiedAt() time.Time { return v.ModifiedAt }

// GetModifiedBy returns TableIntrospectionData.ModifiedBy, and is useful for accessing the field via an interface.
func (v *TableIntrospectionData) GetModifiedBy() string { return v.ModifiedBy }

// GetNumTables returns TableIntrospectionData.NumTables, and is useful for accessing the field via an interface.
func (v *TableIntrospectionData) GetNumTables() *int { return v.NumTables }

// TableIntrospectionDataDataSource includes the requested fields of the GraphQL type DataSource.
// The GraphQL type's documentation follows.
//
// The Data Source object.
//
// A Data Source is a connection to your data warehouse. It has the necessary connection details for Propel to access Snowflake or any other supported Data Source.
//
// [Learn more about Data Sources](https://www.propeldata.com/docs/data-sources).
type TableIntrospectionDataDataSource struct {
	// The Data Source's unique identifier.
	Id string `json:"id"`
}

// GetId returns TableIntrospectionDataDataSource.Id, and is useful for accessing the field via an interface.
func (v *TableIntrospectionDataDataSource) GetId() string { return v.Id }

// The status of a table introspection.
type TableIntrospectionStatus string

const (
	// The table introspection has not started.
	TableIntrospectionStatusNotStarted TableIntrospectionStatus = "NOT_STARTED"
	// The table introspection has started.
	TableIntrospectionStatusStarted TableIntrospectionStatus = "STARTED"
	// The table introspection succeeded.
	TableIntrospectionStatusSucceeded TableIntrospectionStatus = "SUCCEEDED"
	// The table introspection failed.
	TableIntrospectionStatusFailed TableIntrospectionStatus = "FAILED"
)

// A Data Pool's table settings.
//
// These describe how the Data Pool's table is created in ClickHouse.
type TableSettingsInput struct {
	// The ClickHouse table engine for the Data Pool's table.
	//
	// This field is optional. A default will be chosen based on the Data Pool's `timestamp` and `uniqueId` values, if specified.
	Engine *TableEngineInput `json:"engine,omitempty"`
	// The PARTITION BY clause for the Data Pool's table.
	//
	// This field is optional. A default will be chosen based on the Data Pool's `timestamp` and `uniqueId` values, if specified.
	PartitionBy []string `json:"partitionBy"`
	// The PRIMARY KEY clause for the Data Pool's table.
	//
	// This field is optional. A default will be chosen based on the Data Pool's `timestamp` and `uniqueId` values, if specified.
	PrimaryKey []string `json:"primaryKey"`
	// The ORDER BY clause for the Data Pool's table.
	//
	// This field is optional. A default will be chosen based on the Data Pool's `timestamp` and `uniqueId` values, if specified.
	OrderBy []string `json:"orderBy"`
}

// GetEngine returns TableSettingsInput.Engine, and is useful for accessing the field via an interface.
func (v *TableSettingsInput) GetEngine() *TableEngineInput { return v.Engine }

// GetPartitionBy returns TableSettingsInput.PartitionBy, and is useful for accessing the field via an interface.
func (v *TableSettingsInput) GetPartitionBy() []string { return v.PartitionBy }

// GetPrimaryKey returns TableSettingsInput.PrimaryKey, and is useful for accessing the field via an interface.
func (v *TableSettingsInput) GetPrimaryKey() []string { return v.PrimaryKey }

// GetOrderBy returns TableSettingsInput.OrderBy, and is useful for accessing the field via an interface.
func (v *TableSettingsInput) GetOrderBy() []string { return v.OrderBy }

// TenantData includes the GraphQL fields of Tenant requested by the fragment TenantData.
// The GraphQL type's documentation follows.
//
// A Data Pool's tenant ID column. The tenant ID column is used to control access to your data with access policies.
type TenantData struct {
	// The name of the column that represents the tenant ID.
	ColumnName string `json:"columnName"`
	// The tenant ID column's type.
	Type string `json:"type"`
}

// GetColumnName returns TenantData.ColumnName, and is useful for accessing the field via an interface.
func (v *TenantData) GetColumnName() string { return v.ColumnName }

// GetType returns TenantData.Type, and is useful for accessing the field via an interface.
func (v *TenantData) GetType() string { return v.Type }

// The fields to specify the Data Pool's tenant ID column. The tenant ID column is used to control access to your data with access policies.
type TenantInput struct {
	// The name of the column that represents the tenant ID.
	ColumnName string `json:"columnName"`
}

// GetColumnName returns TenantInput.ColumnName, and is useful for accessing the field via an interface.
func (v *TenantInput) GetColumnName() string { return v.ColumnName }

// TimestampData includes the GraphQL fields of Timestamp requested by the fragment TimestampData.
// The GraphQL type's documentation follows.
//
// A Data Pool's primary timestamp column. Propel uses the primary timestamp to order and partition your data in Data Pools. It will serve as the time dimension for your Metrics.
type TimestampData struct {
	// The name of the column that represents the primary timestamp.
	ColumnName string `json:"columnName"`
	// The primary timestamp column's type.
	Type string `json:"type"`
}

// GetColumnName returns TimestampData.ColumnName, and is useful for accessing the field via an interface.
func (v *TimestampData) GetColumnName() string { return v.ColumnName }

// GetType returns TimestampData.Type, and is useful for accessing the field via an interface.
func (v *TimestampData) GetType() string { return v.Type }

// The fields to specify the Data Pool's primary timestamp column. Propel uses the primary timestamp to order and partition your data in Data Pools. It will serve as the time dimension for your Metrics.
type TimestampInput struct {
	// The name of the column that represents the primary timestamp.
	ColumnName string `json:"columnName"`
}

// GetColumnName returns TimestampInput.ColumnName, and is useful for accessing the field via an interface.
func (v *TimestampInput) GetColumnName() string { return v.ColumnName }

// UnAssignDataPoolAccessPolicyResponse is returned by UnAssignDataPoolAccessPolicy on success.
type UnAssignDataPoolAccessPolicyResponse struct {
	// Unassign a Data Pool Access Policy from an Application.
	//
	// Once unassigned, whether the Application will be able to query the Data Pool is
	// controlled by the Data Pool's `accessControlEnabled` property. If
	// `accessControlEnabled` is true, the Application will no longer be able to query the
	// Data Pool. If `accessControlEnabled` is false, the Application will be able to query
	// *all* data in the Data Pool, unrestricted.
	UnAssignDataPoolAccessPolicyFromApplication *string `json:"unAssignDataPoolAccessPolicyFromApplication"`
}

// GetUnAssignDataPoolAccessPolicyFromApplication returns UnAssignDataPoolAccessPolicyResponse.UnAssignDataPoolAccessPolicyFromApplication, and is useful for accessing the field via an interface.
func (v *UnAssignDataPoolAccessPolicyResponse) GetUnAssignDataPoolAccessPolicyFromApplication() *string {
	return v.UnAssignDataPoolAccessPolicyFromApplication
}

// The fields to specify the Data Pool's unique ID column. Propel uses the primary timestamp and a unique ID to compose a primary key for determining whether records should be inserted, deleted, or updated within the Data Pool.
type UniqueIdInput struct {
	// The name of the column that represents the unique ID.
	ColumnName string `json:"columnName"`
}

// GetColumnName returns UniqueIdInput.ColumnName, and is useful for accessing the field via an interface.
func (v *UniqueIdInput) GetColumnName() string { return v.ColumnName }

// The Webhook Data Source connection settings.
type WebhookConnectionSettingsInput struct {
	// The HTTP basic authentication settings for the Webhook Data Source URL. If this parameter is not provided, anyone with the webhook URL will be able to send events. While it's OK to test without HTTP Basic authentication, we recommend enabling it.
	BasicAuth *HttpBasicAuthInput `json:"basicAuth,omitempty"`
	// The additional columns for the Webhook Data Source table.
	Columns []*WebhookDataSourceColumnInput `json:"columns,omitempty"`
	// Override the Data Pool's table settings. These describe how the Data Pool's table is created in ClickHouse, and a
	// default will be chosen based on the Data Pool's `timestamp` and `uniqueId` values, if any. You can override these
	// defaults in order to specify a custom table engine, custom ORDER BY, etc.
	TableSettings *TableSettingsInput `json:"tableSettings,omitempty"`
	// The tenant ID column, if any.
	Tenant *string `json:"tenant"`
	// The primary timestamp column, if any.
	Timestamp *string `json:"timestamp"`
	// The unique ID column, if any. Propel uses the primary timestamp and a unique ID to compose a primary key for determining whether records should be inserted, deleted, or updated.
	UniqueId *string `json:"uniqueId"`
}

// GetBasicAuth returns WebhookConnectionSettingsInput.BasicAuth, and is useful for accessing the field via an interface.
func (v *WebhookConnectionSettingsInput) GetBasicAuth() *HttpBasicAuthInput { return v.BasicAuth }

// GetColumns returns WebhookConnectionSettingsInput.Columns, and is useful for accessing the field via an interface.
func (v *WebhookConnectionSettingsInput) GetColumns() []*WebhookDataSourceColumnInput {
	return v.Columns
}

// GetTableSettings returns WebhookConnectionSettingsInput.TableSettings, and is useful for accessing the field via an interface.
func (v *WebhookConnectionSettingsInput) GetTableSettings() *TableSettingsInput {
	return v.TableSettings
}

// GetTenant returns WebhookConnectionSettingsInput.Tenant, and is useful for accessing the field via an interface.
func (v *WebhookConnectionSettingsInput) GetTenant() *string { return v.Tenant }

// GetTimestamp returns WebhookConnectionSettingsInput.Timestamp, and is useful for accessing the field via an interface.
func (v *WebhookConnectionSettingsInput) GetTimestamp() *string { return v.Timestamp }

// GetUniqueId returns WebhookConnectionSettingsInput.UniqueId, and is useful for accessing the field via an interface.
func (v *WebhookConnectionSettingsInput) GetUniqueId() *string { return v.UniqueId }

// The fields for specifying a column in an Webhook Data Source's table.
type WebhookDataSourceColumnInput struct {
	// The column name. It has to be unique within a Table.
	Name string `json:"name"`
	// The JSON property that the column will be derived from. For example, if you POST a JSON event like this:
	// ```json
	// { "greeting": { "message": "hello, world" } }
	// ```
	// Then you can use the JSON property "greeting.message" to extract "hello, world" to a column.
	JsonProperty string `json:"jsonProperty"`
	// The column type.
	Type ColumnType `json:"type"`
	// Whether the column's type is nullable or not.
	Nullable bool `json:"nullable"`
}

// GetName returns WebhookDataSourceColumnInput.Name, and is useful for accessing the field via an interface.
func (v *WebhookDataSourceColumnInput) GetName() string { return v.Name }

// GetJsonProperty returns WebhookDataSourceColumnInput.JsonProperty, and is useful for accessing the field via an interface.
func (v *WebhookDataSourceColumnInput) GetJsonProperty() string { return v.JsonProperty }

// GetType returns WebhookDataSourceColumnInput.Type, and is useful for accessing the field via an interface.
func (v *WebhookDataSourceColumnInput) GetType() ColumnType { return v.Type }

// GetNullable returns WebhookDataSourceColumnInput.Nullable, and is useful for accessing the field via an interface.
func (v *WebhookDataSourceColumnInput) GetNullable() bool { return v.Nullable }

// __AddColumnToDataPoolJobInput is used internally by genqlient
type __AddColumnToDataPoolJobInput struct {
	Id string `json:"id"`
}

// GetId returns __AddColumnToDataPoolJobInput.Id, and is useful for accessing the field via an interface.
func (v *__AddColumnToDataPoolJobInput) GetId() string { return v.Id }

// __AssignDataPoolAccessPolicyInput is used internally by genqlient
type __AssignDataPoolAccessPolicyInput struct {
	Application          string `json:"application"`
	DataPoolAccessPolicy string `json:"dataPoolAccessPolicy"`
}

// GetApplication returns __AssignDataPoolAccessPolicyInput.Application, and is useful for accessing the field via an interface.
func (v *__AssignDataPoolAccessPolicyInput) GetApplication() string { return v.Application }

// GetDataPoolAccessPolicy returns __AssignDataPoolAccessPolicyInput.DataPoolAccessPolicy, and is useful for accessing the field via an interface.
func (v *__AssignDataPoolAccessPolicyInput) GetDataPoolAccessPolicy() string {
	return v.DataPoolAccessPolicy
}

// __CreateAddColumnToDataPoolJobInput is used internally by genqlient
type __CreateAddColumnToDataPoolJobInput struct {
	Input *CreateAddColumnToDataPoolJobInput `json:"input,omitempty"`
}

// GetInput returns __CreateAddColumnToDataPoolJobInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateAddColumnToDataPoolJobInput) GetInput() *CreateAddColumnToDataPoolJobInput {
	return v.Input
}

// __CreateAverageMetricInput is used internally by genqlient
type __CreateAverageMetricInput struct {
	Input *CreateAverageMetricInput `json:"input,omitempty"`
}

// GetInput returns __CreateAverageMetricInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateAverageMetricInput) GetInput() *CreateAverageMetricInput { return v.Input }

// __CreateCountDistinctMetricInput is used internally by genqlient
type __CreateCountDistinctMetricInput struct {
	Input *CreateCountDistinctMetricInput `json:"input,omitempty"`
}

// GetInput returns __CreateCountDistinctMetricInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateCountDistinctMetricInput) GetInput() *CreateCountDistinctMetricInput { return v.Input }

// __CreateCountMetricInput is used internally by genqlient
type __CreateCountMetricInput struct {
	Input *CreateCountMetricInput `json:"input,omitempty"`
}

// GetInput returns __CreateCountMetricInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateCountMetricInput) GetInput() *CreateCountMetricInput { return v.Input }

// __CreateCustomMetricInput is used internally by genqlient
type __CreateCustomMetricInput struct {
	Input *CreateCustomMetricInput `json:"input,omitempty"`
}

// GetInput returns __CreateCustomMetricInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateCustomMetricInput) GetInput() *CreateCustomMetricInput { return v.Input }

// __CreateDataPoolAccessPolicyInput is used internally by genqlient
type __CreateDataPoolAccessPolicyInput struct {
	Input *CreateDataPoolAccessPolicyInput `json:"input,omitempty"`
}

// GetInput returns __CreateDataPoolAccessPolicyInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateDataPoolAccessPolicyInput) GetInput() *CreateDataPoolAccessPolicyInput {
	return v.Input
}

// __CreateDataPoolInput is used internally by genqlient
type __CreateDataPoolInput struct {
	Input *CreateDataPoolInputV2 `json:"input,omitempty"`
}

// GetInput returns __CreateDataPoolInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateDataPoolInput) GetInput() *CreateDataPoolInputV2 { return v.Input }

// __CreateHttpDataSourceInput is used internally by genqlient
type __CreateHttpDataSourceInput struct {
	Input *CreateHttpDataSourceInput `json:"input,omitempty"`
}

// GetInput returns __CreateHttpDataSourceInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateHttpDataSourceInput) GetInput() *CreateHttpDataSourceInput { return v.Input }

// __CreateMaterializedViewInput is used internally by genqlient
type __CreateMaterializedViewInput struct {
	Input *CreateMaterializedViewInput `json:"input,omitempty"`
}

// GetInput returns __CreateMaterializedViewInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateMaterializedViewInput) GetInput() *CreateMaterializedViewInput { return v.Input }

// __CreateMaxMetricInput is used internally by genqlient
type __CreateMaxMetricInput struct {
	Input *CreateMaxMetricInput `json:"input,omitempty"`
}

// GetInput returns __CreateMaxMetricInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateMaxMetricInput) GetInput() *CreateMaxMetricInput { return v.Input }

// __CreateMinMetricInput is used internally by genqlient
type __CreateMinMetricInput struct {
	Input *CreateMinMetricInput `json:"input,omitempty"`
}

// GetInput returns __CreateMinMetricInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateMinMetricInput) GetInput() *CreateMinMetricInput { return v.Input }

// __CreatePolicyInput is used internally by genqlient
type __CreatePolicyInput struct {
	Input *CreatePolicyInput `json:"input,omitempty"`
}

// GetInput returns __CreatePolicyInput.Input, and is useful for accessing the field via an interface.
func (v *__CreatePolicyInput) GetInput() *CreatePolicyInput { return v.Input }

// __CreateS3DataSourceInput is used internally by genqlient
type __CreateS3DataSourceInput struct {
	Input *CreateS3DataSourceInput `json:"input,omitempty"`
}

// GetInput returns __CreateS3DataSourceInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateS3DataSourceInput) GetInput() *CreateS3DataSourceInput { return v.Input }

// __CreateSnowflakeDataSourceInput is used internally by genqlient
type __CreateSnowflakeDataSourceInput struct {
	Input *CreateSnowflakeDataSourceInput `json:"input,omitempty"`
}

// GetInput returns __CreateSnowflakeDataSourceInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateSnowflakeDataSourceInput) GetInput() *CreateSnowflakeDataSourceInput { return v.Input }

// __CreateSumMetricInput is used internally by genqlient
type __CreateSumMetricInput struct {
	Input *CreateSumMetricInput `json:"input,omitempty"`
}

// GetInput returns __CreateSumMetricInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateSumMetricInput) GetInput() *CreateSumMetricInput { return v.Input }

// __CreateWebhookDataSourceInput is used internally by genqlient
type __CreateWebhookDataSourceInput struct {
	Input *CreateWebhookDataSourceInput `json:"input,omitempty"`
}

// GetInput returns __CreateWebhookDataSourceInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateWebhookDataSourceInput) GetInput() *CreateWebhookDataSourceInput { return v.Input }

// __DataPoolAccessPolicyInput is used internally by genqlient
type __DataPoolAccessPolicyInput struct {
	Id string `json:"id"`
}

// GetId returns __DataPoolAccessPolicyInput.Id, and is useful for accessing the field via an interface.
func (v *__DataPoolAccessPolicyInput) GetId() string { return v.Id }

// __DataPoolByNameInput is used internally by genqlient
type __DataPoolByNameInput struct {
	UniqueName string `json:"uniqueName"`
}

// GetUniqueName returns __DataPoolByNameInput.UniqueName, and is useful for accessing the field via an interface.
func (v *__DataPoolByNameInput) GetUniqueName() string { return v.UniqueName }

// __DataPoolInput is used internally by genqlient
type __DataPoolInput struct {
	Id string `json:"id"`
}

// GetId returns __DataPoolInput.Id, and is useful for accessing the field via an interface.
func (v *__DataPoolInput) GetId() string { return v.Id }

// __DataPoolsInput is used internally by genqlient
type __DataPoolsInput struct {
	First  *int    `json:"first"`
	Last   *int    `json:"last"`
	After  *string `json:"after"`
	Before *string `json:"before"`
}

// GetFirst returns __DataPoolsInput.First, and is useful for accessing the field via an interface.
func (v *__DataPoolsInput) GetFirst() *int { return v.First }

// GetLast returns __DataPoolsInput.Last, and is useful for accessing the field via an interface.
func (v *__DataPoolsInput) GetLast() *int { return v.Last }

// GetAfter returns __DataPoolsInput.After, and is useful for accessing the field via an interface.
func (v *__DataPoolsInput) GetAfter() *string { return v.After }

// GetBefore returns __DataPoolsInput.Before, and is useful for accessing the field via an interface.
func (v *__DataPoolsInput) GetBefore() *string { return v.Before }

// __DataSourceByNameInput is used internally by genqlient
type __DataSourceByNameInput struct {
	UniqueName string `json:"uniqueName"`
}

// GetUniqueName returns __DataSourceByNameInput.UniqueName, and is useful for accessing the field via an interface.
func (v *__DataSourceByNameInput) GetUniqueName() string { return v.UniqueName }

// __DataSourceInput is used internally by genqlient
type __DataSourceInput struct {
	Id string `json:"id"`
}

// GetId returns __DataSourceInput.Id, and is useful for accessing the field via an interface.
func (v *__DataSourceInput) GetId() string { return v.Id }

// __DataSourcesInput is used internally by genqlient
type __DataSourcesInput struct {
	First  *int    `json:"first"`
	Last   *int    `json:"last"`
	After  *string `json:"after"`
	Before *string `json:"before"`
}

// GetFirst returns __DataSourcesInput.First, and is useful for accessing the field via an interface.
func (v *__DataSourcesInput) GetFirst() *int { return v.First }

// GetLast returns __DataSourcesInput.Last, and is useful for accessing the field via an interface.
func (v *__DataSourcesInput) GetLast() *int { return v.Last }

// GetAfter returns __DataSourcesInput.After, and is useful for accessing the field via an interface.
func (v *__DataSourcesInput) GetAfter() *string { return v.After }

// GetBefore returns __DataSourcesInput.Before, and is useful for accessing the field via an interface.
func (v *__DataSourcesInput) GetBefore() *string { return v.Before }

// __DeleteDataPoolAccessPolicyInput is used internally by genqlient
type __DeleteDataPoolAccessPolicyInput struct {
	Id string `json:"id"`
}

// GetId returns __DeleteDataPoolAccessPolicyInput.Id, and is useful for accessing the field via an interface.
func (v *__DeleteDataPoolAccessPolicyInput) GetId() string { return v.Id }

// __DeleteDataPoolByNameInput is used internally by genqlient
type __DeleteDataPoolByNameInput struct {
	UniqueName string `json:"uniqueName"`
}

// GetUniqueName returns __DeleteDataPoolByNameInput.UniqueName, and is useful for accessing the field via an interface.
func (v *__DeleteDataPoolByNameInput) GetUniqueName() string { return v.UniqueName }

// __DeleteDataPoolInput is used internally by genqlient
type __DeleteDataPoolInput struct {
	Id string `json:"id"`
}

// GetId returns __DeleteDataPoolInput.Id, and is useful for accessing the field via an interface.
func (v *__DeleteDataPoolInput) GetId() string { return v.Id }

// __DeleteDataSourceByNameInput is used internally by genqlient
type __DeleteDataSourceByNameInput struct {
	UniqueName string `json:"uniqueName"`
}

// GetUniqueName returns __DeleteDataSourceByNameInput.UniqueName, and is useful for accessing the field via an interface.
func (v *__DeleteDataSourceByNameInput) GetUniqueName() string { return v.UniqueName }

// __DeleteDataSourceInput is used internally by genqlient
type __DeleteDataSourceInput struct {
	Id string `json:"id"`
}

// GetId returns __DeleteDataSourceInput.Id, and is useful for accessing the field via an interface.
func (v *__DeleteDataSourceInput) GetId() string { return v.Id }

// __DeleteMaterializedViewInput is used internally by genqlient
type __DeleteMaterializedViewInput struct {
	Id string `json:"id"`
}

// GetId returns __DeleteMaterializedViewInput.Id, and is useful for accessing the field via an interface.
func (v *__DeleteMaterializedViewInput) GetId() string { return v.Id }

// __DeleteMetricByNameInput is used internally by genqlient
type __DeleteMetricByNameInput struct {
	UniqueName string `json:"uniqueName"`
}

// GetUniqueName returns __DeleteMetricByNameInput.UniqueName, and is useful for accessing the field via an interface.
func (v *__DeleteMetricByNameInput) GetUniqueName() string { return v.UniqueName }

// __DeleteMetricInput is used internally by genqlient
type __DeleteMetricInput struct {
	Id string `json:"id"`
}

// GetId returns __DeleteMetricInput.Id, and is useful for accessing the field via an interface.
func (v *__DeleteMetricInput) GetId() string { return v.Id }

// __DeletePolicyInput is used internally by genqlient
type __DeletePolicyInput struct {
	Id string `json:"id"`
}

// GetId returns __DeletePolicyInput.Id, and is useful for accessing the field via an interface.
func (v *__DeletePolicyInput) GetId() string { return v.Id }

// __MaterializedViewInput is used internally by genqlient
type __MaterializedViewInput struct {
	Id string `json:"id"`
}

// GetId returns __MaterializedViewInput.Id, and is useful for accessing the field via an interface.
func (v *__MaterializedViewInput) GetId() string { return v.Id }

// __MetricByNameInput is used internally by genqlient
type __MetricByNameInput struct {
	UniqueName string `json:"uniqueName"`
}

// GetUniqueName returns __MetricByNameInput.UniqueName, and is useful for accessing the field via an interface.
func (v *__MetricByNameInput) GetUniqueName() string { return v.UniqueName }

// __MetricInput is used internally by genqlient
type __MetricInput struct {
	Id string `json:"id"`
}

// GetId returns __MetricInput.Id, and is useful for accessing the field via an interface.
func (v *__MetricInput) GetId() string { return v.Id }

// __MetricsInput is used internally by genqlient
type __MetricsInput struct {
	First  *int    `json:"first"`
	Last   *int    `json:"last"`
	After  *string `json:"after"`
	Before *string `json:"before"`
}

// GetFirst returns __MetricsInput.First, and is useful for accessing the field via an interface.
func (v *__MetricsInput) GetFirst() *int { return v.First }

// GetLast returns __MetricsInput.Last, and is useful for accessing the field via an interface.
func (v *__MetricsInput) GetLast() *int { return v.Last }

// GetAfter returns __MetricsInput.After, and is useful for accessing the field via an interface.
func (v *__MetricsInput) GetAfter() *string { return v.After }

// GetBefore returns __MetricsInput.Before, and is useful for accessing the field via an interface.
func (v *__MetricsInput) GetBefore() *string { return v.Before }

// __ModifyDataPoolAccessPolicyInput is used internally by genqlient
type __ModifyDataPoolAccessPolicyInput struct {
	Input *ModifyDataPoolAccessPolicyInput `json:"input,omitempty"`
}

// GetInput returns __ModifyDataPoolAccessPolicyInput.Input, and is useful for accessing the field via an interface.
func (v *__ModifyDataPoolAccessPolicyInput) GetInput() *ModifyDataPoolAccessPolicyInput {
	return v.Input
}

// __ModifyDataPoolInput is used internally by genqlient
type __ModifyDataPoolInput struct {
	Input *ModifyDataPoolInput `json:"input,omitempty"`
}

// GetInput returns __ModifyDataPoolInput.Input, and is useful for accessing the field via an interface.
func (v *__ModifyDataPoolInput) GetInput() *ModifyDataPoolInput { return v.Input }

// __ModifyHttpDataSourceInput is used internally by genqlient
type __ModifyHttpDataSourceInput struct {
	Input *ModifyHttpDataSourceInput `json:"input,omitempty"`
}

// GetInput returns __ModifyHttpDataSourceInput.Input, and is useful for accessing the field via an interface.
func (v *__ModifyHttpDataSourceInput) GetInput() *ModifyHttpDataSourceInput { return v.Input }

// __ModifyMaterializedViewInput is used internally by genqlient
type __ModifyMaterializedViewInput struct {
	Input *ModifyMaterializedViewInput `json:"input,omitempty"`
}

// GetInput returns __ModifyMaterializedViewInput.Input, and is useful for accessing the field via an interface.
func (v *__ModifyMaterializedViewInput) GetInput() *ModifyMaterializedViewInput { return v.Input }

// __ModifyMetricInput is used internally by genqlient
type __ModifyMetricInput struct {
	Input *ModifyMetricInput `json:"input,omitempty"`
}

// GetInput returns __ModifyMetricInput.Input, and is useful for accessing the field via an interface.
func (v *__ModifyMetricInput) GetInput() *ModifyMetricInput { return v.Input }

// __ModifyPolicyInput is used internally by genqlient
type __ModifyPolicyInput struct {
	Input *ModifyPolicyInput `json:"input,omitempty"`
}

// GetInput returns __ModifyPolicyInput.Input, and is useful for accessing the field via an interface.
func (v *__ModifyPolicyInput) GetInput() *ModifyPolicyInput { return v.Input }

// __ModifyS3DataSourceInput is used internally by genqlient
type __ModifyS3DataSourceInput struct {
	Input *ModifyS3DataSourceInput `json:"input,omitempty"`
}

// GetInput returns __ModifyS3DataSourceInput.Input, and is useful for accessing the field via an interface.
func (v *__ModifyS3DataSourceInput) GetInput() *ModifyS3DataSourceInput { return v.Input }

// __ModifySnowflakeDataSourceInput is used internally by genqlient
type __ModifySnowflakeDataSourceInput struct {
	Input *ModifySnowflakeDataSourceInput `json:"input,omitempty"`
}

// GetInput returns __ModifySnowflakeDataSourceInput.Input, and is useful for accessing the field via an interface.
func (v *__ModifySnowflakeDataSourceInput) GetInput() *ModifySnowflakeDataSourceInput { return v.Input }

// __ModifyWebhookDataSourceInput is used internally by genqlient
type __ModifyWebhookDataSourceInput struct {
	Input *ModifyWebhookDataSourceInput `json:"input,omitempty"`
}

// GetInput returns __ModifyWebhookDataSourceInput.Input, and is useful for accessing the field via an interface.
func (v *__ModifyWebhookDataSourceInput) GetInput() *ModifyWebhookDataSourceInput { return v.Input }

// __PolicyInput is used internally by genqlient
type __PolicyInput struct {
	Id string `json:"id"`
}

// GetId returns __PolicyInput.Id, and is useful for accessing the field via an interface.
func (v *__PolicyInput) GetId() string { return v.Id }

// __UnAssignDataPoolAccessPolicyInput is used internally by genqlient
type __UnAssignDataPoolAccessPolicyInput struct {
	DataPoolAccessPolicy string `json:"dataPoolAccessPolicy"`
	Application          string `json:"application"`
}

// GetDataPoolAccessPolicy returns __UnAssignDataPoolAccessPolicyInput.DataPoolAccessPolicy, and is useful for accessing the field via an interface.
func (v *__UnAssignDataPoolAccessPolicyInput) GetDataPoolAccessPolicy() string {
	return v.DataPoolAccessPolicy
}

// GetApplication returns __UnAssignDataPoolAccessPolicyInput.Application, and is useful for accessing the field via an interface.
func (v *__UnAssignDataPoolAccessPolicyInput) GetApplication() string { return v.Application }

// The query or mutation executed by AddColumnToDataPoolJob.
const AddColumnToDataPoolJob_Operation = `
query AddColumnToDataPoolJob ($id: ID!) {
	addColumnToDataPoolJob(id: $id) {
		... AddColumnToDataPoolJobData
	}
}
fragment AddColumnToDataPoolJobData on AddColumnToDataPoolJob {
	id
	dataPool {
		id
	}
	status
	error {
		... GqlError
	}
	columnName
	columnType
}
fragment GqlError on Error {
	code
	message
}
`

func AddColumnToDataPoolJob(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*AddColumnToDataPoolJobResponse, error) {
	req := &graphql.Request{
		OpName: "AddColumnToDataPoolJob",
		Query:  AddColumnToDataPoolJob_Operation,
		Variables: &__AddColumnToDataPoolJobInput{
			Id: id,
		},
	}
	var err error

	var data AddColumnToDataPoolJobResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by AssignDataPoolAccessPolicy.
const AssignDataPoolAccessPolicy_Operation = `
mutation AssignDataPoolAccessPolicy ($application: ID!, $dataPoolAccessPolicy: ID!) {
	assignDataPoolAccessPolicyToApplication(application: $application, dataPoolAccessPolicy: $dataPoolAccessPolicy)
}
`

func AssignDataPoolAccessPolicy(
	ctx context.Context,
	client graphql.Client,
	application string,
	dataPoolAccessPolicy string,
) (*AssignDataPoolAccessPolicyResponse, error) {
	req := &graphql.Request{
		OpName: "AssignDataPoolAccessPolicy",
		Query:  AssignDataPoolAccessPolicy_Operation,
		Variables: &__AssignDataPoolAccessPolicyInput{
			Application:          application,
			DataPoolAccessPolicy: dataPoolAccessPolicy,
		},
	}
	var err error

	var data AssignDataPoolAccessPolicyResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by CreateAddColumnToDataPoolJob.
const CreateAddColumnToDataPoolJob_Operation = `
mutation CreateAddColumnToDataPoolJob ($input: CreateAddColumnToDataPoolJobInput!) {
	createAddColumnToDataPoolJob(input: $input) {
		job {
			... AddColumnToDataPoolJobData
		}
	}
}
fragment AddColumnToDataPoolJobData on AddColumnToDataPoolJob {
	id
	dataPool {
		id
	}
	status
	error {
		... GqlError
	}
	columnName
	columnType
}
fragment GqlError on Error {
	code
	message
}
`

func CreateAddColumnToDataPoolJob(
	ctx context.Context,
	client graphql.Client,
	input *CreateAddColumnToDataPoolJobInput,
) (*CreateAddColumnToDataPoolJobResponse, error) {
	req := &graphql.Request{
		OpName: "CreateAddColumnToDataPoolJob",
		Query:  CreateAddColumnToDataPoolJob_Operation,
		Variables: &__CreateAddColumnToDataPoolJobInput{
			Input: input,
		},
	}
	var err error

	var data CreateAddColumnToDataPoolJobResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by CreateAverageMetric.
const CreateAverageMetric_Operation = `
mutation CreateAverageMetric ($input: CreateAverageMetricInput) {
	createAverageMetric(input: $input) {
		__typename
		metric {
			... MetricData
		}
	}
}
fragment MetricData on Metric {
	... CommonData
	id
	type
	accessControlEnabled
	dataPool {
		... DataPoolData
	}
	dimensions {
		... DimensionData
	}
	timestamp {
		... DimensionData
	}
	measure {
		... DimensionData
	}
	settings {
		__typename
		... on CountMetricSettings {
			__typename
			filters {
				... FilterData
			}
		}
		... on SumMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on CountDistinctMetricSettings {
			__typename
			filters {
				... FilterData
			}
			dimension {
				... DimensionData
			}
		}
		... on AverageMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on MinMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on MaxMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on CustomMetricSettings {
			__typename
			filters {
				... FilterData
			}
			expression
		}
	}
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment DataPoolData on DataPool {
	id
	... CommonData
	dataSource {
		... DataSourceData
	}
	status
	error {
		message
	}
	table
	tenant {
		... TenantData
	}
	timestamp {
		... TimestampData
	}
	columns {
		nodes {
			... DataPoolColumnData
		}
	}
	uniqueId {
		columnName
	}
	syncing {
		... DataPoolSyncingData
	}
	availableMeasures {
		nodes {
			... DataPoolColumnData
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... SyncData
		}
	}
	dataPoolAccessPolicies {
		nodes {
			... DataPoolAccessPolicyData
		}
	}
	accessControlEnabled
}
fragment DimensionData on Dimension {
	columnName
	type
	isNullable
	isUniqueKey
}
fragment FilterData on Filter {
	column
	operator
	value
	and {
		column
		operator
		value
	}
	or {
		column
		operator
		value
	}
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	dataPools {
		nodes {
			id
			accessControlEnabled
		}
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
		... on HttpConnectionSettings {
			basicAuth {
				username
				password
			}
			tables {
				id
				name
				columns {
					name
					type
					nullable
				}
			}
		}
		... on S3ConnectionSettings {
			bucket
			awsAccessKeyId
			tables {
				id
				name
				path
				columns {
					name
					type
					nullable
				}
			}
		}
		... on WebhookConnectionSettings {
			basicAuth {
				username
				password
			}
			columns {
				name
				type
				jsonProperty
				nullable
			}
			tenant
			timestamp
			uniqueId
			webhookUrl
		}
	}
	tables(first: 100) {
		nodes {
			id
			name
			columns(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment TenantData on Tenant {
	columnName
	type
}
fragment TimestampData on Timestamp {
	columnName
	type
}
fragment DataPoolColumnData on DataPoolColumn {
	columnName
	type
	isNullable
}
fragment DataPoolSyncingData on DataPoolSyncing {
	status
	interval
	lastSyncedAt
}
fragment SyncData on Sync {
	id
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment DataPoolAccessPolicyData on DataPoolAccessPolicy {
	id
	... CommonData
	columns
	rows {
		... FilterData
	}
	dataPool {
		id
	}
}
fragment ColumnData on Column {
	name
	type
	isNullable
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`

func CreateAverageMetric(
	ctx context.Context,
	client graphql.Client,
	input *CreateAverageMetricInput,
) (*CreateAverageMetricResponse, error) {
	req := &graphql.Request{
		OpName: "CreateAverageMetric",
		Query:  CreateAverageMetric_Operation,
		Variables: &__CreateAverageMetricInput{
			Input: input,
		},
	}
	var err error

	var data CreateAverageMetricResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by CreateCountDistinctMetric.
const CreateCountDistinctMetric_Operation = `
mutation CreateCountDistinctMetric ($input: CreateCountDistinctMetricInput) {
	createCountDistinctMetric(input: $input) {
		__typename
		metric {
			... MetricData
		}
	}
}
fragment MetricData on Metric {
	... CommonData
	id
	type
	accessControlEnabled
	dataPool {
		... DataPoolData
	}
	dimensions {
		... DimensionData
	}
	timestamp {
		... DimensionData
	}
	measure {
		... DimensionData
	}
	settings {
		__typename
		... on CountMetricSettings {
			__typename
			filters {
				... FilterData
			}
		}
		... on SumMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on CountDistinctMetricSettings {
			__typename
			filters {
				... FilterData
			}
			dimension {
				... DimensionData
			}
		}
		... on AverageMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on MinMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on MaxMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on CustomMetricSettings {
			__typename
			filters {
				... FilterData
			}
			expression
		}
	}
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment DataPoolData on DataPool {
	id
	... CommonData
	dataSource {
		... DataSourceData
	}
	status
	error {
		message
	}
	table
	tenant {
		... TenantData
	}
	timestamp {
		... TimestampData
	}
	columns {
		nodes {
			... DataPoolColumnData
		}
	}
	uniqueId {
		columnName
	}
	syncing {
		... DataPoolSyncingData
	}
	availableMeasures {
		nodes {
			... DataPoolColumnData
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... SyncData
		}
	}
	dataPoolAccessPolicies {
		nodes {
			... DataPoolAccessPolicyData
		}
	}
	accessControlEnabled
}
fragment DimensionData on Dimension {
	columnName
	type
	isNullable
	isUniqueKey
}
fragment FilterData on Filter {
	column
	operator
	value
	and {
		column
		operator
		value
	}
	or {
		column
		operator
		value
	}
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	dataPools {
		nodes {
			id
			accessControlEnabled
		}
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
		... on HttpConnectionSettings {
			basicAuth {
				username
				password
			}
			tables {
				id
				name
				columns {
					name
					type
					nullable
				}
			}
		}
		... on S3ConnectionSettings {
			bucket
			awsAccessKeyId
			tables {
				id
				name
				path
				columns {
					name
					type
					nullable
				}
			}
		}
		... on WebhookConnectionSettings {
			basicAuth {
				username
				password
			}
			columns {
				name
				type
				jsonProperty
				nullable
			}
			tenant
			timestamp
			uniqueId
			webhookUrl
		}
	}
	tables(first: 100) {
		nodes {
			id
			name
			columns(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment TenantData on Tenant {
	columnName
	type
}
fragment TimestampData on Timestamp {
	columnName
	type
}
fragment DataPoolColumnData on DataPoolColumn {
	columnName
	type
	isNullable
}
fragment DataPoolSyncingData on DataPoolSyncing {
	status
	interval
	lastSyncedAt
}
fragment SyncData on Sync {
	id
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment DataPoolAccessPolicyData on DataPoolAccessPolicy {
	id
	... CommonData
	columns
	rows {
		... FilterData
	}
	dataPool {
		id
	}
}
fragment ColumnData on Column {
	name
	type
	isNullable
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`

func CreateCountDistinctMetric(
	ctx context.Context,
	client graphql.Client,
	input *CreateCountDistinctMetricInput,
) (*CreateCountDistinctMetricResponse, error) {
	req := &graphql.Request{
		OpName: "CreateCountDistinctMetric",
		Query:  CreateCountDistinctMetric_Operation,
		Variables: &__CreateCountDistinctMetricInput{
			Input: input,
		},
	}
	var err error

	var data CreateCountDistinctMetricResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by CreateCountMetric.
const CreateCountMetric_Operation = `
mutation CreateCountMetric ($input: CreateCountMetricInput) {
	createCountMetric(input: $input) {
		__typename
		metric {
			... MetricData
		}
	}
}
fragment MetricData on Metric {
	... CommonData
	id
	type
	accessControlEnabled
	dataPool {
		... DataPoolData
	}
	dimensions {
		... DimensionData
	}
	timestamp {
		... DimensionData
	}
	measure {
		... DimensionData
	}
	settings {
		__typename
		... on CountMetricSettings {
			__typename
			filters {
				... FilterData
			}
		}
		... on SumMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on CountDistinctMetricSettings {
			__typename
			filters {
				... FilterData
			}
			dimension {
				... DimensionData
			}
		}
		... on AverageMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on MinMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on MaxMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on CustomMetricSettings {
			__typename
			filters {
				... FilterData
			}
			expression
		}
	}
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment DataPoolData on DataPool {
	id
	... CommonData
	dataSource {
		... DataSourceData
	}
	status
	error {
		message
	}
	table
	tenant {
		... TenantData
	}
	timestamp {
		... TimestampData
	}
	columns {
		nodes {
			... DataPoolColumnData
		}
	}
	uniqueId {
		columnName
	}
	syncing {
		... DataPoolSyncingData
	}
	availableMeasures {
		nodes {
			... DataPoolColumnData
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... SyncData
		}
	}
	dataPoolAccessPolicies {
		nodes {
			... DataPoolAccessPolicyData
		}
	}
	accessControlEnabled
}
fragment DimensionData on Dimension {
	columnName
	type
	isNullable
	isUniqueKey
}
fragment FilterData on Filter {
	column
	operator
	value
	and {
		column
		operator
		value
	}
	or {
		column
		operator
		value
	}
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	dataPools {
		nodes {
			id
			accessControlEnabled
		}
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
		... on HttpConnectionSettings {
			basicAuth {
				username
				password
			}
			tables {
				id
				name
				columns {
					name
					type
					nullable
				}
			}
		}
		... on S3ConnectionSettings {
			bucket
			awsAccessKeyId
			tables {
				id
				name
				path
				columns {
					name
					type
					nullable
				}
			}
		}
		... on WebhookConnectionSettings {
			basicAuth {
				username
				password
			}
			columns {
				name
				type
				jsonProperty
				nullable
			}
			tenant
			timestamp
			uniqueId
			webhookUrl
		}
	}
	tables(first: 100) {
		nodes {
			id
			name
			columns(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment TenantData on Tenant {
	columnName
	type
}
fragment TimestampData on Timestamp {
	columnName
	type
}
fragment DataPoolColumnData on DataPoolColumn {
	columnName
	type
	isNullable
}
fragment DataPoolSyncingData on DataPoolSyncing {
	status
	interval
	lastSyncedAt
}
fragment SyncData on Sync {
	id
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment DataPoolAccessPolicyData on DataPoolAccessPolicy {
	id
	... CommonData
	columns
	rows {
		... FilterData
	}
	dataPool {
		id
	}
}
fragment ColumnData on Column {
	name
	type
	isNullable
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`

func CreateCountMetric(
	ctx context.Context,
	client graphql.Client,
	input *CreateCountMetricInput,
) (*CreateCountMetricResponse, error) {
	req := &graphql.Request{
		OpName: "CreateCountMetric",
		Query:  CreateCountMetric_Operation,
		Variables: &__CreateCountMetricInput{
			Input: input,
		},
	}
	var err error

	var data CreateCountMetricResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by CreateCustomMetric.
const CreateCustomMetric_Operation = `
mutation CreateCustomMetric ($input: CreateCustomMetricInput!) {
	createCustomMetric(input: $input) {
		__typename
		metric {
			... MetricData
		}
	}
}
fragment MetricData on Metric {
	... CommonData
	id
	type
	accessControlEnabled
	dataPool {
		... DataPoolData
	}
	dimensions {
		... DimensionData
	}
	timestamp {
		... DimensionData
	}
	measure {
		... DimensionData
	}
	settings {
		__typename
		... on CountMetricSettings {
			__typename
			filters {
				... FilterData
			}
		}
		... on SumMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on CountDistinctMetricSettings {
			__typename
			filters {
				... FilterData
			}
			dimension {
				... DimensionData
			}
		}
		... on AverageMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on MinMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on MaxMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on CustomMetricSettings {
			__typename
			filters {
				... FilterData
			}
			expression
		}
	}
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment DataPoolData on DataPool {
	id
	... CommonData
	dataSource {
		... DataSourceData
	}
	status
	error {
		message
	}
	table
	tenant {
		... TenantData
	}
	timestamp {
		... TimestampData
	}
	columns {
		nodes {
			... DataPoolColumnData
		}
	}
	uniqueId {
		columnName
	}
	syncing {
		... DataPoolSyncingData
	}
	availableMeasures {
		nodes {
			... DataPoolColumnData
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... SyncData
		}
	}
	dataPoolAccessPolicies {
		nodes {
			... DataPoolAccessPolicyData
		}
	}
	accessControlEnabled
}
fragment DimensionData on Dimension {
	columnName
	type
	isNullable
	isUniqueKey
}
fragment FilterData on Filter {
	column
	operator
	value
	and {
		column
		operator
		value
	}
	or {
		column
		operator
		value
	}
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	dataPools {
		nodes {
			id
			accessControlEnabled
		}
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
		... on HttpConnectionSettings {
			basicAuth {
				username
				password
			}
			tables {
				id
				name
				columns {
					name
					type
					nullable
				}
			}
		}
		... on S3ConnectionSettings {
			bucket
			awsAccessKeyId
			tables {
				id
				name
				path
				columns {
					name
					type
					nullable
				}
			}
		}
		... on WebhookConnectionSettings {
			basicAuth {
				username
				password
			}
			columns {
				name
				type
				jsonProperty
				nullable
			}
			tenant
			timestamp
			uniqueId
			webhookUrl
		}
	}
	tables(first: 100) {
		nodes {
			id
			name
			columns(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment TenantData on Tenant {
	columnName
	type
}
fragment TimestampData on Timestamp {
	columnName
	type
}
fragment DataPoolColumnData on DataPoolColumn {
	columnName
	type
	isNullable
}
fragment DataPoolSyncingData on DataPoolSyncing {
	status
	interval
	lastSyncedAt
}
fragment SyncData on Sync {
	id
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment DataPoolAccessPolicyData on DataPoolAccessPolicy {
	id
	... CommonData
	columns
	rows {
		... FilterData
	}
	dataPool {
		id
	}
}
fragment ColumnData on Column {
	name
	type
	isNullable
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`

func CreateCustomMetric(
	ctx context.Context,
	client graphql.Client,
	input *CreateCustomMetricInput,
) (*CreateCustomMetricResponse, error) {
	req := &graphql.Request{
		OpName: "CreateCustomMetric",
		Query:  CreateCustomMetric_Operation,
		Variables: &__CreateCustomMetricInput{
			Input: input,
		},
	}
	var err error

	var data CreateCustomMetricResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by CreateDataPool.
const CreateDataPool_Operation = `
mutation CreateDataPool ($input: CreateDataPoolInputV2!) {
	createDataPoolV2(input: $input) {
		__typename
		... on DataPoolResponse {
			dataPool {
				... DataPoolData
			}
		}
	}
}
fragment DataPoolData on DataPool {
	id
	... CommonData
	dataSource {
		... DataSourceData
	}
	status
	error {
		message
	}
	table
	tenant {
		... TenantData
	}
	timestamp {
		... TimestampData
	}
	columns {
		nodes {
			... DataPoolColumnData
		}
	}
	uniqueId {
		columnName
	}
	syncing {
		... DataPoolSyncingData
	}
	availableMeasures {
		nodes {
			... DataPoolColumnData
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... SyncData
		}
	}
	dataPoolAccessPolicies {
		nodes {
			... DataPoolAccessPolicyData
		}
	}
	accessControlEnabled
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	dataPools {
		nodes {
			id
			accessControlEnabled
		}
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
		... on HttpConnectionSettings {
			basicAuth {
				username
				password
			}
			tables {
				id
				name
				columns {
					name
					type
					nullable
				}
			}
		}
		... on S3ConnectionSettings {
			bucket
			awsAccessKeyId
			tables {
				id
				name
				path
				columns {
					name
					type
					nullable
				}
			}
		}
		... on WebhookConnectionSettings {
			basicAuth {
				username
				password
			}
			columns {
				name
				type
				jsonProperty
				nullable
			}
			tenant
			timestamp
			uniqueId
			webhookUrl
		}
	}
	tables(first: 100) {
		nodes {
			id
			name
			columns(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment TenantData on Tenant {
	columnName
	type
}
fragment TimestampData on Timestamp {
	columnName
	type
}
fragment DataPoolColumnData on DataPoolColumn {
	columnName
	type
	isNullable
}
fragment DataPoolSyncingData on DataPoolSyncing {
	status
	interval
	lastSyncedAt
}
fragment SyncData on Sync {
	id
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment DataPoolAccessPolicyData on DataPoolAccessPolicy {
	id
	... CommonData
	columns
	rows {
		... FilterData
	}
	dataPool {
		id
	}
}
fragment ColumnData on Column {
	name
	type
	isNullable
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
fragment FilterData on Filter {
	column
	operator
	value
	and {
		column
		operator
		value
	}
	or {
		column
		operator
		value
	}
}
`

func CreateDataPool(
	ctx context.Context,
	client graphql.Client,
	input *CreateDataPoolInputV2,
) (*CreateDataPoolResponse, error) {
	req := &graphql.Request{
		OpName: "CreateDataPool",
		Query:  CreateDataPool_Operation,
		Variables: &__CreateDataPoolInput{
			Input: input,
		},
	}
	var err error

	var data CreateDataPoolResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by CreateDataPoolAccessPolicy.
const CreateDataPoolAccessPolicy_Operation = `
mutation CreateDataPoolAccessPolicy ($input: CreateDataPoolAccessPolicyInput!) {
	createDataPoolAccessPolicy(input: $input) {
		dataPoolAccessPolicy {
			... DataPoolAccessPolicyData
		}
	}
}
fragment DataPoolAccessPolicyData on DataPoolAccessPolicy {
	id
	... CommonData
	columns
	rows {
		... FilterData
	}
	dataPool {
		id
	}
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment FilterData on Filter {
	column
	operator
	value
	and {
		column
		operator
		value
	}
	or {
		column
		operator
		value
	}
}
`

func CreateDataPoolAccessPolicy(
	ctx context.Context,
	client graphql.Client,
	input *CreateDataPoolAccessPolicyInput,
) (*CreateDataPoolAccessPolicyResponse, error) {
	req := &graphql.Request{
		OpName: "CreateDataPoolAccessPolicy",
		Query:  CreateDataPoolAccessPolicy_Operation,
		Variables: &__CreateDataPoolAccessPolicyInput{
			Input: input,
		},
	}
	var err error

	var data CreateDataPoolAccessPolicyResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by CreateHttpDataSource.
const CreateHttpDataSource_Operation = `
mutation CreateHttpDataSource ($input: CreateHttpDataSourceInput!) {
	createHttpDataSource(input: $input) {
		dataSource {
			... DataSourceData
		}
	}
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	dataPools {
		nodes {
			id
			accessControlEnabled
		}
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
		... on HttpConnectionSettings {
			basicAuth {
				username
				password
			}
			tables {
				id
				name
				columns {
					name
					type
					nullable
				}
			}
		}
		... on S3ConnectionSettings {
			bucket
			awsAccessKeyId
			tables {
				id
				name
				path
				columns {
					name
					type
					nullable
				}
			}
		}
		... on WebhookConnectionSettings {
			basicAuth {
				username
				password
			}
			columns {
				name
				type
				jsonProperty
				nullable
			}
			tenant
			timestamp
			uniqueId
			webhookUrl
		}
	}
	tables(first: 100) {
		nodes {
			id
			name
			columns(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment ColumnData on Column {
	name
	type
	isNullable
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`

func CreateHttpDataSource(
	ctx context.Context,
	client graphql.Client,
	input *CreateHttpDataSourceInput,
) (*CreateHttpDataSourceResponse, error) {
	req := &graphql.Request{
		OpName: "CreateHttpDataSource",
		Query:  CreateHttpDataSource_Operation,
		Variables: &__CreateHttpDataSourceInput{
			Input: input,
		},
	}
	var err error

	var data CreateHttpDataSourceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by CreateMaterializedView.
const CreateMaterializedView_Operation = `
mutation CreateMaterializedView ($input: CreateMaterializedViewInput!) {
	createMaterializedView(input: $input) {
		__typename
		... on MaterializedViewResponse {
			materializedView {
				... MaterializedViewData
			}
		}
	}
}
fragment MaterializedViewData on MaterializedView {
	id
	... CommonData
	sql
	destination {
		id
	}
	source {
		id
	}
	others {
		id
	}
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
`

func CreateMaterializedView(
	ctx context.Context,
	client graphql.Client,
	input *CreateMaterializedViewInput,
) (*CreateMaterializedViewResponse, error) {
	req := &graphql.Request{
		OpName: "CreateMaterializedView",
		Query:  CreateMaterializedView_Operation,
		Variables: &__CreateMaterializedViewInput{
			Input: input,
		},
	}
	var err error

	var data CreateMaterializedViewResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by CreateMaxMetric.
const CreateMaxMetric_Operation = `
mutation CreateMaxMetric ($input: CreateMaxMetricInput) {
	createMaxMetric(input: $input) {
		__typename
		metric {
			... MetricData
		}
	}
}
fragment MetricData on Metric {
	... CommonData
	id
	type
	accessControlEnabled
	dataPool {
		... DataPoolData
	}
	dimensions {
		... DimensionData
	}
	timestamp {
		... DimensionData
	}
	measure {
		... DimensionData
	}
	settings {
		__typename
		... on CountMetricSettings {
			__typename
			filters {
				... FilterData
			}
		}
		... on SumMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on CountDistinctMetricSettings {
			__typename
			filters {
				... FilterData
			}
			dimension {
				... DimensionData
			}
		}
		... on AverageMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on MinMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on MaxMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on CustomMetricSettings {
			__typename
			filters {
				... FilterData
			}
			expression
		}
	}
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment DataPoolData on DataPool {
	id
	... CommonData
	dataSource {
		... DataSourceData
	}
	status
	error {
		message
	}
	table
	tenant {
		... TenantData
	}
	timestamp {
		... TimestampData
	}
	columns {
		nodes {
			... DataPoolColumnData
		}
	}
	uniqueId {
		columnName
	}
	syncing {
		... DataPoolSyncingData
	}
	availableMeasures {
		nodes {
			... DataPoolColumnData
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... SyncData
		}
	}
	dataPoolAccessPolicies {
		nodes {
			... DataPoolAccessPolicyData
		}
	}
	accessControlEnabled
}
fragment DimensionData on Dimension {
	columnName
	type
	isNullable
	isUniqueKey
}
fragment FilterData on Filter {
	column
	operator
	value
	and {
		column
		operator
		value
	}
	or {
		column
		operator
		value
	}
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	dataPools {
		nodes {
			id
			accessControlEnabled
		}
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
		... on HttpConnectionSettings {
			basicAuth {
				username
				password
			}
			tables {
				id
				name
				columns {
					name
					type
					nullable
				}
			}
		}
		... on S3ConnectionSettings {
			bucket
			awsAccessKeyId
			tables {
				id
				name
				path
				columns {
					name
					type
					nullable
				}
			}
		}
		... on WebhookConnectionSettings {
			basicAuth {
				username
				password
			}
			columns {
				name
				type
				jsonProperty
				nullable
			}
			tenant
			timestamp
			uniqueId
			webhookUrl
		}
	}
	tables(first: 100) {
		nodes {
			id
			name
			columns(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment TenantData on Tenant {
	columnName
	type
}
fragment TimestampData on Timestamp {
	columnName
	type
}
fragment DataPoolColumnData on DataPoolColumn {
	columnName
	type
	isNullable
}
fragment DataPoolSyncingData on DataPoolSyncing {
	status
	interval
	lastSyncedAt
}
fragment SyncData on Sync {
	id
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment DataPoolAccessPolicyData on DataPoolAccessPolicy {
	id
	... CommonData
	columns
	rows {
		... FilterData
	}
	dataPool {
		id
	}
}
fragment ColumnData on Column {
	name
	type
	isNullable
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`

func CreateMaxMetric(
	ctx context.Context,
	client graphql.Client,
	input *CreateMaxMetricInput,
) (*CreateMaxMetricResponse, error) {
	req := &graphql.Request{
		OpName: "CreateMaxMetric",
		Query:  CreateMaxMetric_Operation,
		Variables: &__CreateMaxMetricInput{
			Input: input,
		},
	}
	var err error

	var data CreateMaxMetricResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by CreateMinMetric.
const CreateMinMetric_Operation = `
mutation CreateMinMetric ($input: CreateMinMetricInput) {
	createMinMetric(input: $input) {
		__typename
		metric {
			... MetricData
		}
	}
}
fragment MetricData on Metric {
	... CommonData
	id
	type
	accessControlEnabled
	dataPool {
		... DataPoolData
	}
	dimensions {
		... DimensionData
	}
	timestamp {
		... DimensionData
	}
	measure {
		... DimensionData
	}
	settings {
		__typename
		... on CountMetricSettings {
			__typename
			filters {
				... FilterData
			}
		}
		... on SumMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on CountDistinctMetricSettings {
			__typename
			filters {
				... FilterData
			}
			dimension {
				... DimensionData
			}
		}
		... on AverageMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on MinMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on MaxMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on CustomMetricSettings {
			__typename
			filters {
				... FilterData
			}
			expression
		}
	}
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment DataPoolData on DataPool {
	id
	... CommonData
	dataSource {
		... DataSourceData
	}
	status
	error {
		message
	}
	table
	tenant {
		... TenantData
	}
	timestamp {
		... TimestampData
	}
	columns {
		nodes {
			... DataPoolColumnData
		}
	}
	uniqueId {
		columnName
	}
	syncing {
		... DataPoolSyncingData
	}
	availableMeasures {
		nodes {
			... DataPoolColumnData
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... SyncData
		}
	}
	dataPoolAccessPolicies {
		nodes {
			... DataPoolAccessPolicyData
		}
	}
	accessControlEnabled
}
fragment DimensionData on Dimension {
	columnName
	type
	isNullable
	isUniqueKey
}
fragment FilterData on Filter {
	column
	operator
	value
	and {
		column
		operator
		value
	}
	or {
		column
		operator
		value
	}
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	dataPools {
		nodes {
			id
			accessControlEnabled
		}
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
		... on HttpConnectionSettings {
			basicAuth {
				username
				password
			}
			tables {
				id
				name
				columns {
					name
					type
					nullable
				}
			}
		}
		... on S3ConnectionSettings {
			bucket
			awsAccessKeyId
			tables {
				id
				name
				path
				columns {
					name
					type
					nullable
				}
			}
		}
		... on WebhookConnectionSettings {
			basicAuth {
				username
				password
			}
			columns {
				name
				type
				jsonProperty
				nullable
			}
			tenant
			timestamp
			uniqueId
			webhookUrl
		}
	}
	tables(first: 100) {
		nodes {
			id
			name
			columns(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment TenantData on Tenant {
	columnName
	type
}
fragment TimestampData on Timestamp {
	columnName
	type
}
fragment DataPoolColumnData on DataPoolColumn {
	columnName
	type
	isNullable
}
fragment DataPoolSyncingData on DataPoolSyncing {
	status
	interval
	lastSyncedAt
}
fragment SyncData on Sync {
	id
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment DataPoolAccessPolicyData on DataPoolAccessPolicy {
	id
	... CommonData
	columns
	rows {
		... FilterData
	}
	dataPool {
		id
	}
}
fragment ColumnData on Column {
	name
	type
	isNullable
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`

func CreateMinMetric(
	ctx context.Context,
	client graphql.Client,
	input *CreateMinMetricInput,
) (*CreateMinMetricResponse, error) {
	req := &graphql.Request{
		OpName: "CreateMinMetric",
		Query:  CreateMinMetric_Operation,
		Variables: &__CreateMinMetricInput{
			Input: input,
		},
	}
	var err error

	var data CreateMinMetricResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by CreatePolicy.
const CreatePolicy_Operation = `
mutation CreatePolicy ($input: CreatePolicyInput!) {
	createPolicy(input: $input) {
		policy {
			... PolicyData
		}
	}
}
fragment PolicyData on Policy {
	id
	type
	metric {
		id
	}
	application {
		id
	}
}
`

func CreatePolicy(
	ctx context.Context,
	client graphql.Client,
	input *CreatePolicyInput,
) (*CreatePolicyResponse, error) {
	req := &graphql.Request{
		OpName: "CreatePolicy",
		Query:  CreatePolicy_Operation,
		Variables: &__CreatePolicyInput{
			Input: input,
		},
	}
	var err error

	var data CreatePolicyResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by CreateS3DataSource.
const CreateS3DataSource_Operation = `
mutation CreateS3DataSource ($input: CreateS3DataSourceInput!) {
	createS3DataSource(input: $input) {
		dataSource {
			... DataSourceData
		}
	}
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	dataPools {
		nodes {
			id
			accessControlEnabled
		}
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
		... on HttpConnectionSettings {
			basicAuth {
				username
				password
			}
			tables {
				id
				name
				columns {
					name
					type
					nullable
				}
			}
		}
		... on S3ConnectionSettings {
			bucket
			awsAccessKeyId
			tables {
				id
				name
				path
				columns {
					name
					type
					nullable
				}
			}
		}
		... on WebhookConnectionSettings {
			basicAuth {
				username
				password
			}
			columns {
				name
				type
				jsonProperty
				nullable
			}
			tenant
			timestamp
			uniqueId
			webhookUrl
		}
	}
	tables(first: 100) {
		nodes {
			id
			name
			columns(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment ColumnData on Column {
	name
	type
	isNullable
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`

func CreateS3DataSource(
	ctx context.Context,
	client graphql.Client,
	input *CreateS3DataSourceInput,
) (*CreateS3DataSourceResponse, error) {
	req := &graphql.Request{
		OpName: "CreateS3DataSource",
		Query:  CreateS3DataSource_Operation,
		Variables: &__CreateS3DataSourceInput{
			Input: input,
		},
	}
	var err error

	var data CreateS3DataSourceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by CreateSnowflakeDataSource.
const CreateSnowflakeDataSource_Operation = `
mutation CreateSnowflakeDataSource ($input: createSnowflakeDataSourceInput!) {
	createSnowflakeDataSource(input: $input) {
		__typename
		... on DataSourceResponse {
			dataSource {
				... DataSourceData
			}
		}
		... on FailureResponse {
			error {
				... GqlError
			}
		}
	}
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	dataPools {
		nodes {
			id
			accessControlEnabled
		}
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
		... on HttpConnectionSettings {
			basicAuth {
				username
				password
			}
			tables {
				id
				name
				columns {
					name
					type
					nullable
				}
			}
		}
		... on S3ConnectionSettings {
			bucket
			awsAccessKeyId
			tables {
				id
				name
				path
				columns {
					name
					type
					nullable
				}
			}
		}
		... on WebhookConnectionSettings {
			basicAuth {
				username
				password
			}
			columns {
				name
				type
				jsonProperty
				nullable
			}
			tenant
			timestamp
			uniqueId
			webhookUrl
		}
	}
	tables(first: 100) {
		nodes {
			id
			name
			columns(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment GqlError on Error {
	code
	message
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment ColumnData on Column {
	name
	type
	isNullable
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`

func CreateSnowflakeDataSource(
	ctx context.Context,
	client graphql.Client,
	input *CreateSnowflakeDataSourceInput,
) (*CreateSnowflakeDataSourceResponse, error) {
	req := &graphql.Request{
		OpName: "CreateSnowflakeDataSource",
		Query:  CreateSnowflakeDataSource_Operation,
		Variables: &__CreateSnowflakeDataSourceInput{
			Input: input,
		},
	}
	var err error

	var data CreateSnowflakeDataSourceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by CreateSumMetric.
const CreateSumMetric_Operation = `
mutation CreateSumMetric ($input: CreateSumMetricInput) {
	createSumMetric(input: $input) {
		__typename
		metric {
			... MetricData
		}
	}
}
fragment MetricData on Metric {
	... CommonData
	id
	type
	accessControlEnabled
	dataPool {
		... DataPoolData
	}
	dimensions {
		... DimensionData
	}
	timestamp {
		... DimensionData
	}
	measure {
		... DimensionData
	}
	settings {
		__typename
		... on CountMetricSettings {
			__typename
			filters {
				... FilterData
			}
		}
		... on SumMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on CountDistinctMetricSettings {
			__typename
			filters {
				... FilterData
			}
			dimension {
				... DimensionData
			}
		}
		... on AverageMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on MinMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on MaxMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on CustomMetricSettings {
			__typename
			filters {
				... FilterData
			}
			expression
		}
	}
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment DataPoolData on DataPool {
	id
	... CommonData
	dataSource {
		... DataSourceData
	}
	status
	error {
		message
	}
	table
	tenant {
		... TenantData
	}
	timestamp {
		... TimestampData
	}
	columns {
		nodes {
			... DataPoolColumnData
		}
	}
	uniqueId {
		columnName
	}
	syncing {
		... DataPoolSyncingData
	}
	availableMeasures {
		nodes {
			... DataPoolColumnData
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... SyncData
		}
	}
	dataPoolAccessPolicies {
		nodes {
			... DataPoolAccessPolicyData
		}
	}
	accessControlEnabled
}
fragment DimensionData on Dimension {
	columnName
	type
	isNullable
	isUniqueKey
}
fragment FilterData on Filter {
	column
	operator
	value
	and {
		column
		operator
		value
	}
	or {
		column
		operator
		value
	}
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	dataPools {
		nodes {
			id
			accessControlEnabled
		}
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
		... on HttpConnectionSettings {
			basicAuth {
				username
				password
			}
			tables {
				id
				name
				columns {
					name
					type
					nullable
				}
			}
		}
		... on S3ConnectionSettings {
			bucket
			awsAccessKeyId
			tables {
				id
				name
				path
				columns {
					name
					type
					nullable
				}
			}
		}
		... on WebhookConnectionSettings {
			basicAuth {
				username
				password
			}
			columns {
				name
				type
				jsonProperty
				nullable
			}
			tenant
			timestamp
			uniqueId
			webhookUrl
		}
	}
	tables(first: 100) {
		nodes {
			id
			name
			columns(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment TenantData on Tenant {
	columnName
	type
}
fragment TimestampData on Timestamp {
	columnName
	type
}
fragment DataPoolColumnData on DataPoolColumn {
	columnName
	type
	isNullable
}
fragment DataPoolSyncingData on DataPoolSyncing {
	status
	interval
	lastSyncedAt
}
fragment SyncData on Sync {
	id
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment DataPoolAccessPolicyData on DataPoolAccessPolicy {
	id
	... CommonData
	columns
	rows {
		... FilterData
	}
	dataPool {
		id
	}
}
fragment ColumnData on Column {
	name
	type
	isNullable
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`

func CreateSumMetric(
	ctx context.Context,
	client graphql.Client,
	input *CreateSumMetricInput,
) (*CreateSumMetricResponse, error) {
	req := &graphql.Request{
		OpName: "CreateSumMetric",
		Query:  CreateSumMetric_Operation,
		Variables: &__CreateSumMetricInput{
			Input: input,
		},
	}
	var err error

	var data CreateSumMetricResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by CreateWebhookDataSource.
const CreateWebhookDataSource_Operation = `
mutation CreateWebhookDataSource ($input: CreateWebhookDataSourceInput!) {
	createWebhookDataSource(input: $input) {
		dataSource {
			... DataSourceData
		}
	}
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	dataPools {
		nodes {
			id
			accessControlEnabled
		}
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
		... on HttpConnectionSettings {
			basicAuth {
				username
				password
			}
			tables {
				id
				name
				columns {
					name
					type
					nullable
				}
			}
		}
		... on S3ConnectionSettings {
			bucket
			awsAccessKeyId
			tables {
				id
				name
				path
				columns {
					name
					type
					nullable
				}
			}
		}
		... on WebhookConnectionSettings {
			basicAuth {
				username
				password
			}
			columns {
				name
				type
				jsonProperty
				nullable
			}
			tenant
			timestamp
			uniqueId
			webhookUrl
		}
	}
	tables(first: 100) {
		nodes {
			id
			name
			columns(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment ColumnData on Column {
	name
	type
	isNullable
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`

func CreateWebhookDataSource(
	ctx context.Context,
	client graphql.Client,
	input *CreateWebhookDataSourceInput,
) (*CreateWebhookDataSourceResponse, error) {
	req := &graphql.Request{
		OpName: "CreateWebhookDataSource",
		Query:  CreateWebhookDataSource_Operation,
		Variables: &__CreateWebhookDataSourceInput{
			Input: input,
		},
	}
	var err error

	var data CreateWebhookDataSourceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by DataPool.
const DataPool_Operation = `
query DataPool ($id: ID!) {
	dataPool(id: $id) {
		... DataPoolData
	}
}
fragment DataPoolData on DataPool {
	id
	... CommonData
	dataSource {
		... DataSourceData
	}
	status
	error {
		message
	}
	table
	tenant {
		... TenantData
	}
	timestamp {
		... TimestampData
	}
	columns {
		nodes {
			... DataPoolColumnData
		}
	}
	uniqueId {
		columnName
	}
	syncing {
		... DataPoolSyncingData
	}
	availableMeasures {
		nodes {
			... DataPoolColumnData
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... SyncData
		}
	}
	dataPoolAccessPolicies {
		nodes {
			... DataPoolAccessPolicyData
		}
	}
	accessControlEnabled
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	dataPools {
		nodes {
			id
			accessControlEnabled
		}
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
		... on HttpConnectionSettings {
			basicAuth {
				username
				password
			}
			tables {
				id
				name
				columns {
					name
					type
					nullable
				}
			}
		}
		... on S3ConnectionSettings {
			bucket
			awsAccessKeyId
			tables {
				id
				name
				path
				columns {
					name
					type
					nullable
				}
			}
		}
		... on WebhookConnectionSettings {
			basicAuth {
				username
				password
			}
			columns {
				name
				type
				jsonProperty
				nullable
			}
			tenant
			timestamp
			uniqueId
			webhookUrl
		}
	}
	tables(first: 100) {
		nodes {
			id
			name
			columns(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment TenantData on Tenant {
	columnName
	type
}
fragment TimestampData on Timestamp {
	columnName
	type
}
fragment DataPoolColumnData on DataPoolColumn {
	columnName
	type
	isNullable
}
fragment DataPoolSyncingData on DataPoolSyncing {
	status
	interval
	lastSyncedAt
}
fragment SyncData on Sync {
	id
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment DataPoolAccessPolicyData on DataPoolAccessPolicy {
	id
	... CommonData
	columns
	rows {
		... FilterData
	}
	dataPool {
		id
	}
}
fragment ColumnData on Column {
	name
	type
	isNullable
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
fragment FilterData on Filter {
	column
	operator
	value
	and {
		column
		operator
		value
	}
	or {
		column
		operator
		value
	}
}
`

func DataPool(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*DataPoolResponse, error) {
	req := &graphql.Request{
		OpName: "DataPool",
		Query:  DataPool_Operation,
		Variables: &__DataPoolInput{
			Id: id,
		},
	}
	var err error

	var data DataPoolResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by DataPoolAccessPolicy.
const DataPoolAccessPolicy_Operation = `
query DataPoolAccessPolicy ($id: ID!) {
	dataPoolAccessPolicy(id: $id) {
		... DataPoolAccessPolicyData
		applications {
			nodes {
				id
			}
		}
	}
}
fragment DataPoolAccessPolicyData on DataPoolAccessPolicy {
	id
	... CommonData
	columns
	rows {
		... FilterData
	}
	dataPool {
		id
	}
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment FilterData on Filter {
	column
	operator
	value
	and {
		column
		operator
		value
	}
	or {
		column
		operator
		value
	}
}
`

func DataPoolAccessPolicy(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*DataPoolAccessPolicyResponse, error) {
	req := &graphql.Request{
		OpName: "DataPoolAccessPolicy",
		Query:  DataPoolAccessPolicy_Operation,
		Variables: &__DataPoolAccessPolicyInput{
			Id: id,
		},
	}
	var err error

	var data DataPoolAccessPolicyResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by DataPoolByName.
const DataPoolByName_Operation = `
query DataPoolByName ($uniqueName: String!) {
	dataPool: dataPoolByName(uniqueName: $uniqueName) {
		... DataPoolData
	}
}
fragment DataPoolData on DataPool {
	id
	... CommonData
	dataSource {
		... DataSourceData
	}
	status
	error {
		message
	}
	table
	tenant {
		... TenantData
	}
	timestamp {
		... TimestampData
	}
	columns {
		nodes {
			... DataPoolColumnData
		}
	}
	uniqueId {
		columnName
	}
	syncing {
		... DataPoolSyncingData
	}
	availableMeasures {
		nodes {
			... DataPoolColumnData
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... SyncData
		}
	}
	dataPoolAccessPolicies {
		nodes {
			... DataPoolAccessPolicyData
		}
	}
	accessControlEnabled
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	dataPools {
		nodes {
			id
			accessControlEnabled
		}
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
		... on HttpConnectionSettings {
			basicAuth {
				username
				password
			}
			tables {
				id
				name
				columns {
					name
					type
					nullable
				}
			}
		}
		... on S3ConnectionSettings {
			bucket
			awsAccessKeyId
			tables {
				id
				name
				path
				columns {
					name
					type
					nullable
				}
			}
		}
		... on WebhookConnectionSettings {
			basicAuth {
				username
				password
			}
			columns {
				name
				type
				jsonProperty
				nullable
			}
			tenant
			timestamp
			uniqueId
			webhookUrl
		}
	}
	tables(first: 100) {
		nodes {
			id
			name
			columns(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment TenantData on Tenant {
	columnName
	type
}
fragment TimestampData on Timestamp {
	columnName
	type
}
fragment DataPoolColumnData on DataPoolColumn {
	columnName
	type
	isNullable
}
fragment DataPoolSyncingData on DataPoolSyncing {
	status
	interval
	lastSyncedAt
}
fragment SyncData on Sync {
	id
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment DataPoolAccessPolicyData on DataPoolAccessPolicy {
	id
	... CommonData
	columns
	rows {
		... FilterData
	}
	dataPool {
		id
	}
}
fragment ColumnData on Column {
	name
	type
	isNullable
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
fragment FilterData on Filter {
	column
	operator
	value
	and {
		column
		operator
		value
	}
	or {
		column
		operator
		value
	}
}
`

func DataPoolByName(
	ctx context.Context,
	client graphql.Client,
	uniqueName string,
) (*DataPoolByNameResponse, error) {
	req := &graphql.Request{
		OpName: "DataPoolByName",
		Query:  DataPoolByName_Operation,
		Variables: &__DataPoolByNameInput{
			UniqueName: uniqueName,
		},
	}
	var err error

	var data DataPoolByNameResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by DataPools.
const DataPools_Operation = `
query DataPools ($first: Int, $last: Int, $after: String, $before: String) {
	dataPools(first: $first, last: $last, after: $after, before: $before) {
		pageInfo {
			... PageInfoData
		}
		edges {
			node {
				... DataPoolData
			}
		}
	}
}
fragment PageInfoData on PageInfo {
	startCursor
	endCursor
	hasNextPage
	hasPreviousPage
}
fragment DataPoolData on DataPool {
	id
	... CommonData
	dataSource {
		... DataSourceData
	}
	status
	error {
		message
	}
	table
	tenant {
		... TenantData
	}
	timestamp {
		... TimestampData
	}
	columns {
		nodes {
			... DataPoolColumnData
		}
	}
	uniqueId {
		columnName
	}
	syncing {
		... DataPoolSyncingData
	}
	availableMeasures {
		nodes {
			... DataPoolColumnData
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... SyncData
		}
	}
	dataPoolAccessPolicies {
		nodes {
			... DataPoolAccessPolicyData
		}
	}
	accessControlEnabled
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	dataPools {
		nodes {
			id
			accessControlEnabled
		}
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
		... on HttpConnectionSettings {
			basicAuth {
				username
				password
			}
			tables {
				id
				name
				columns {
					name
					type
					nullable
				}
			}
		}
		... on S3ConnectionSettings {
			bucket
			awsAccessKeyId
			tables {
				id
				name
				path
				columns {
					name
					type
					nullable
				}
			}
		}
		... on WebhookConnectionSettings {
			basicAuth {
				username
				password
			}
			columns {
				name
				type
				jsonProperty
				nullable
			}
			tenant
			timestamp
			uniqueId
			webhookUrl
		}
	}
	tables(first: 100) {
		nodes {
			id
			name
			columns(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment TenantData on Tenant {
	columnName
	type
}
fragment TimestampData on Timestamp {
	columnName
	type
}
fragment DataPoolColumnData on DataPoolColumn {
	columnName
	type
	isNullable
}
fragment DataPoolSyncingData on DataPoolSyncing {
	status
	interval
	lastSyncedAt
}
fragment SyncData on Sync {
	id
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment DataPoolAccessPolicyData on DataPoolAccessPolicy {
	id
	... CommonData
	columns
	rows {
		... FilterData
	}
	dataPool {
		id
	}
}
fragment ColumnData on Column {
	name
	type
	isNullable
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
fragment FilterData on Filter {
	column
	operator
	value
	and {
		column
		operator
		value
	}
	or {
		column
		operator
		value
	}
}
`

func DataPools(
	ctx context.Context,
	client graphql.Client,
	first *int,
	last *int,
	after *string,
	before *string,
) (*DataPoolsResponse, error) {
	req := &graphql.Request{
		OpName: "DataPools",
		Query:  DataPools_Operation,
		Variables: &__DataPoolsInput{
			First:  first,
			Last:   last,
			After:  after,
			Before: before,
		},
	}
	var err error

	var data DataPoolsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by DataSource.
const DataSource_Operation = `
query DataSource ($id: ID!) {
	dataSource(id: $id) {
		... DataSourceData
	}
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	dataPools {
		nodes {
			id
			accessControlEnabled
		}
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
		... on HttpConnectionSettings {
			basicAuth {
				username
				password
			}
			tables {
				id
				name
				columns {
					name
					type
					nullable
				}
			}
		}
		... on S3ConnectionSettings {
			bucket
			awsAccessKeyId
			tables {
				id
				name
				path
				columns {
					name
					type
					nullable
				}
			}
		}
		... on WebhookConnectionSettings {
			basicAuth {
				username
				password
			}
			columns {
				name
				type
				jsonProperty
				nullable
			}
			tenant
			timestamp
			uniqueId
			webhookUrl
		}
	}
	tables(first: 100) {
		nodes {
			id
			name
			columns(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment ColumnData on Column {
	name
	type
	isNullable
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`

func DataSource(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*DataSourceResponse, error) {
	req := &graphql.Request{
		OpName: "DataSource",
		Query:  DataSource_Operation,
		Variables: &__DataSourceInput{
			Id: id,
		},
	}
	var err error

	var data DataSourceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by DataSourceByName.
const DataSourceByName_Operation = `
query DataSourceByName ($uniqueName: String!) {
	dataSource: dataSourceByName(uniqueName: $uniqueName) {
		... DataSourceData
	}
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	dataPools {
		nodes {
			id
			accessControlEnabled
		}
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
		... on HttpConnectionSettings {
			basicAuth {
				username
				password
			}
			tables {
				id
				name
				columns {
					name
					type
					nullable
				}
			}
		}
		... on S3ConnectionSettings {
			bucket
			awsAccessKeyId
			tables {
				id
				name
				path
				columns {
					name
					type
					nullable
				}
			}
		}
		... on WebhookConnectionSettings {
			basicAuth {
				username
				password
			}
			columns {
				name
				type
				jsonProperty
				nullable
			}
			tenant
			timestamp
			uniqueId
			webhookUrl
		}
	}
	tables(first: 100) {
		nodes {
			id
			name
			columns(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment ColumnData on Column {
	name
	type
	isNullable
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`

func DataSourceByName(
	ctx context.Context,
	client graphql.Client,
	uniqueName string,
) (*DataSourceByNameResponse, error) {
	req := &graphql.Request{
		OpName: "DataSourceByName",
		Query:  DataSourceByName_Operation,
		Variables: &__DataSourceByNameInput{
			UniqueName: uniqueName,
		},
	}
	var err error

	var data DataSourceByNameResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by DataSources.
const DataSources_Operation = `
query DataSources ($first: Int, $last: Int, $after: String, $before: String) {
	dataSources(first: $first, last: $last, after: $after, before: $before) {
		pageInfo {
			... PageInfoData
		}
		edges {
			node {
				... DataSourceData
			}
		}
	}
}
fragment PageInfoData on PageInfo {
	startCursor
	endCursor
	hasNextPage
	hasPreviousPage
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	dataPools {
		nodes {
			id
			accessControlEnabled
		}
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
		... on HttpConnectionSettings {
			basicAuth {
				username
				password
			}
			tables {
				id
				name
				columns {
					name
					type
					nullable
				}
			}
		}
		... on S3ConnectionSettings {
			bucket
			awsAccessKeyId
			tables {
				id
				name
				path
				columns {
					name
					type
					nullable
				}
			}
		}
		... on WebhookConnectionSettings {
			basicAuth {
				username
				password
			}
			columns {
				name
				type
				jsonProperty
				nullable
			}
			tenant
			timestamp
			uniqueId
			webhookUrl
		}
	}
	tables(first: 100) {
		nodes {
			id
			name
			columns(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment ColumnData on Column {
	name
	type
	isNullable
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`

func DataSources(
	ctx context.Context,
	client graphql.Client,
	first *int,
	last *int,
	after *string,
	before *string,
) (*DataSourcesResponse, error) {
	req := &graphql.Request{
		OpName: "DataSources",
		Query:  DataSources_Operation,
		Variables: &__DataSourcesInput{
			First:  first,
			Last:   last,
			After:  after,
			Before: before,
		},
	}
	var err error

	var data DataSourcesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by DeleteDataPool.
const DeleteDataPool_Operation = `
mutation DeleteDataPool ($id: ID!) {
	deleteDataPool(id: $id)
}
`

func DeleteDataPool(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*DeleteDataPoolResponse, error) {
	req := &graphql.Request{
		OpName: "DeleteDataPool",
		Query:  DeleteDataPool_Operation,
		Variables: &__DeleteDataPoolInput{
			Id: id,
		},
	}
	var err error

	var data DeleteDataPoolResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by DeleteDataPoolAccessPolicy.
const DeleteDataPoolAccessPolicy_Operation = `
mutation DeleteDataPoolAccessPolicy ($id: ID!) {
	deleteDataPoolAccessPolicy(id: $id)
}
`

func DeleteDataPoolAccessPolicy(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*DeleteDataPoolAccessPolicyResponse, error) {
	req := &graphql.Request{
		OpName: "DeleteDataPoolAccessPolicy",
		Query:  DeleteDataPoolAccessPolicy_Operation,
		Variables: &__DeleteDataPoolAccessPolicyInput{
			Id: id,
		},
	}
	var err error

	var data DeleteDataPoolAccessPolicyResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by DeleteDataPoolByName.
const DeleteDataPoolByName_Operation = `
mutation DeleteDataPoolByName ($uniqueName: String!) {
	deleteDataPoolByName(uniqueName: $uniqueName)
}
`

func DeleteDataPoolByName(
	ctx context.Context,
	client graphql.Client,
	uniqueName string,
) (*DeleteDataPoolByNameResponse, error) {
	req := &graphql.Request{
		OpName: "DeleteDataPoolByName",
		Query:  DeleteDataPoolByName_Operation,
		Variables: &__DeleteDataPoolByNameInput{
			UniqueName: uniqueName,
		},
	}
	var err error

	var data DeleteDataPoolByNameResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by DeleteDataSource.
const DeleteDataSource_Operation = `
mutation DeleteDataSource ($id: ID!) {
	deleteDataSource(id: $id)
}
`

func DeleteDataSource(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*DeleteDataSourceResponse, error) {
	req := &graphql.Request{
		OpName: "DeleteDataSource",
		Query:  DeleteDataSource_Operation,
		Variables: &__DeleteDataSourceInput{
			Id: id,
		},
	}
	var err error

	var data DeleteDataSourceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by DeleteDataSourceByName.
const DeleteDataSourceByName_Operation = `
mutation DeleteDataSourceByName ($uniqueName: String!) {
	deleteDataSourceByName(uniqueName: $uniqueName)
}
`

func DeleteDataSourceByName(
	ctx context.Context,
	client graphql.Client,
	uniqueName string,
) (*DeleteDataSourceByNameResponse, error) {
	req := &graphql.Request{
		OpName: "DeleteDataSourceByName",
		Query:  DeleteDataSourceByName_Operation,
		Variables: &__DeleteDataSourceByNameInput{
			UniqueName: uniqueName,
		},
	}
	var err error

	var data DeleteDataSourceByNameResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by DeleteMaterializedView.
const DeleteMaterializedView_Operation = `
mutation DeleteMaterializedView ($id: ID!) {
	deleteMaterializedView(id: $id)
}
`

func DeleteMaterializedView(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*DeleteMaterializedViewResponse, error) {
	req := &graphql.Request{
		OpName: "DeleteMaterializedView",
		Query:  DeleteMaterializedView_Operation,
		Variables: &__DeleteMaterializedViewInput{
			Id: id,
		},
	}
	var err error

	var data DeleteMaterializedViewResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by DeleteMetric.
const DeleteMetric_Operation = `
mutation DeleteMetric ($id: ID!) {
	deleteMetric(id: $id)
}
`

func DeleteMetric(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*DeleteMetricResponse, error) {
	req := &graphql.Request{
		OpName: "DeleteMetric",
		Query:  DeleteMetric_Operation,
		Variables: &__DeleteMetricInput{
			Id: id,
		},
	}
	var err error

	var data DeleteMetricResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by DeleteMetricByName.
const DeleteMetricByName_Operation = `
mutation DeleteMetricByName ($uniqueName: String!) {
	deleteMetricByName(uniqueName: $uniqueName)
}
`

func DeleteMetricByName(
	ctx context.Context,
	client graphql.Client,
	uniqueName string,
) (*DeleteMetricByNameResponse, error) {
	req := &graphql.Request{
		OpName: "DeleteMetricByName",
		Query:  DeleteMetricByName_Operation,
		Variables: &__DeleteMetricByNameInput{
			UniqueName: uniqueName,
		},
	}
	var err error

	var data DeleteMetricByNameResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by DeletePolicy.
const DeletePolicy_Operation = `
mutation DeletePolicy ($id: ID!) {
	deletePolicy(id: $id)
}
`

func DeletePolicy(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*DeletePolicyResponse, error) {
	req := &graphql.Request{
		OpName: "DeletePolicy",
		Query:  DeletePolicy_Operation,
		Variables: &__DeletePolicyInput{
			Id: id,
		},
	}
	var err error

	var data DeletePolicyResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by MaterializedView.
const MaterializedView_Operation = `
query MaterializedView ($id: ID!) {
	materializedView(id: $id) {
		... MaterializedViewData
	}
}
fragment MaterializedViewData on MaterializedView {
	id
	... CommonData
	sql
	destination {
		id
	}
	source {
		id
	}
	others {
		id
	}
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
`

func MaterializedView(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*MaterializedViewResponse, error) {
	req := &graphql.Request{
		OpName: "MaterializedView",
		Query:  MaterializedView_Operation,
		Variables: &__MaterializedViewInput{
			Id: id,
		},
	}
	var err error

	var data MaterializedViewResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by Metric.
const Metric_Operation = `
query Metric ($id: ID!) {
	metric(id: $id) {
		... MetricData
	}
}
fragment MetricData on Metric {
	... CommonData
	id
	type
	accessControlEnabled
	dataPool {
		... DataPoolData
	}
	dimensions {
		... DimensionData
	}
	timestamp {
		... DimensionData
	}
	measure {
		... DimensionData
	}
	settings {
		__typename
		... on CountMetricSettings {
			__typename
			filters {
				... FilterData
			}
		}
		... on SumMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on CountDistinctMetricSettings {
			__typename
			filters {
				... FilterData
			}
			dimension {
				... DimensionData
			}
		}
		... on AverageMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on MinMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on MaxMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on CustomMetricSettings {
			__typename
			filters {
				... FilterData
			}
			expression
		}
	}
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment DataPoolData on DataPool {
	id
	... CommonData
	dataSource {
		... DataSourceData
	}
	status
	error {
		message
	}
	table
	tenant {
		... TenantData
	}
	timestamp {
		... TimestampData
	}
	columns {
		nodes {
			... DataPoolColumnData
		}
	}
	uniqueId {
		columnName
	}
	syncing {
		... DataPoolSyncingData
	}
	availableMeasures {
		nodes {
			... DataPoolColumnData
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... SyncData
		}
	}
	dataPoolAccessPolicies {
		nodes {
			... DataPoolAccessPolicyData
		}
	}
	accessControlEnabled
}
fragment DimensionData on Dimension {
	columnName
	type
	isNullable
	isUniqueKey
}
fragment FilterData on Filter {
	column
	operator
	value
	and {
		column
		operator
		value
	}
	or {
		column
		operator
		value
	}
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	dataPools {
		nodes {
			id
			accessControlEnabled
		}
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
		... on HttpConnectionSettings {
			basicAuth {
				username
				password
			}
			tables {
				id
				name
				columns {
					name
					type
					nullable
				}
			}
		}
		... on S3ConnectionSettings {
			bucket
			awsAccessKeyId
			tables {
				id
				name
				path
				columns {
					name
					type
					nullable
				}
			}
		}
		... on WebhookConnectionSettings {
			basicAuth {
				username
				password
			}
			columns {
				name
				type
				jsonProperty
				nullable
			}
			tenant
			timestamp
			uniqueId
			webhookUrl
		}
	}
	tables(first: 100) {
		nodes {
			id
			name
			columns(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment TenantData on Tenant {
	columnName
	type
}
fragment TimestampData on Timestamp {
	columnName
	type
}
fragment DataPoolColumnData on DataPoolColumn {
	columnName
	type
	isNullable
}
fragment DataPoolSyncingData on DataPoolSyncing {
	status
	interval
	lastSyncedAt
}
fragment SyncData on Sync {
	id
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment DataPoolAccessPolicyData on DataPoolAccessPolicy {
	id
	... CommonData
	columns
	rows {
		... FilterData
	}
	dataPool {
		id
	}
}
fragment ColumnData on Column {
	name
	type
	isNullable
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`

func Metric(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*MetricResponse, error) {
	req := &graphql.Request{
		OpName: "Metric",
		Query:  Metric_Operation,
		Variables: &__MetricInput{
			Id: id,
		},
	}
	var err error

	var data MetricResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by MetricByName.
const MetricByName_Operation = `
query MetricByName ($uniqueName: String!) {
	metric: metricByName(uniqueName: $uniqueName) {
		... MetricData
	}
}
fragment MetricData on Metric {
	... CommonData
	id
	type
	accessControlEnabled
	dataPool {
		... DataPoolData
	}
	dimensions {
		... DimensionData
	}
	timestamp {
		... DimensionData
	}
	measure {
		... DimensionData
	}
	settings {
		__typename
		... on CountMetricSettings {
			__typename
			filters {
				... FilterData
			}
		}
		... on SumMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on CountDistinctMetricSettings {
			__typename
			filters {
				... FilterData
			}
			dimension {
				... DimensionData
			}
		}
		... on AverageMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on MinMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on MaxMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on CustomMetricSettings {
			__typename
			filters {
				... FilterData
			}
			expression
		}
	}
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment DataPoolData on DataPool {
	id
	... CommonData
	dataSource {
		... DataSourceData
	}
	status
	error {
		message
	}
	table
	tenant {
		... TenantData
	}
	timestamp {
		... TimestampData
	}
	columns {
		nodes {
			... DataPoolColumnData
		}
	}
	uniqueId {
		columnName
	}
	syncing {
		... DataPoolSyncingData
	}
	availableMeasures {
		nodes {
			... DataPoolColumnData
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... SyncData
		}
	}
	dataPoolAccessPolicies {
		nodes {
			... DataPoolAccessPolicyData
		}
	}
	accessControlEnabled
}
fragment DimensionData on Dimension {
	columnName
	type
	isNullable
	isUniqueKey
}
fragment FilterData on Filter {
	column
	operator
	value
	and {
		column
		operator
		value
	}
	or {
		column
		operator
		value
	}
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	dataPools {
		nodes {
			id
			accessControlEnabled
		}
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
		... on HttpConnectionSettings {
			basicAuth {
				username
				password
			}
			tables {
				id
				name
				columns {
					name
					type
					nullable
				}
			}
		}
		... on S3ConnectionSettings {
			bucket
			awsAccessKeyId
			tables {
				id
				name
				path
				columns {
					name
					type
					nullable
				}
			}
		}
		... on WebhookConnectionSettings {
			basicAuth {
				username
				password
			}
			columns {
				name
				type
				jsonProperty
				nullable
			}
			tenant
			timestamp
			uniqueId
			webhookUrl
		}
	}
	tables(first: 100) {
		nodes {
			id
			name
			columns(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment TenantData on Tenant {
	columnName
	type
}
fragment TimestampData on Timestamp {
	columnName
	type
}
fragment DataPoolColumnData on DataPoolColumn {
	columnName
	type
	isNullable
}
fragment DataPoolSyncingData on DataPoolSyncing {
	status
	interval
	lastSyncedAt
}
fragment SyncData on Sync {
	id
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment DataPoolAccessPolicyData on DataPoolAccessPolicy {
	id
	... CommonData
	columns
	rows {
		... FilterData
	}
	dataPool {
		id
	}
}
fragment ColumnData on Column {
	name
	type
	isNullable
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`

func MetricByName(
	ctx context.Context,
	client graphql.Client,
	uniqueName string,
) (*MetricByNameResponse, error) {
	req := &graphql.Request{
		OpName: "MetricByName",
		Query:  MetricByName_Operation,
		Variables: &__MetricByNameInput{
			UniqueName: uniqueName,
		},
	}
	var err error

	var data MetricByNameResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by Metrics.
const Metrics_Operation = `
query Metrics ($first: Int, $last: Int, $after: String, $before: String) {
	metrics(first: $first, last: $last, after: $after, before: $before) {
		pageInfo {
			... PageInfoData
		}
		nodes {
			... MetricData
		}
		edges {
			cursor
			node {
				... MetricData
			}
		}
	}
}
fragment PageInfoData on PageInfo {
	startCursor
	endCursor
	hasNextPage
	hasPreviousPage
}
fragment MetricData on Metric {
	... CommonData
	id
	type
	accessControlEnabled
	dataPool {
		... DataPoolData
	}
	dimensions {
		... DimensionData
	}
	timestamp {
		... DimensionData
	}
	measure {
		... DimensionData
	}
	settings {
		__typename
		... on CountMetricSettings {
			__typename
			filters {
				... FilterData
			}
		}
		... on SumMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on CountDistinctMetricSettings {
			__typename
			filters {
				... FilterData
			}
			dimension {
				... DimensionData
			}
		}
		... on AverageMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on MinMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on MaxMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on CustomMetricSettings {
			__typename
			filters {
				... FilterData
			}
			expression
		}
	}
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment DataPoolData on DataPool {
	id
	... CommonData
	dataSource {
		... DataSourceData
	}
	status
	error {
		message
	}
	table
	tenant {
		... TenantData
	}
	timestamp {
		... TimestampData
	}
	columns {
		nodes {
			... DataPoolColumnData
		}
	}
	uniqueId {
		columnName
	}
	syncing {
		... DataPoolSyncingData
	}
	availableMeasures {
		nodes {
			... DataPoolColumnData
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... SyncData
		}
	}
	dataPoolAccessPolicies {
		nodes {
			... DataPoolAccessPolicyData
		}
	}
	accessControlEnabled
}
fragment DimensionData on Dimension {
	columnName
	type
	isNullable
	isUniqueKey
}
fragment FilterData on Filter {
	column
	operator
	value
	and {
		column
		operator
		value
	}
	or {
		column
		operator
		value
	}
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	dataPools {
		nodes {
			id
			accessControlEnabled
		}
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
		... on HttpConnectionSettings {
			basicAuth {
				username
				password
			}
			tables {
				id
				name
				columns {
					name
					type
					nullable
				}
			}
		}
		... on S3ConnectionSettings {
			bucket
			awsAccessKeyId
			tables {
				id
				name
				path
				columns {
					name
					type
					nullable
				}
			}
		}
		... on WebhookConnectionSettings {
			basicAuth {
				username
				password
			}
			columns {
				name
				type
				jsonProperty
				nullable
			}
			tenant
			timestamp
			uniqueId
			webhookUrl
		}
	}
	tables(first: 100) {
		nodes {
			id
			name
			columns(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment TenantData on Tenant {
	columnName
	type
}
fragment TimestampData on Timestamp {
	columnName
	type
}
fragment DataPoolColumnData on DataPoolColumn {
	columnName
	type
	isNullable
}
fragment DataPoolSyncingData on DataPoolSyncing {
	status
	interval
	lastSyncedAt
}
fragment SyncData on Sync {
	id
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment DataPoolAccessPolicyData on DataPoolAccessPolicy {
	id
	... CommonData
	columns
	rows {
		... FilterData
	}
	dataPool {
		id
	}
}
fragment ColumnData on Column {
	name
	type
	isNullable
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`

func Metrics(
	ctx context.Context,
	client graphql.Client,
	first *int,
	last *int,
	after *string,
	before *string,
) (*MetricsResponse, error) {
	req := &graphql.Request{
		OpName: "Metrics",
		Query:  Metrics_Operation,
		Variables: &__MetricsInput{
			First:  first,
			Last:   last,
			After:  after,
			Before: before,
		},
	}
	var err error

	var data MetricsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by ModifyDataPool.
const ModifyDataPool_Operation = `
mutation ModifyDataPool ($input: modifyDataPoolInput!) {
	modifyDataPool(input: $input) {
		__typename
		... on DataPoolResponse {
			dataPool {
				... DataPoolData
			}
		}
		... on FailureResponse {
			error {
				... GqlError
			}
		}
	}
}
fragment DataPoolData on DataPool {
	id
	... CommonData
	dataSource {
		... DataSourceData
	}
	status
	error {
		message
	}
	table
	tenant {
		... TenantData
	}
	timestamp {
		... TimestampData
	}
	columns {
		nodes {
			... DataPoolColumnData
		}
	}
	uniqueId {
		columnName
	}
	syncing {
		... DataPoolSyncingData
	}
	availableMeasures {
		nodes {
			... DataPoolColumnData
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... SyncData
		}
	}
	dataPoolAccessPolicies {
		nodes {
			... DataPoolAccessPolicyData
		}
	}
	accessControlEnabled
}
fragment GqlError on Error {
	code
	message
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	dataPools {
		nodes {
			id
			accessControlEnabled
		}
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
		... on HttpConnectionSettings {
			basicAuth {
				username
				password
			}
			tables {
				id
				name
				columns {
					name
					type
					nullable
				}
			}
		}
		... on S3ConnectionSettings {
			bucket
			awsAccessKeyId
			tables {
				id
				name
				path
				columns {
					name
					type
					nullable
				}
			}
		}
		... on WebhookConnectionSettings {
			basicAuth {
				username
				password
			}
			columns {
				name
				type
				jsonProperty
				nullable
			}
			tenant
			timestamp
			uniqueId
			webhookUrl
		}
	}
	tables(first: 100) {
		nodes {
			id
			name
			columns(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment TenantData on Tenant {
	columnName
	type
}
fragment TimestampData on Timestamp {
	columnName
	type
}
fragment DataPoolColumnData on DataPoolColumn {
	columnName
	type
	isNullable
}
fragment DataPoolSyncingData on DataPoolSyncing {
	status
	interval
	lastSyncedAt
}
fragment SyncData on Sync {
	id
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment DataPoolAccessPolicyData on DataPoolAccessPolicy {
	id
	... CommonData
	columns
	rows {
		... FilterData
	}
	dataPool {
		id
	}
}
fragment ColumnData on Column {
	name
	type
	isNullable
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
fragment FilterData on Filter {
	column
	operator
	value
	and {
		column
		operator
		value
	}
	or {
		column
		operator
		value
	}
}
`

func ModifyDataPool(
	ctx context.Context,
	client graphql.Client,
	input *ModifyDataPoolInput,
) (*ModifyDataPoolResponse, error) {
	req := &graphql.Request{
		OpName: "ModifyDataPool",
		Query:  ModifyDataPool_Operation,
		Variables: &__ModifyDataPoolInput{
			Input: input,
		},
	}
	var err error

	var data ModifyDataPoolResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by ModifyDataPoolAccessPolicy.
const ModifyDataPoolAccessPolicy_Operation = `
mutation ModifyDataPoolAccessPolicy ($input: ModifyDataPoolAccessPolicyInput!) {
	modifyDataPoolAccessPolicy(input: $input) {
		dataPoolAccessPolicy {
			... DataPoolAccessPolicyData
		}
	}
}
fragment DataPoolAccessPolicyData on DataPoolAccessPolicy {
	id
	... CommonData
	columns
	rows {
		... FilterData
	}
	dataPool {
		id
	}
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment FilterData on Filter {
	column
	operator
	value
	and {
		column
		operator
		value
	}
	or {
		column
		operator
		value
	}
}
`

func ModifyDataPoolAccessPolicy(
	ctx context.Context,
	client graphql.Client,
	input *ModifyDataPoolAccessPolicyInput,
) (*ModifyDataPoolAccessPolicyResponse, error) {
	req := &graphql.Request{
		OpName: "ModifyDataPoolAccessPolicy",
		Query:  ModifyDataPoolAccessPolicy_Operation,
		Variables: &__ModifyDataPoolAccessPolicyInput{
			Input: input,
		},
	}
	var err error

	var data ModifyDataPoolAccessPolicyResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by ModifyHttpDataSource.
const ModifyHttpDataSource_Operation = `
mutation ModifyHttpDataSource ($input: ModifyHttpDataSourceInput!) {
	modifyHttpDataSource(input: $input) {
		dataSource {
			... DataSourceData
		}
	}
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	dataPools {
		nodes {
			id
			accessControlEnabled
		}
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
		... on HttpConnectionSettings {
			basicAuth {
				username
				password
			}
			tables {
				id
				name
				columns {
					name
					type
					nullable
				}
			}
		}
		... on S3ConnectionSettings {
			bucket
			awsAccessKeyId
			tables {
				id
				name
				path
				columns {
					name
					type
					nullable
				}
			}
		}
		... on WebhookConnectionSettings {
			basicAuth {
				username
				password
			}
			columns {
				name
				type
				jsonProperty
				nullable
			}
			tenant
			timestamp
			uniqueId
			webhookUrl
		}
	}
	tables(first: 100) {
		nodes {
			id
			name
			columns(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment ColumnData on Column {
	name
	type
	isNullable
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`

func ModifyHttpDataSource(
	ctx context.Context,
	client graphql.Client,
	input *ModifyHttpDataSourceInput,
) (*ModifyHttpDataSourceResponse, error) {
	req := &graphql.Request{
		OpName: "ModifyHttpDataSource",
		Query:  ModifyHttpDataSource_Operation,
		Variables: &__ModifyHttpDataSourceInput{
			Input: input,
		},
	}
	var err error

	var data ModifyHttpDataSourceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by ModifyMaterializedView.
const ModifyMaterializedView_Operation = `
mutation ModifyMaterializedView ($input: ModifyMaterializedViewInput!) {
	modifyMaterializedView(input: $input) {
		materializedView {
			... MaterializedViewData
		}
	}
}
fragment MaterializedViewData on MaterializedView {
	id
	... CommonData
	sql
	destination {
		id
	}
	source {
		id
	}
	others {
		id
	}
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
`

func ModifyMaterializedView(
	ctx context.Context,
	client graphql.Client,
	input *ModifyMaterializedViewInput,
) (*ModifyMaterializedViewResponse, error) {
	req := &graphql.Request{
		OpName: "ModifyMaterializedView",
		Query:  ModifyMaterializedView_Operation,
		Variables: &__ModifyMaterializedViewInput{
			Input: input,
		},
	}
	var err error

	var data ModifyMaterializedViewResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by ModifyMetric.
const ModifyMetric_Operation = `
mutation ModifyMetric ($input: ModifyMetricInput) {
	modifyMetric(input: $input) {
		__typename
		metric {
			... MetricData
		}
	}
}
fragment MetricData on Metric {
	... CommonData
	id
	type
	accessControlEnabled
	dataPool {
		... DataPoolData
	}
	dimensions {
		... DimensionData
	}
	timestamp {
		... DimensionData
	}
	measure {
		... DimensionData
	}
	settings {
		__typename
		... on CountMetricSettings {
			__typename
			filters {
				... FilterData
			}
		}
		... on SumMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on CountDistinctMetricSettings {
			__typename
			filters {
				... FilterData
			}
			dimension {
				... DimensionData
			}
		}
		... on AverageMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on MinMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on MaxMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on CustomMetricSettings {
			__typename
			filters {
				... FilterData
			}
			expression
		}
	}
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment DataPoolData on DataPool {
	id
	... CommonData
	dataSource {
		... DataSourceData
	}
	status
	error {
		message
	}
	table
	tenant {
		... TenantData
	}
	timestamp {
		... TimestampData
	}
	columns {
		nodes {
			... DataPoolColumnData
		}
	}
	uniqueId {
		columnName
	}
	syncing {
		... DataPoolSyncingData
	}
	availableMeasures {
		nodes {
			... DataPoolColumnData
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... SyncData
		}
	}
	dataPoolAccessPolicies {
		nodes {
			... DataPoolAccessPolicyData
		}
	}
	accessControlEnabled
}
fragment DimensionData on Dimension {
	columnName
	type
	isNullable
	isUniqueKey
}
fragment FilterData on Filter {
	column
	operator
	value
	and {
		column
		operator
		value
	}
	or {
		column
		operator
		value
	}
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	dataPools {
		nodes {
			id
			accessControlEnabled
		}
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
		... on HttpConnectionSettings {
			basicAuth {
				username
				password
			}
			tables {
				id
				name
				columns {
					name
					type
					nullable
				}
			}
		}
		... on S3ConnectionSettings {
			bucket
			awsAccessKeyId
			tables {
				id
				name
				path
				columns {
					name
					type
					nullable
				}
			}
		}
		... on WebhookConnectionSettings {
			basicAuth {
				username
				password
			}
			columns {
				name
				type
				jsonProperty
				nullable
			}
			tenant
			timestamp
			uniqueId
			webhookUrl
		}
	}
	tables(first: 100) {
		nodes {
			id
			name
			columns(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment TenantData on Tenant {
	columnName
	type
}
fragment TimestampData on Timestamp {
	columnName
	type
}
fragment DataPoolColumnData on DataPoolColumn {
	columnName
	type
	isNullable
}
fragment DataPoolSyncingData on DataPoolSyncing {
	status
	interval
	lastSyncedAt
}
fragment SyncData on Sync {
	id
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment DataPoolAccessPolicyData on DataPoolAccessPolicy {
	id
	... CommonData
	columns
	rows {
		... FilterData
	}
	dataPool {
		id
	}
}
fragment ColumnData on Column {
	name
	type
	isNullable
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`

func ModifyMetric(
	ctx context.Context,
	client graphql.Client,
	input *ModifyMetricInput,
) (*ModifyMetricResponse, error) {
	req := &graphql.Request{
		OpName: "ModifyMetric",
		Query:  ModifyMetric_Operation,
		Variables: &__ModifyMetricInput{
			Input: input,
		},
	}
	var err error

	var data ModifyMetricResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by ModifyPolicy.
const ModifyPolicy_Operation = `
mutation ModifyPolicy ($input: ModifyPolicyInput!) {
	modifyPolicy(input: $input) {
		policy {
			... PolicyData
		}
	}
}
fragment PolicyData on Policy {
	id
	type
	metric {
		id
	}
	application {
		id
	}
}
`

func ModifyPolicy(
	ctx context.Context,
	client graphql.Client,
	input *ModifyPolicyInput,
) (*ModifyPolicyResponse, error) {
	req := &graphql.Request{
		OpName: "ModifyPolicy",
		Query:  ModifyPolicy_Operation,
		Variables: &__ModifyPolicyInput{
			Input: input,
		},
	}
	var err error

	var data ModifyPolicyResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by ModifyS3DataSource.
const ModifyS3DataSource_Operation = `
mutation ModifyS3DataSource ($input: ModifyS3DataSourceInput!) {
	modifyS3DataSource(input: $input) {
		dataSource {
			... DataSourceData
		}
	}
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	dataPools {
		nodes {
			id
			accessControlEnabled
		}
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
		... on HttpConnectionSettings {
			basicAuth {
				username
				password
			}
			tables {
				id
				name
				columns {
					name
					type
					nullable
				}
			}
		}
		... on S3ConnectionSettings {
			bucket
			awsAccessKeyId
			tables {
				id
				name
				path
				columns {
					name
					type
					nullable
				}
			}
		}
		... on WebhookConnectionSettings {
			basicAuth {
				username
				password
			}
			columns {
				name
				type
				jsonProperty
				nullable
			}
			tenant
			timestamp
			uniqueId
			webhookUrl
		}
	}
	tables(first: 100) {
		nodes {
			id
			name
			columns(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment ColumnData on Column {
	name
	type
	isNullable
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`

func ModifyS3DataSource(
	ctx context.Context,
	client graphql.Client,
	input *ModifyS3DataSourceInput,
) (*ModifyS3DataSourceResponse, error) {
	req := &graphql.Request{
		OpName: "ModifyS3DataSource",
		Query:  ModifyS3DataSource_Operation,
		Variables: &__ModifyS3DataSourceInput{
			Input: input,
		},
	}
	var err error

	var data ModifyS3DataSourceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by ModifySnowflakeDataSource.
const ModifySnowflakeDataSource_Operation = `
mutation ModifySnowflakeDataSource ($input: modifySnowflakeDataSourceInput!) {
	modifySnowflakeDataSource(input: $input) {
		__typename
		... on DataSourceResponse {
			dataSource {
				... DataSourceData
			}
		}
		... on FailureResponse {
			error {
				... GqlError
			}
		}
	}
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	dataPools {
		nodes {
			id
			accessControlEnabled
		}
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
		... on HttpConnectionSettings {
			basicAuth {
				username
				password
			}
			tables {
				id
				name
				columns {
					name
					type
					nullable
				}
			}
		}
		... on S3ConnectionSettings {
			bucket
			awsAccessKeyId
			tables {
				id
				name
				path
				columns {
					name
					type
					nullable
				}
			}
		}
		... on WebhookConnectionSettings {
			basicAuth {
				username
				password
			}
			columns {
				name
				type
				jsonProperty
				nullable
			}
			tenant
			timestamp
			uniqueId
			webhookUrl
		}
	}
	tables(first: 100) {
		nodes {
			id
			name
			columns(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment GqlError on Error {
	code
	message
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment ColumnData on Column {
	name
	type
	isNullable
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`

func ModifySnowflakeDataSource(
	ctx context.Context,
	client graphql.Client,
	input *ModifySnowflakeDataSourceInput,
) (*ModifySnowflakeDataSourceResponse, error) {
	req := &graphql.Request{
		OpName: "ModifySnowflakeDataSource",
		Query:  ModifySnowflakeDataSource_Operation,
		Variables: &__ModifySnowflakeDataSourceInput{
			Input: input,
		},
	}
	var err error

	var data ModifySnowflakeDataSourceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by ModifyWebhookDataSource.
const ModifyWebhookDataSource_Operation = `
mutation ModifyWebhookDataSource ($input: ModifyWebhookDataSourceInput!) {
	modifyWebhookDataSource(input: $input) {
		dataSource {
			... DataSourceData
		}
	}
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	dataPools {
		nodes {
			id
			accessControlEnabled
		}
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
		... on HttpConnectionSettings {
			basicAuth {
				username
				password
			}
			tables {
				id
				name
				columns {
					name
					type
					nullable
				}
			}
		}
		... on S3ConnectionSettings {
			bucket
			awsAccessKeyId
			tables {
				id
				name
				path
				columns {
					name
					type
					nullable
				}
			}
		}
		... on WebhookConnectionSettings {
			basicAuth {
				username
				password
			}
			columns {
				name
				type
				jsonProperty
				nullable
			}
			tenant
			timestamp
			uniqueId
			webhookUrl
		}
	}
	tables(first: 100) {
		nodes {
			id
			name
			columns(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment ColumnData on Column {
	name
	type
	isNullable
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`

func ModifyWebhookDataSource(
	ctx context.Context,
	client graphql.Client,
	input *ModifyWebhookDataSourceInput,
) (*ModifyWebhookDataSourceResponse, error) {
	req := &graphql.Request{
		OpName: "ModifyWebhookDataSource",
		Query:  ModifyWebhookDataSource_Operation,
		Variables: &__ModifyWebhookDataSourceInput{
			Input: input,
		},
	}
	var err error

	var data ModifyWebhookDataSourceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by Policy.
const Policy_Operation = `
query Policy ($id: ID!) {
	policy(id: $id) {
		... PolicyData
	}
}
fragment PolicyData on Policy {
	id
	type
	metric {
		id
	}
	application {
		id
	}
}
`

func Policy(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*PolicyResponse, error) {
	req := &graphql.Request{
		OpName: "Policy",
		Query:  Policy_Operation,
		Variables: &__PolicyInput{
			Id: id,
		},
	}
	var err error

	var data PolicyResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by UnAssignDataPoolAccessPolicy.
const UnAssignDataPoolAccessPolicy_Operation = `
mutation UnAssignDataPoolAccessPolicy ($dataPoolAccessPolicy: ID!, $application: ID!) {
	unAssignDataPoolAccessPolicyFromApplication(dataPoolAccessPolicy: $dataPoolAccessPolicy, application: $application)
}
`

func UnAssignDataPoolAccessPolicy(
	ctx context.Context,
	client graphql.Client,
	dataPoolAccessPolicy string,
	application string,
) (*UnAssignDataPoolAccessPolicyResponse, error) {
	req := &graphql.Request{
		OpName: "UnAssignDataPoolAccessPolicy",
		Query:  UnAssignDataPoolAccessPolicy_Operation,
		Variables: &__UnAssignDataPoolAccessPolicyInput{
			DataPoolAccessPolicy: dataPoolAccessPolicy,
			Application:          application,
		},
	}
	var err error

	var data UnAssignDataPoolAccessPolicyResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
